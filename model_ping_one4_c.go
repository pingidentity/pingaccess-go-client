/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PingOne4C The PingOne for Customers OIDC provider configuration.
type PingOne4C struct {
	// The description of the PingOne for Customers OIDC provider.
	Description *string `json:"description,omitempty"`
	// The issuer url of the PingOne for Customers OIDC provider.
	Issuer string `json:"issuer"`
	// The group of certificates to use when authenticating to PingOne for Customers OIDC provider.
	TrustedCertificateGroupId *int32 `json:"trustedCertificateGroupId,omitempty"`
	// True if a proxy should be used for HTTPS requests.
	UseProxy *bool `json:"useProxy,omitempty"`
}

// NewPingOne4C instantiates a new PingOne4C object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingOne4C(issuer string) *PingOne4C {
	this := PingOne4C{}
	this.Issuer = issuer
	return &this
}

// NewPingOne4CWithDefaults instantiates a new PingOne4C object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingOne4CWithDefaults() *PingOne4C {
	this := PingOne4C{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PingOne4C) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOne4C) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PingOne4C) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PingOne4C) SetDescription(v string) {
	o.Description = &v
}

// GetIssuer returns the Issuer field value
func (o *PingOne4C) GetIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *PingOne4C) GetIssuerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *PingOne4C) SetIssuer(v string) {
	o.Issuer = v
}

// GetTrustedCertificateGroupId returns the TrustedCertificateGroupId field value if set, zero value otherwise.
func (o *PingOne4C) GetTrustedCertificateGroupId() int32 {
	if o == nil || isNil(o.TrustedCertificateGroupId) {
		var ret int32
		return ret
	}
	return *o.TrustedCertificateGroupId
}

// GetTrustedCertificateGroupIdOk returns a tuple with the TrustedCertificateGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOne4C) GetTrustedCertificateGroupIdOk() (*int32, bool) {
	if o == nil || isNil(o.TrustedCertificateGroupId) {
    return nil, false
	}
	return o.TrustedCertificateGroupId, true
}

// HasTrustedCertificateGroupId returns a boolean if a field has been set.
func (o *PingOne4C) HasTrustedCertificateGroupId() bool {
	if o != nil && !isNil(o.TrustedCertificateGroupId) {
		return true
	}

	return false
}

// SetTrustedCertificateGroupId gets a reference to the given int32 and assigns it to the TrustedCertificateGroupId field.
func (o *PingOne4C) SetTrustedCertificateGroupId(v int32) {
	o.TrustedCertificateGroupId = &v
}

// GetUseProxy returns the UseProxy field value if set, zero value otherwise.
func (o *PingOne4C) GetUseProxy() bool {
	if o == nil || isNil(o.UseProxy) {
		var ret bool
		return ret
	}
	return *o.UseProxy
}

// GetUseProxyOk returns a tuple with the UseProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOne4C) GetUseProxyOk() (*bool, bool) {
	if o == nil || isNil(o.UseProxy) {
    return nil, false
	}
	return o.UseProxy, true
}

// HasUseProxy returns a boolean if a field has been set.
func (o *PingOne4C) HasUseProxy() bool {
	if o != nil && !isNil(o.UseProxy) {
		return true
	}

	return false
}

// SetUseProxy gets a reference to the given bool and assigns it to the UseProxy field.
func (o *PingOne4C) SetUseProxy(v bool) {
	o.UseProxy = &v
}

func (o PingOne4C) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["issuer"] = o.Issuer
	}
	if !isNil(o.TrustedCertificateGroupId) {
		toSerialize["trustedCertificateGroupId"] = o.TrustedCertificateGroupId
	}
	if !isNil(o.UseProxy) {
		toSerialize["useProxy"] = o.UseProxy
	}
	return json.Marshal(toSerialize)
}

type NullablePingOne4C struct {
	value *PingOne4C
	isSet bool
}

func (v NullablePingOne4C) Get() *PingOne4C {
	return v.value
}

func (v *NullablePingOne4C) Set(val *PingOne4C) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOne4C) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOne4C) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOne4C(val *PingOne4C) *NullablePingOne4C {
	return &NullablePingOne4C{value: val, isSet: true}
}

func (v NullablePingOne4C) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOne4C) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


