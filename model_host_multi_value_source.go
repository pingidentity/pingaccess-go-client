/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HostMultiValueSource Configuration for the host source.
type HostMultiValueSource struct {
	// An array of header names used to identify the host source name.
	HeaderNameList []string `json:"headerNameList"`
	ListValueLocation ListValueLocation `json:"listValueLocation"`
}

// NewHostMultiValueSource instantiates a new HostMultiValueSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostMultiValueSource(headerNameList []string, listValueLocation ListValueLocation) *HostMultiValueSource {
	this := HostMultiValueSource{}
	this.HeaderNameList = headerNameList
	this.ListValueLocation = listValueLocation
	return &this
}

// NewHostMultiValueSourceWithDefaults instantiates a new HostMultiValueSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostMultiValueSourceWithDefaults() *HostMultiValueSource {
	this := HostMultiValueSource{}
	return &this
}

// GetHeaderNameList returns the HeaderNameList field value
func (o *HostMultiValueSource) GetHeaderNameList() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HeaderNameList
}

// GetHeaderNameListOk returns a tuple with the HeaderNameList field value
// and a boolean to check if the value has been set.
func (o *HostMultiValueSource) GetHeaderNameListOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.HeaderNameList, true
}

// SetHeaderNameList sets field value
func (o *HostMultiValueSource) SetHeaderNameList(v []string) {
	o.HeaderNameList = v
}

// GetListValueLocation returns the ListValueLocation field value
func (o *HostMultiValueSource) GetListValueLocation() ListValueLocation {
	if o == nil {
		var ret ListValueLocation
		return ret
	}

	return o.ListValueLocation
}

// GetListValueLocationOk returns a tuple with the ListValueLocation field value
// and a boolean to check if the value has been set.
func (o *HostMultiValueSource) GetListValueLocationOk() (*ListValueLocation, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ListValueLocation, true
}

// SetListValueLocation sets field value
func (o *HostMultiValueSource) SetListValueLocation(v ListValueLocation) {
	o.ListValueLocation = v
}

func (o HostMultiValueSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["headerNameList"] = o.HeaderNameList
	}
	if true {
		toSerialize["listValueLocation"] = o.ListValueLocation
	}
	return json.Marshal(toSerialize)
}

type NullableHostMultiValueSource struct {
	value *HostMultiValueSource
	isSet bool
}

func (v NullableHostMultiValueSource) Get() *HostMultiValueSource {
	return v.value
}

func (v *NullableHostMultiValueSource) Set(val *HostMultiValueSource) {
	v.value = val
	v.isSet = true
}

func (v NullableHostMultiValueSource) IsSet() bool {
	return v.isSet
}

func (v *NullableHostMultiValueSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostMultiValueSource(val *HostMultiValueSource) *NullableHostMultiValueSource {
	return &NullableHostMultiValueSource{value: val, isSet: true}
}

func (v NullableHostMultiValueSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostMultiValueSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


