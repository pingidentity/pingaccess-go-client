/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ConfigStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigStatus{}

// ConfigStatus An import or export configuration.
type ConfigStatus struct {
	// The id of the configuration workflow.
	Id *int64 `json:"id,omitempty"`
	// The status of the configuration import or export.
	Status *string `json:"status,omitempty"`
	// The current entity being imported or exported.
	CurrentEntity map[string]interface{} `json:"currentEntity,omitempty"`
	// The total number of entities being imported or exported.
	TotalEntities *int64    `json:"totalEntities,omitempty"`
	ApiErrorView  *ApiError `json:"apiErrorView,omitempty"`
	// The API warnings for import or export, if there are any warnings.
	Warnings []string `json:"warnings"`
}

// NewConfigStatus instantiates a new ConfigStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigStatus(warnings []string) *ConfigStatus {
	this := ConfigStatus{}
	this.Warnings = warnings
	return &this
}

// NewConfigStatusWithDefaults instantiates a new ConfigStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigStatusWithDefaults() *ConfigStatus {
	this := ConfigStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigStatus) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ConfigStatus) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConfigStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConfigStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConfigStatus) SetStatus(v string) {
	o.Status = &v
}

// GetCurrentEntity returns the CurrentEntity field value if set, zero value otherwise.
func (o *ConfigStatus) GetCurrentEntity() map[string]interface{} {
	if o == nil || IsNil(o.CurrentEntity) {
		var ret map[string]interface{}
		return ret
	}
	return o.CurrentEntity
}

// GetCurrentEntityOk returns a tuple with the CurrentEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetCurrentEntityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CurrentEntity) {
		return map[string]interface{}{}, false
	}
	return o.CurrentEntity, true
}

// HasCurrentEntity returns a boolean if a field has been set.
func (o *ConfigStatus) HasCurrentEntity() bool {
	if o != nil && !IsNil(o.CurrentEntity) {
		return true
	}

	return false
}

// SetCurrentEntity gets a reference to the given map[string]interface{} and assigns it to the CurrentEntity field.
func (o *ConfigStatus) SetCurrentEntity(v map[string]interface{}) {
	o.CurrentEntity = v
}

// GetTotalEntities returns the TotalEntities field value if set, zero value otherwise.
func (o *ConfigStatus) GetTotalEntities() int64 {
	if o == nil || IsNil(o.TotalEntities) {
		var ret int64
		return ret
	}
	return *o.TotalEntities
}

// GetTotalEntitiesOk returns a tuple with the TotalEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetTotalEntitiesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalEntities) {
		return nil, false
	}
	return o.TotalEntities, true
}

// HasTotalEntities returns a boolean if a field has been set.
func (o *ConfigStatus) HasTotalEntities() bool {
	if o != nil && !IsNil(o.TotalEntities) {
		return true
	}

	return false
}

// SetTotalEntities gets a reference to the given int64 and assigns it to the TotalEntities field.
func (o *ConfigStatus) SetTotalEntities(v int64) {
	o.TotalEntities = &v
}

// GetApiErrorView returns the ApiErrorView field value if set, zero value otherwise.
func (o *ConfigStatus) GetApiErrorView() ApiError {
	if o == nil || IsNil(o.ApiErrorView) {
		var ret ApiError
		return ret
	}
	return *o.ApiErrorView
}

// GetApiErrorViewOk returns a tuple with the ApiErrorView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetApiErrorViewOk() (*ApiError, bool) {
	if o == nil || IsNil(o.ApiErrorView) {
		return nil, false
	}
	return o.ApiErrorView, true
}

// HasApiErrorView returns a boolean if a field has been set.
func (o *ConfigStatus) HasApiErrorView() bool {
	if o != nil && !IsNil(o.ApiErrorView) {
		return true
	}

	return false
}

// SetApiErrorView gets a reference to the given ApiError and assigns it to the ApiErrorView field.
func (o *ConfigStatus) SetApiErrorView(v ApiError) {
	o.ApiErrorView = &v
}

// GetWarnings returns the Warnings field value
func (o *ConfigStatus) GetWarnings() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetWarningsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Warnings, true
}

// SetWarnings sets field value
func (o *ConfigStatus) SetWarnings(v []string) {
	o.Warnings = v
}

func (o ConfigStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CurrentEntity) {
		toSerialize["currentEntity"] = o.CurrentEntity
	}
	if !IsNil(o.TotalEntities) {
		toSerialize["totalEntities"] = o.TotalEntities
	}
	if !IsNil(o.ApiErrorView) {
		toSerialize["apiErrorView"] = o.ApiErrorView
	}
	toSerialize["warnings"] = o.Warnings
	return toSerialize, nil
}

type NullableConfigStatus struct {
	value *ConfigStatus
	isSet bool
}

func (v NullableConfigStatus) Get() *ConfigStatus {
	return v.value
}

func (v *NullableConfigStatus) Set(val *ConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigStatus(val *ConfigStatus) *NullableConfigStatus {
	return &NullableConfigStatus{value: val, isSet: true}
}

func (v NullableConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
