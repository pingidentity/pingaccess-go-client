/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigStatus An import or export configuration.
type ConfigStatus struct {
	// The id of the configuration workflow.
	Id *int32 `json:"id,omitempty"`
	// The status of the configuration import or export.
	Status *string `json:"status,omitempty"`
	// The current entity being imported or exported.
	CurrentEntity map[string]interface{} `json:"currentEntity,omitempty"`
	// The total number of entities being imported or exported.
	TotalEntities *int32 `json:"totalEntities,omitempty"`
	ApiErrorView *ApiError `json:"apiErrorView,omitempty"`
	// The API warnings for import or export, if there are any warnings.
	Warnings []string `json:"warnings"`
}

// NewConfigStatus instantiates a new ConfigStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigStatus(warnings []string) *ConfigStatus {
	this := ConfigStatus{}
	this.Warnings = warnings
	return &this
}

// NewConfigStatusWithDefaults instantiates a new ConfigStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigStatusWithDefaults() *ConfigStatus {
	this := ConfigStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigStatus) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigStatus) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ConfigStatus) SetId(v int32) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConfigStatus) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConfigStatus) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConfigStatus) SetStatus(v string) {
	o.Status = &v
}

// GetCurrentEntity returns the CurrentEntity field value if set, zero value otherwise.
func (o *ConfigStatus) GetCurrentEntity() map[string]interface{} {
	if o == nil || isNil(o.CurrentEntity) {
		var ret map[string]interface{}
		return ret
	}
	return o.CurrentEntity
}

// GetCurrentEntityOk returns a tuple with the CurrentEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetCurrentEntityOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.CurrentEntity) {
    return map[string]interface{}{}, false
	}
	return o.CurrentEntity, true
}

// HasCurrentEntity returns a boolean if a field has been set.
func (o *ConfigStatus) HasCurrentEntity() bool {
	if o != nil && !isNil(o.CurrentEntity) {
		return true
	}

	return false
}

// SetCurrentEntity gets a reference to the given map[string]interface{} and assigns it to the CurrentEntity field.
func (o *ConfigStatus) SetCurrentEntity(v map[string]interface{}) {
	o.CurrentEntity = v
}

// GetTotalEntities returns the TotalEntities field value if set, zero value otherwise.
func (o *ConfigStatus) GetTotalEntities() int32 {
	if o == nil || isNil(o.TotalEntities) {
		var ret int32
		return ret
	}
	return *o.TotalEntities
}

// GetTotalEntitiesOk returns a tuple with the TotalEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetTotalEntitiesOk() (*int32, bool) {
	if o == nil || isNil(o.TotalEntities) {
    return nil, false
	}
	return o.TotalEntities, true
}

// HasTotalEntities returns a boolean if a field has been set.
func (o *ConfigStatus) HasTotalEntities() bool {
	if o != nil && !isNil(o.TotalEntities) {
		return true
	}

	return false
}

// SetTotalEntities gets a reference to the given int32 and assigns it to the TotalEntities field.
func (o *ConfigStatus) SetTotalEntities(v int32) {
	o.TotalEntities = &v
}

// GetApiErrorView returns the ApiErrorView field value if set, zero value otherwise.
func (o *ConfigStatus) GetApiErrorView() ApiError {
	if o == nil || isNil(o.ApiErrorView) {
		var ret ApiError
		return ret
	}
	return *o.ApiErrorView
}

// GetApiErrorViewOk returns a tuple with the ApiErrorView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetApiErrorViewOk() (*ApiError, bool) {
	if o == nil || isNil(o.ApiErrorView) {
    return nil, false
	}
	return o.ApiErrorView, true
}

// HasApiErrorView returns a boolean if a field has been set.
func (o *ConfigStatus) HasApiErrorView() bool {
	if o != nil && !isNil(o.ApiErrorView) {
		return true
	}

	return false
}

// SetApiErrorView gets a reference to the given ApiError and assigns it to the ApiErrorView field.
func (o *ConfigStatus) SetApiErrorView(v ApiError) {
	o.ApiErrorView = &v
}

// GetWarnings returns the Warnings field value
func (o *ConfigStatus) GetWarnings() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *ConfigStatus) GetWarningsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Warnings, true
}

// SetWarnings sets field value
func (o *ConfigStatus) SetWarnings(v []string) {
	o.Warnings = v
}

func (o ConfigStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.CurrentEntity) {
		toSerialize["currentEntity"] = o.CurrentEntity
	}
	if !isNil(o.TotalEntities) {
		toSerialize["totalEntities"] = o.TotalEntities
	}
	if !isNil(o.ApiErrorView) {
		toSerialize["apiErrorView"] = o.ApiErrorView
	}
	if true {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableConfigStatus struct {
	value *ConfigStatus
	isSet bool
}

func (v NullableConfigStatus) Get() *ConfigStatus {
	return v.value
}

func (v *NullableConfigStatus) Set(val *ConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigStatus(val *ConfigStatus) *NullableConfigStatus {
	return &NullableConfigStatus{value: val, isSet: true}
}

func (v NullableConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


