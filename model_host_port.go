/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the HostPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostPort{}

// HostPort A redirect source.
type HostPort struct {
	// The hostname.
	Host string `json:"host"`
	// The port number.
	Port int64 `json:"port"`
}

// NewHostPort instantiates a new HostPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostPort(host string, port int64) *HostPort {
	this := HostPort{}
	this.Host = host
	this.Port = port
	return &this
}

// NewHostPortWithDefaults instantiates a new HostPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostPortWithDefaults() *HostPort {
	this := HostPort{}
	return &this
}

// GetHost returns the Host field value
func (o *HostPort) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *HostPort) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *HostPort) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *HostPort) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *HostPort) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *HostPort) SetPort(v int64) {
	o.Port = v
}

func (o HostPort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	return toSerialize, nil
}

type NullableHostPort struct {
	value *HostPort
	isSet bool
}

func (v NullableHostPort) Get() *HostPort {
	return v.value
}

func (v *NullableHostPort) Set(val *HostPort) {
	v.value = val
	v.isSet = true
}

func (v NullableHostPort) IsSet() bool {
	return v.isSet
}

func (v *NullableHostPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostPort(val *HostPort) *NullableHostPort {
	return &NullableHostPort{value: val, isSet: true}
}

func (v NullableHostPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
