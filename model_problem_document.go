/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ProblemDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDocument{}

// ProblemDocument An RFC 7807 problem details object.
type ProblemDocument struct {
	// The problem type.
	Type string `json:"type"`
	// A user-friendly explanation of the problem.
	Detail string `json:"detail"`
}

// NewProblemDocument instantiates a new ProblemDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDocument(type_ string, detail string) *ProblemDocument {
	this := ProblemDocument{}
	this.Type = type_
	this.Detail = detail
	return &this
}

// NewProblemDocumentWithDefaults instantiates a new ProblemDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDocumentWithDefaults() *ProblemDocument {
	this := ProblemDocument{}
	return &this
}

// GetType returns the Type field value
func (o *ProblemDocument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProblemDocument) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProblemDocument) SetType(v string) {
	o.Type = v
}

// GetDetail returns the Detail field value
func (o *ProblemDocument) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ProblemDocument) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ProblemDocument) SetDetail(v string) {
	o.Detail = v
}

func (o ProblemDocument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["detail"] = o.Detail
	return toSerialize, nil
}

type NullableProblemDocument struct {
	value *ProblemDocument
	isSet bool
}

func (v NullableProblemDocument) Get() *ProblemDocument {
	return v.value
}

func (v *NullableProblemDocument) Set(val *ProblemDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDocument(val *ProblemDocument) *NullableProblemDocument {
	return &NullableProblemDocument{value: val, isSet: true}
}

func (v NullableProblemDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
