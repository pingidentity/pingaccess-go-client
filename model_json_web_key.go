/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the JsonWebKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonWebKey{}

// JsonWebKey A JSON Web Key.
type JsonWebKey struct {
	// The key.
	K *string `json:"k,omitempty"`
	// The key id.
	Kid *string `json:"kid,omitempty"`
	// The list of key operations.
	KeyOps *string `json:"key_ops,omitempty"`
	// The key type.
	Kty *string `json:"kty,omitempty"`
	// The algorithm name.
	Alg *string `json:"alg,omitempty"`
}

// NewJsonWebKey instantiates a new JsonWebKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonWebKey() *JsonWebKey {
	this := JsonWebKey{}
	return &this
}

// NewJsonWebKeyWithDefaults instantiates a new JsonWebKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonWebKeyWithDefaults() *JsonWebKey {
	this := JsonWebKey{}
	return &this
}

// GetK returns the K field value if set, zero value otherwise.
func (o *JsonWebKey) GetK() string {
	if o == nil || IsNil(o.K) {
		var ret string
		return ret
	}
	return *o.K
}

// GetKOk returns a tuple with the K field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonWebKey) GetKOk() (*string, bool) {
	if o == nil || IsNil(o.K) {
		return nil, false
	}
	return o.K, true
}

// HasK returns a boolean if a field has been set.
func (o *JsonWebKey) HasK() bool {
	if o != nil && !IsNil(o.K) {
		return true
	}

	return false
}

// SetK gets a reference to the given string and assigns it to the K field.
func (o *JsonWebKey) SetK(v string) {
	o.K = &v
}

// GetKid returns the Kid field value if set, zero value otherwise.
func (o *JsonWebKey) GetKid() string {
	if o == nil || IsNil(o.Kid) {
		var ret string
		return ret
	}
	return *o.Kid
}

// GetKidOk returns a tuple with the Kid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonWebKey) GetKidOk() (*string, bool) {
	if o == nil || IsNil(o.Kid) {
		return nil, false
	}
	return o.Kid, true
}

// HasKid returns a boolean if a field has been set.
func (o *JsonWebKey) HasKid() bool {
	if o != nil && !IsNil(o.Kid) {
		return true
	}

	return false
}

// SetKid gets a reference to the given string and assigns it to the Kid field.
func (o *JsonWebKey) SetKid(v string) {
	o.Kid = &v
}

// GetKeyOps returns the KeyOps field value if set, zero value otherwise.
func (o *JsonWebKey) GetKeyOps() string {
	if o == nil || IsNil(o.KeyOps) {
		var ret string
		return ret
	}
	return *o.KeyOps
}

// GetKeyOpsOk returns a tuple with the KeyOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonWebKey) GetKeyOpsOk() (*string, bool) {
	if o == nil || IsNil(o.KeyOps) {
		return nil, false
	}
	return o.KeyOps, true
}

// HasKeyOps returns a boolean if a field has been set.
func (o *JsonWebKey) HasKeyOps() bool {
	if o != nil && !IsNil(o.KeyOps) {
		return true
	}

	return false
}

// SetKeyOps gets a reference to the given string and assigns it to the KeyOps field.
func (o *JsonWebKey) SetKeyOps(v string) {
	o.KeyOps = &v
}

// GetKty returns the Kty field value if set, zero value otherwise.
func (o *JsonWebKey) GetKty() string {
	if o == nil || IsNil(o.Kty) {
		var ret string
		return ret
	}
	return *o.Kty
}

// GetKtyOk returns a tuple with the Kty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonWebKey) GetKtyOk() (*string, bool) {
	if o == nil || IsNil(o.Kty) {
		return nil, false
	}
	return o.Kty, true
}

// HasKty returns a boolean if a field has been set.
func (o *JsonWebKey) HasKty() bool {
	if o != nil && !IsNil(o.Kty) {
		return true
	}

	return false
}

// SetKty gets a reference to the given string and assigns it to the Kty field.
func (o *JsonWebKey) SetKty(v string) {
	o.Kty = &v
}

// GetAlg returns the Alg field value if set, zero value otherwise.
func (o *JsonWebKey) GetAlg() string {
	if o == nil || IsNil(o.Alg) {
		var ret string
		return ret
	}
	return *o.Alg
}

// GetAlgOk returns a tuple with the Alg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonWebKey) GetAlgOk() (*string, bool) {
	if o == nil || IsNil(o.Alg) {
		return nil, false
	}
	return o.Alg, true
}

// HasAlg returns a boolean if a field has been set.
func (o *JsonWebKey) HasAlg() bool {
	if o != nil && !IsNil(o.Alg) {
		return true
	}

	return false
}

// SetAlg gets a reference to the given string and assigns it to the Alg field.
func (o *JsonWebKey) SetAlg(v string) {
	o.Alg = &v
}

func (o JsonWebKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonWebKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.K) {
		toSerialize["k"] = o.K
	}
	if !IsNil(o.Kid) {
		toSerialize["kid"] = o.Kid
	}
	if !IsNil(o.KeyOps) {
		toSerialize["key_ops"] = o.KeyOps
	}
	if !IsNil(o.Kty) {
		toSerialize["kty"] = o.Kty
	}
	if !IsNil(o.Alg) {
		toSerialize["alg"] = o.Alg
	}
	return toSerialize, nil
}

type NullableJsonWebKey struct {
	value *JsonWebKey
	isSet bool
}

func (v NullableJsonWebKey) Get() *JsonWebKey {
	return v.value
}

func (v *NullableJsonWebKey) Set(val *JsonWebKey) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonWebKey) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonWebKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonWebKey(val *JsonWebKey) *NullableJsonWebKey {
	return &NullableJsonWebKey{value: val, isSet: true}
}

func (v NullableJsonWebKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonWebKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
