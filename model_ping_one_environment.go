/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the PingOneEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingOneEnvironment{}

// PingOneEnvironment struct for PingOneEnvironment
type PingOneEnvironment struct {
	// When creating a new PingOneEnvironment, this is the ID for the PingOneEnvironment. If not specified, an ID will be automatically assigned. When updating an existing PingOneEnvironment, this field is ignored and the ID is determined by the path parameter.
	Id   string `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
}

// NewPingOneEnvironment instantiates a new PingOneEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingOneEnvironment(id string, name string, type_ string) *PingOneEnvironment {
	this := PingOneEnvironment{}
	this.Id = id
	this.Name = name
	this.Type = type_
	return &this
}

// NewPingOneEnvironmentWithDefaults instantiates a new PingOneEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingOneEnvironmentWithDefaults() *PingOneEnvironment {
	this := PingOneEnvironment{}
	return &this
}

// GetId returns the Id field value
func (o *PingOneEnvironment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PingOneEnvironment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PingOneEnvironment) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PingOneEnvironment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PingOneEnvironment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PingOneEnvironment) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *PingOneEnvironment) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PingOneEnvironment) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PingOneEnvironment) SetType(v string) {
	o.Type = v
}

func (o PingOneEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingOneEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullablePingOneEnvironment struct {
	value *PingOneEnvironment
	isSet bool
}

func (v NullablePingOneEnvironment) Get() *PingOneEnvironment {
	return v.value
}

func (v *NullablePingOneEnvironment) Set(val *PingOneEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOneEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOneEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOneEnvironment(val *PingOneEnvironment) *NullablePingOneEnvironment {
	return &NullablePingOneEnvironment{value: val, isSet: true}
}

func (v NullablePingOneEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOneEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
