/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// ListValueLocation the model 'ListValueLocation'
type ListValueLocation string

// List of ListValueLocation
const (
	LISTVALUELOCATION_FIRST ListValueLocation = "FIRST"
	LISTVALUELOCATION_LAST  ListValueLocation = "LAST"
)

// All allowed values of ListValueLocation enum
var AllowedListValueLocationEnumValues = []ListValueLocation{
	"FIRST",
	"LAST",
}

func (v *ListValueLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListValueLocation(value)
	for _, existing := range AllowedListValueLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListValueLocation", value)
}

// NewListValueLocationFromValue returns a pointer to a valid ListValueLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListValueLocationFromValue(v string) (*ListValueLocation, error) {
	ev := ListValueLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListValueLocation: valid values are %v", v, AllowedListValueLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListValueLocation) IsValid() bool {
	for _, existing := range AllowedListValueLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListValueLocation value
func (v ListValueLocation) Ptr() *ListValueLocation {
	return &v
}

type NullableListValueLocation struct {
	value *ListValueLocation
	isSet bool
}

func (v NullableListValueLocation) Get() *ListValueLocation {
	return v.value
}

func (v *NullableListValueLocation) Set(val *ListValueLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableListValueLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableListValueLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListValueLocation(val *ListValueLocation) *NullableListValueLocation {
	return &NullableListValueLocation{value: val, isSet: true}
}

func (v NullableListValueLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListValueLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
