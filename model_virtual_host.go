/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the VirtualHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualHost{}

// VirtualHost A virtual host.
type VirtualHost struct {
	// When creating a new VirtualHost, this is the ID for the VirtualHost. If not specified, an ID will be automatically assigned. When updating an existing VirtualHost, this field is ignored and the ID is determined by the path parameter.
	Id *int32 `json:"id,omitempty"`
	// (sortable) The host name for the Virtual Host.
	Host string `json:"host"`
	// (sortable) The integer port number for the Virtual Host.
	Port int32 `json:"port"`
	// (sortable) Indicates the number of seconds the Agent can cache resources for this application.
	AgentResourceCacheTTL *int32 `json:"agentResourceCacheTTL,omitempty"`
	// Key pair assigned to Virtual Host used by SNI, If no key pair is assigned to a virtual host, ENGINE HTTPS Listener key pair will be used.
	KeyPairId *int32 `json:"keyPairId,omitempty"`
	// Trusted Certificate Group assigned to Virtual Host for client certificate authentication.
	TrustedCertificateGroupId *int32 `json:"trustedCertificateGroupId,omitempty"`
}

// NewVirtualHost instantiates a new VirtualHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualHost(host string, port int32) *VirtualHost {
	this := VirtualHost{}
	this.Host = host
	this.Port = port
	return &this
}

// NewVirtualHostWithDefaults instantiates a new VirtualHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualHostWithDefaults() *VirtualHost {
	this := VirtualHost{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualHost) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualHost) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualHost) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *VirtualHost) SetId(v int32) {
	o.Id = &v
}

// GetHost returns the Host field value
func (o *VirtualHost) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *VirtualHost) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *VirtualHost) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *VirtualHost) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *VirtualHost) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *VirtualHost) SetPort(v int32) {
	o.Port = v
}

// GetAgentResourceCacheTTL returns the AgentResourceCacheTTL field value if set, zero value otherwise.
func (o *VirtualHost) GetAgentResourceCacheTTL() int32 {
	if o == nil || IsNil(o.AgentResourceCacheTTL) {
		var ret int32
		return ret
	}
	return *o.AgentResourceCacheTTL
}

// GetAgentResourceCacheTTLOk returns a tuple with the AgentResourceCacheTTL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualHost) GetAgentResourceCacheTTLOk() (*int32, bool) {
	if o == nil || IsNil(o.AgentResourceCacheTTL) {
		return nil, false
	}
	return o.AgentResourceCacheTTL, true
}

// HasAgentResourceCacheTTL returns a boolean if a field has been set.
func (o *VirtualHost) HasAgentResourceCacheTTL() bool {
	if o != nil && !IsNil(o.AgentResourceCacheTTL) {
		return true
	}

	return false
}

// SetAgentResourceCacheTTL gets a reference to the given int32 and assigns it to the AgentResourceCacheTTL field.
func (o *VirtualHost) SetAgentResourceCacheTTL(v int32) {
	o.AgentResourceCacheTTL = &v
}

// GetKeyPairId returns the KeyPairId field value if set, zero value otherwise.
func (o *VirtualHost) GetKeyPairId() int32 {
	if o == nil || IsNil(o.KeyPairId) {
		var ret int32
		return ret
	}
	return *o.KeyPairId
}

// GetKeyPairIdOk returns a tuple with the KeyPairId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualHost) GetKeyPairIdOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyPairId) {
		return nil, false
	}
	return o.KeyPairId, true
}

// HasKeyPairId returns a boolean if a field has been set.
func (o *VirtualHost) HasKeyPairId() bool {
	if o != nil && !IsNil(o.KeyPairId) {
		return true
	}

	return false
}

// SetKeyPairId gets a reference to the given int32 and assigns it to the KeyPairId field.
func (o *VirtualHost) SetKeyPairId(v int32) {
	o.KeyPairId = &v
}

// GetTrustedCertificateGroupId returns the TrustedCertificateGroupId field value if set, zero value otherwise.
func (o *VirtualHost) GetTrustedCertificateGroupId() int32 {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		var ret int32
		return ret
	}
	return *o.TrustedCertificateGroupId
}

// GetTrustedCertificateGroupIdOk returns a tuple with the TrustedCertificateGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualHost) GetTrustedCertificateGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		return nil, false
	}
	return o.TrustedCertificateGroupId, true
}

// HasTrustedCertificateGroupId returns a boolean if a field has been set.
func (o *VirtualHost) HasTrustedCertificateGroupId() bool {
	if o != nil && !IsNil(o.TrustedCertificateGroupId) {
		return true
	}

	return false
}

// SetTrustedCertificateGroupId gets a reference to the given int32 and assigns it to the TrustedCertificateGroupId field.
func (o *VirtualHost) SetTrustedCertificateGroupId(v int32) {
	o.TrustedCertificateGroupId = &v
}

func (o VirtualHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	if !IsNil(o.AgentResourceCacheTTL) {
		toSerialize["agentResourceCacheTTL"] = o.AgentResourceCacheTTL
	}
	if !IsNil(o.KeyPairId) {
		toSerialize["keyPairId"] = o.KeyPairId
	}
	if !IsNil(o.TrustedCertificateGroupId) {
		toSerialize["trustedCertificateGroupId"] = o.TrustedCertificateGroupId
	}
	return toSerialize, nil
}

type NullableVirtualHost struct {
	value *VirtualHost
	isSet bool
}

func (v NullableVirtualHost) Get() *VirtualHost {
	return v.value
}

func (v *NullableVirtualHost) Set(val *VirtualHost) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualHost) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualHost(val *VirtualHost) *NullableVirtualHost {
	return &NullableVirtualHost{value: val, isSet: true}
}

func (v NullableVirtualHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
