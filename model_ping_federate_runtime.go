/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PingFederateRuntime A PingFederate configuration.
type PingFederateRuntime struct {
	// One or more server hostname:port pairs used to access the PingFederate server from inside a private network. Required when the PingFederate application is configured.
	Targets []string `json:"targets,omitempty"`
	// Enable if the Back Channel servers should not perform hostname verification of the certificate.
	SkipHostnameVerification *bool `json:"skipHostnameVerification,omitempty"`
	// The name of the host expected in the certificate.
	ExpectedHostname *string `json:"expectedHostname,omitempty"`
	// The base path, if needed, for the PingFederate Runtime accessed using a Back Channel hostname. This field is ignored when the PingFederate application is configured.
	BackChannelBasePath *string `json:"backChannelBasePath,omitempty"`
	// Enable if PingFederate is expecting HTTPS connections for calls via the Back Channel hostnames.
	BackChannelSecure *bool `json:"backChannelSecure,omitempty"`
	// Enable if OIDC single log out should be used on the /pa/oidc/logout on the engines.
	UseSlo *bool `json:"useSlo,omitempty"`
	Application *PingFederateRuntimeApplication `json:"application,omitempty"`
	// The ID of the availability profile to use for the PingFederate runtime. When set to 0, an availability profile defined by the pa.default.availability.ondemand properties in run.properties will be used for back end communication to PingFederate.
	AvailabilityProfileId *int32 `json:"availabilityProfileId,omitempty"`
	// The ID of the load balancing strategy to use for requests to the PingFederate targets.
	LoadBalancingStrategyId *int32 `json:"loadBalancingStrategyId,omitempty"`
	// The group of certificates to use when authenticating to PingFederate.
	TrustedCertificateGroupId *int32 `json:"trustedCertificateGroupId,omitempty"`
	// Enable if PingFederate is expecting HTTPS connections. This field is ignored when the PingFederate application is configured. In this case, use backChannelSecure instead.
	Secure *bool `json:"secure,omitempty"`
	// The base path, if needed, for PingFederate Runtime. This field is ignored when the PingFederate application is configured.
	BasePath *string `json:"basePath,omitempty"`
	// True if a proxy should be used for HTTP or HTTPS requests.
	UseProxy *bool `json:"useProxy,omitempty"`
	// The host name or IP address for PingFederate Runtime. This field is ignored and can be an empty string when the PingFederate application is configured.
	Host string `json:"host"`
	// The port number for PingFederate Runtime. This field is ignored when the PingFederate application is configured.
	Port int32 `json:"port"`
	// ['ON' or 'OFF']: Enable to record requests to PingFederate to the audit store.
	AuditLevel *string `json:"auditLevel,omitempty"`
}

// NewPingFederateRuntime instantiates a new PingFederateRuntime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingFederateRuntime(host string, port int32) *PingFederateRuntime {
	this := PingFederateRuntime{}
	this.Host = host
	this.Port = port
	return &this
}

// NewPingFederateRuntimeWithDefaults instantiates a new PingFederateRuntime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingFederateRuntimeWithDefaults() *PingFederateRuntime {
	this := PingFederateRuntime{}
	return &this
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetTargets() []string {
	if o == nil || isNil(o.Targets) {
		var ret []string
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetTargetsOk() ([]string, bool) {
	if o == nil || isNil(o.Targets) {
    return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasTargets() bool {
	if o != nil && !isNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []string and assigns it to the Targets field.
func (o *PingFederateRuntime) SetTargets(v []string) {
	o.Targets = v
}

// GetSkipHostnameVerification returns the SkipHostnameVerification field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetSkipHostnameVerification() bool {
	if o == nil || isNil(o.SkipHostnameVerification) {
		var ret bool
		return ret
	}
	return *o.SkipHostnameVerification
}

// GetSkipHostnameVerificationOk returns a tuple with the SkipHostnameVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetSkipHostnameVerificationOk() (*bool, bool) {
	if o == nil || isNil(o.SkipHostnameVerification) {
    return nil, false
	}
	return o.SkipHostnameVerification, true
}

// HasSkipHostnameVerification returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasSkipHostnameVerification() bool {
	if o != nil && !isNil(o.SkipHostnameVerification) {
		return true
	}

	return false
}

// SetSkipHostnameVerification gets a reference to the given bool and assigns it to the SkipHostnameVerification field.
func (o *PingFederateRuntime) SetSkipHostnameVerification(v bool) {
	o.SkipHostnameVerification = &v
}

// GetExpectedHostname returns the ExpectedHostname field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetExpectedHostname() string {
	if o == nil || isNil(o.ExpectedHostname) {
		var ret string
		return ret
	}
	return *o.ExpectedHostname
}

// GetExpectedHostnameOk returns a tuple with the ExpectedHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetExpectedHostnameOk() (*string, bool) {
	if o == nil || isNil(o.ExpectedHostname) {
    return nil, false
	}
	return o.ExpectedHostname, true
}

// HasExpectedHostname returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasExpectedHostname() bool {
	if o != nil && !isNil(o.ExpectedHostname) {
		return true
	}

	return false
}

// SetExpectedHostname gets a reference to the given string and assigns it to the ExpectedHostname field.
func (o *PingFederateRuntime) SetExpectedHostname(v string) {
	o.ExpectedHostname = &v
}

// GetBackChannelBasePath returns the BackChannelBasePath field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetBackChannelBasePath() string {
	if o == nil || isNil(o.BackChannelBasePath) {
		var ret string
		return ret
	}
	return *o.BackChannelBasePath
}

// GetBackChannelBasePathOk returns a tuple with the BackChannelBasePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetBackChannelBasePathOk() (*string, bool) {
	if o == nil || isNil(o.BackChannelBasePath) {
    return nil, false
	}
	return o.BackChannelBasePath, true
}

// HasBackChannelBasePath returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasBackChannelBasePath() bool {
	if o != nil && !isNil(o.BackChannelBasePath) {
		return true
	}

	return false
}

// SetBackChannelBasePath gets a reference to the given string and assigns it to the BackChannelBasePath field.
func (o *PingFederateRuntime) SetBackChannelBasePath(v string) {
	o.BackChannelBasePath = &v
}

// GetBackChannelSecure returns the BackChannelSecure field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetBackChannelSecure() bool {
	if o == nil || isNil(o.BackChannelSecure) {
		var ret bool
		return ret
	}
	return *o.BackChannelSecure
}

// GetBackChannelSecureOk returns a tuple with the BackChannelSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetBackChannelSecureOk() (*bool, bool) {
	if o == nil || isNil(o.BackChannelSecure) {
    return nil, false
	}
	return o.BackChannelSecure, true
}

// HasBackChannelSecure returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasBackChannelSecure() bool {
	if o != nil && !isNil(o.BackChannelSecure) {
		return true
	}

	return false
}

// SetBackChannelSecure gets a reference to the given bool and assigns it to the BackChannelSecure field.
func (o *PingFederateRuntime) SetBackChannelSecure(v bool) {
	o.BackChannelSecure = &v
}

// GetUseSlo returns the UseSlo field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetUseSlo() bool {
	if o == nil || isNil(o.UseSlo) {
		var ret bool
		return ret
	}
	return *o.UseSlo
}

// GetUseSloOk returns a tuple with the UseSlo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetUseSloOk() (*bool, bool) {
	if o == nil || isNil(o.UseSlo) {
    return nil, false
	}
	return o.UseSlo, true
}

// HasUseSlo returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasUseSlo() bool {
	if o != nil && !isNil(o.UseSlo) {
		return true
	}

	return false
}

// SetUseSlo gets a reference to the given bool and assigns it to the UseSlo field.
func (o *PingFederateRuntime) SetUseSlo(v bool) {
	o.UseSlo = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetApplication() PingFederateRuntimeApplication {
	if o == nil || isNil(o.Application) {
		var ret PingFederateRuntimeApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetApplicationOk() (*PingFederateRuntimeApplication, bool) {
	if o == nil || isNil(o.Application) {
    return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasApplication() bool {
	if o != nil && !isNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given PingFederateRuntimeApplication and assigns it to the Application field.
func (o *PingFederateRuntime) SetApplication(v PingFederateRuntimeApplication) {
	o.Application = &v
}

// GetAvailabilityProfileId returns the AvailabilityProfileId field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetAvailabilityProfileId() int32 {
	if o == nil || isNil(o.AvailabilityProfileId) {
		var ret int32
		return ret
	}
	return *o.AvailabilityProfileId
}

// GetAvailabilityProfileIdOk returns a tuple with the AvailabilityProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetAvailabilityProfileIdOk() (*int32, bool) {
	if o == nil || isNil(o.AvailabilityProfileId) {
    return nil, false
	}
	return o.AvailabilityProfileId, true
}

// HasAvailabilityProfileId returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasAvailabilityProfileId() bool {
	if o != nil && !isNil(o.AvailabilityProfileId) {
		return true
	}

	return false
}

// SetAvailabilityProfileId gets a reference to the given int32 and assigns it to the AvailabilityProfileId field.
func (o *PingFederateRuntime) SetAvailabilityProfileId(v int32) {
	o.AvailabilityProfileId = &v
}

// GetLoadBalancingStrategyId returns the LoadBalancingStrategyId field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetLoadBalancingStrategyId() int32 {
	if o == nil || isNil(o.LoadBalancingStrategyId) {
		var ret int32
		return ret
	}
	return *o.LoadBalancingStrategyId
}

// GetLoadBalancingStrategyIdOk returns a tuple with the LoadBalancingStrategyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetLoadBalancingStrategyIdOk() (*int32, bool) {
	if o == nil || isNil(o.LoadBalancingStrategyId) {
    return nil, false
	}
	return o.LoadBalancingStrategyId, true
}

// HasLoadBalancingStrategyId returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasLoadBalancingStrategyId() bool {
	if o != nil && !isNil(o.LoadBalancingStrategyId) {
		return true
	}

	return false
}

// SetLoadBalancingStrategyId gets a reference to the given int32 and assigns it to the LoadBalancingStrategyId field.
func (o *PingFederateRuntime) SetLoadBalancingStrategyId(v int32) {
	o.LoadBalancingStrategyId = &v
}

// GetTrustedCertificateGroupId returns the TrustedCertificateGroupId field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetTrustedCertificateGroupId() int32 {
	if o == nil || isNil(o.TrustedCertificateGroupId) {
		var ret int32
		return ret
	}
	return *o.TrustedCertificateGroupId
}

// GetTrustedCertificateGroupIdOk returns a tuple with the TrustedCertificateGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetTrustedCertificateGroupIdOk() (*int32, bool) {
	if o == nil || isNil(o.TrustedCertificateGroupId) {
    return nil, false
	}
	return o.TrustedCertificateGroupId, true
}

// HasTrustedCertificateGroupId returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasTrustedCertificateGroupId() bool {
	if o != nil && !isNil(o.TrustedCertificateGroupId) {
		return true
	}

	return false
}

// SetTrustedCertificateGroupId gets a reference to the given int32 and assigns it to the TrustedCertificateGroupId field.
func (o *PingFederateRuntime) SetTrustedCertificateGroupId(v int32) {
	o.TrustedCertificateGroupId = &v
}

// GetSecure returns the Secure field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetSecure() bool {
	if o == nil || isNil(o.Secure) {
		var ret bool
		return ret
	}
	return *o.Secure
}

// GetSecureOk returns a tuple with the Secure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetSecureOk() (*bool, bool) {
	if o == nil || isNil(o.Secure) {
    return nil, false
	}
	return o.Secure, true
}

// HasSecure returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasSecure() bool {
	if o != nil && !isNil(o.Secure) {
		return true
	}

	return false
}

// SetSecure gets a reference to the given bool and assigns it to the Secure field.
func (o *PingFederateRuntime) SetSecure(v bool) {
	o.Secure = &v
}

// GetBasePath returns the BasePath field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetBasePath() string {
	if o == nil || isNil(o.BasePath) {
		var ret string
		return ret
	}
	return *o.BasePath
}

// GetBasePathOk returns a tuple with the BasePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetBasePathOk() (*string, bool) {
	if o == nil || isNil(o.BasePath) {
    return nil, false
	}
	return o.BasePath, true
}

// HasBasePath returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasBasePath() bool {
	if o != nil && !isNil(o.BasePath) {
		return true
	}

	return false
}

// SetBasePath gets a reference to the given string and assigns it to the BasePath field.
func (o *PingFederateRuntime) SetBasePath(v string) {
	o.BasePath = &v
}

// GetUseProxy returns the UseProxy field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetUseProxy() bool {
	if o == nil || isNil(o.UseProxy) {
		var ret bool
		return ret
	}
	return *o.UseProxy
}

// GetUseProxyOk returns a tuple with the UseProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetUseProxyOk() (*bool, bool) {
	if o == nil || isNil(o.UseProxy) {
    return nil, false
	}
	return o.UseProxy, true
}

// HasUseProxy returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasUseProxy() bool {
	if o != nil && !isNil(o.UseProxy) {
		return true
	}

	return false
}

// SetUseProxy gets a reference to the given bool and assigns it to the UseProxy field.
func (o *PingFederateRuntime) SetUseProxy(v bool) {
	o.UseProxy = &v
}

// GetHost returns the Host field value
func (o *PingFederateRuntime) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetHostOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *PingFederateRuntime) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *PingFederateRuntime) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetPortOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *PingFederateRuntime) SetPort(v int32) {
	o.Port = v
}

// GetAuditLevel returns the AuditLevel field value if set, zero value otherwise.
func (o *PingFederateRuntime) GetAuditLevel() string {
	if o == nil || isNil(o.AuditLevel) {
		var ret string
		return ret
	}
	return *o.AuditLevel
}

// GetAuditLevelOk returns a tuple with the AuditLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntime) GetAuditLevelOk() (*string, bool) {
	if o == nil || isNil(o.AuditLevel) {
    return nil, false
	}
	return o.AuditLevel, true
}

// HasAuditLevel returns a boolean if a field has been set.
func (o *PingFederateRuntime) HasAuditLevel() bool {
	if o != nil && !isNil(o.AuditLevel) {
		return true
	}

	return false
}

// SetAuditLevel gets a reference to the given string and assigns it to the AuditLevel field.
func (o *PingFederateRuntime) SetAuditLevel(v string) {
	o.AuditLevel = &v
}

func (o PingFederateRuntime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}
	if !isNil(o.SkipHostnameVerification) {
		toSerialize["skipHostnameVerification"] = o.SkipHostnameVerification
	}
	if !isNil(o.ExpectedHostname) {
		toSerialize["expectedHostname"] = o.ExpectedHostname
	}
	if !isNil(o.BackChannelBasePath) {
		toSerialize["backChannelBasePath"] = o.BackChannelBasePath
	}
	if !isNil(o.BackChannelSecure) {
		toSerialize["backChannelSecure"] = o.BackChannelSecure
	}
	if !isNil(o.UseSlo) {
		toSerialize["useSlo"] = o.UseSlo
	}
	if !isNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !isNil(o.AvailabilityProfileId) {
		toSerialize["availabilityProfileId"] = o.AvailabilityProfileId
	}
	if !isNil(o.LoadBalancingStrategyId) {
		toSerialize["loadBalancingStrategyId"] = o.LoadBalancingStrategyId
	}
	if !isNil(o.TrustedCertificateGroupId) {
		toSerialize["trustedCertificateGroupId"] = o.TrustedCertificateGroupId
	}
	if !isNil(o.Secure) {
		toSerialize["secure"] = o.Secure
	}
	if !isNil(o.BasePath) {
		toSerialize["basePath"] = o.BasePath
	}
	if !isNil(o.UseProxy) {
		toSerialize["useProxy"] = o.UseProxy
	}
	if true {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if !isNil(o.AuditLevel) {
		toSerialize["auditLevel"] = o.AuditLevel
	}
	return json.Marshal(toSerialize)
}

type NullablePingFederateRuntime struct {
	value *PingFederateRuntime
	isSet bool
}

func (v NullablePingFederateRuntime) Get() *PingFederateRuntime {
	return v.value
}

func (v *NullablePingFederateRuntime) Set(val *PingFederateRuntime) {
	v.value = val
	v.isSet = true
}

func (v NullablePingFederateRuntime) IsSet() bool {
	return v.isSet
}

func (v *NullablePingFederateRuntime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingFederateRuntime(val *PingFederateRuntime) *NullablePingFederateRuntime {
	return &NullablePingFederateRuntime{value: val, isSet: true}
}

func (v NullablePingFederateRuntime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingFederateRuntime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


