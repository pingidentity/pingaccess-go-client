/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SuccessCriteria the model 'SuccessCriteria'
type SuccessCriteria string

// List of SuccessCriteria
const (
	SUCCESSCRITERIA_SUCCESS_IF_ALL_SUCCEED SuccessCriteria = "SuccessIfAllSucceed"
	SUCCESSCRITERIA_SUCCESS_IF_ANY_ONE_SUCCEEDS SuccessCriteria = "SuccessIfAnyOneSucceeds"
)

// All allowed values of SuccessCriteria enum
var AllowedSuccessCriteriaEnumValues = []SuccessCriteria{
	"SuccessIfAllSucceed",
	"SuccessIfAnyOneSucceeds",
}

func (v *SuccessCriteria) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuccessCriteria(value)
	for _, existing := range AllowedSuccessCriteriaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuccessCriteria", value)
}

// NewSuccessCriteriaFromValue returns a pointer to a valid SuccessCriteria
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuccessCriteriaFromValue(v string) (*SuccessCriteria, error) {
	ev := SuccessCriteria(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuccessCriteria: valid values are %v", v, AllowedSuccessCriteriaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuccessCriteria) IsValid() bool {
	for _, existing := range AllowedSuccessCriteriaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuccessCriteria value
func (v SuccessCriteria) Ptr() *SuccessCriteria {
	return &v
}

type NullableSuccessCriteria struct {
	value *SuccessCriteria
	isSet bool
}

func (v NullableSuccessCriteria) Get() *SuccessCriteria {
	return v.value
}

func (v *NullableSuccessCriteria) Set(val *SuccessCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessCriteria(val *SuccessCriteria) *NullableSuccessCriteria {
	return &NullableSuccessCriteria{value: val, isSet: true}
}

func (v NullableSuccessCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

