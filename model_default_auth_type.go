/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DefaultAuthType the model 'DefaultAuthType'
type DefaultAuthType string

// List of DefaultAuthType
const (
	DEFAULTAUTHTYPE_WEB DefaultAuthType = "Web"
	DEFAULTAUTHTYPE_API DefaultAuthType = "API"
)

// All allowed values of DefaultAuthType enum
var AllowedDefaultAuthTypeEnumValues = []DefaultAuthType{
	"Web",
	"API",
}

func (v *DefaultAuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefaultAuthType(value)
	for _, existing := range AllowedDefaultAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefaultAuthType", value)
}

// NewDefaultAuthTypeFromValue returns a pointer to a valid DefaultAuthType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultAuthTypeFromValue(v string) (*DefaultAuthType, error) {
	ev := DefaultAuthType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefaultAuthType: valid values are %v", v, AllowedDefaultAuthTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefaultAuthType) IsValid() bool {
	for _, existing := range AllowedDefaultAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DefaultAuthType value
func (v DefaultAuthType) Ptr() *DefaultAuthType {
	return &v
}

type NullableDefaultAuthType struct {
	value *DefaultAuthType
	isSet bool
}

func (v NullableDefaultAuthType) Get() *DefaultAuthType {
	return v.value
}

func (v *NullableDefaultAuthType) Set(val *DefaultAuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultAuthType(val *DefaultAuthType) *NullableDefaultAuthType {
	return &NullableDefaultAuthType{value: val, isSet: true}
}

func (v NullableDefaultAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

