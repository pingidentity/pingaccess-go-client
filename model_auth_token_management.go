/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AuthTokenManagement An auth token management configuration.
type AuthTokenManagement struct {
	// This field is true if key rollover is enabled. When false, PingAccess will not rollover keys at the configured interval.
	KeyRollEnabled *bool `json:"keyRollEnabled,omitempty"`
	// The interval (in hours) at which PingAccess will roll the keys. Key rollover updates keys at regular intervals to ensure the security of signed auth tokens.
	KeyRollPeriodInHours *int64 `json:"keyRollPeriodInHours,omitempty"`
	// The issuer value to include in auth tokens. PingAccess inserts this value as the iss claim within the auth tokens.
	Issuer *string `json:"issuer,omitempty"`
	// The signing algorithm used when creating signed auth tokens.
	SigningAlgorithm *string `json:"signingAlgorithm,omitempty"`
}

// NewAuthTokenManagement instantiates a new AuthTokenManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthTokenManagement() *AuthTokenManagement {
	this := AuthTokenManagement{}
	return &this
}

// NewAuthTokenManagementWithDefaults instantiates a new AuthTokenManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthTokenManagementWithDefaults() *AuthTokenManagement {
	this := AuthTokenManagement{}
	return &this
}

// GetKeyRollEnabled returns the KeyRollEnabled field value if set, zero value otherwise.
func (o *AuthTokenManagement) GetKeyRollEnabled() bool {
	if o == nil || isNil(o.KeyRollEnabled) {
		var ret bool
		return ret
	}
	return *o.KeyRollEnabled
}

// GetKeyRollEnabledOk returns a tuple with the KeyRollEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenManagement) GetKeyRollEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.KeyRollEnabled) {
    return nil, false
	}
	return o.KeyRollEnabled, true
}

// HasKeyRollEnabled returns a boolean if a field has been set.
func (o *AuthTokenManagement) HasKeyRollEnabled() bool {
	if o != nil && !isNil(o.KeyRollEnabled) {
		return true
	}

	return false
}

// SetKeyRollEnabled gets a reference to the given bool and assigns it to the KeyRollEnabled field.
func (o *AuthTokenManagement) SetKeyRollEnabled(v bool) {
	o.KeyRollEnabled = &v
}

// GetKeyRollPeriodInHours returns the KeyRollPeriodInHours field value if set, zero value otherwise.
func (o *AuthTokenManagement) GetKeyRollPeriodInHours() int64 {
	if o == nil || isNil(o.KeyRollPeriodInHours) {
		var ret int64
		return ret
	}
	return *o.KeyRollPeriodInHours
}

// GetKeyRollPeriodInHoursOk returns a tuple with the KeyRollPeriodInHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenManagement) GetKeyRollPeriodInHoursOk() (*int64, bool) {
	if o == nil || isNil(o.KeyRollPeriodInHours) {
    return nil, false
	}
	return o.KeyRollPeriodInHours, true
}

// HasKeyRollPeriodInHours returns a boolean if a field has been set.
func (o *AuthTokenManagement) HasKeyRollPeriodInHours() bool {
	if o != nil && !isNil(o.KeyRollPeriodInHours) {
		return true
	}

	return false
}

// SetKeyRollPeriodInHours gets a reference to the given int64 and assigns it to the KeyRollPeriodInHours field.
func (o *AuthTokenManagement) SetKeyRollPeriodInHours(v int64) {
	o.KeyRollPeriodInHours = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *AuthTokenManagement) GetIssuer() string {
	if o == nil || isNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenManagement) GetIssuerOk() (*string, bool) {
	if o == nil || isNil(o.Issuer) {
    return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *AuthTokenManagement) HasIssuer() bool {
	if o != nil && !isNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *AuthTokenManagement) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSigningAlgorithm returns the SigningAlgorithm field value if set, zero value otherwise.
func (o *AuthTokenManagement) GetSigningAlgorithm() string {
	if o == nil || isNil(o.SigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.SigningAlgorithm
}

// GetSigningAlgorithmOk returns a tuple with the SigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenManagement) GetSigningAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.SigningAlgorithm) {
    return nil, false
	}
	return o.SigningAlgorithm, true
}

// HasSigningAlgorithm returns a boolean if a field has been set.
func (o *AuthTokenManagement) HasSigningAlgorithm() bool {
	if o != nil && !isNil(o.SigningAlgorithm) {
		return true
	}

	return false
}

// SetSigningAlgorithm gets a reference to the given string and assigns it to the SigningAlgorithm field.
func (o *AuthTokenManagement) SetSigningAlgorithm(v string) {
	o.SigningAlgorithm = &v
}

func (o AuthTokenManagement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.KeyRollEnabled) {
		toSerialize["keyRollEnabled"] = o.KeyRollEnabled
	}
	if !isNil(o.KeyRollPeriodInHours) {
		toSerialize["keyRollPeriodInHours"] = o.KeyRollPeriodInHours
	}
	if !isNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !isNil(o.SigningAlgorithm) {
		toSerialize["signingAlgorithm"] = o.SigningAlgorithm
	}
	return json.Marshal(toSerialize)
}

type NullableAuthTokenManagement struct {
	value *AuthTokenManagement
	isSet bool
}

func (v NullableAuthTokenManagement) Get() *AuthTokenManagement {
	return v.value
}

func (v *NullableAuthTokenManagement) Set(val *AuthTokenManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthTokenManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthTokenManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthTokenManagement(val *AuthTokenManagement) *NullableAuthTokenManagement {
	return &NullableAuthTokenManagement{value: val, isSet: true}
}

func (v NullableAuthTokenManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthTokenManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


