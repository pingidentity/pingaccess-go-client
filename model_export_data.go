/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExportData A JSON backup file.
type ExportData struct {
	// The version of PingAccess that was exported.
	Version *string `json:"version,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	// A JSON Web Key (JWK), as defined by https://tools.ietf.org/html/rfc7517
	EncryptionKey map[string]interface{} `json:"encryptionKey,omitempty"`
	MasterKeys *MasterKeys `json:"masterKeys,omitempty"`
}

// NewExportData instantiates a new ExportData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportData() *ExportData {
	this := ExportData{}
	return &this
}

// NewExportDataWithDefaults instantiates a new ExportData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportDataWithDefaults() *ExportData {
	this := ExportData{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExportData) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportData) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExportData) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExportData) SetVersion(v string) {
	o.Version = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ExportData) GetData() map[string]interface{} {
	if o == nil || isNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportData) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Data) {
    return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ExportData) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *ExportData) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *ExportData) GetEncryptionKey() map[string]interface{} {
	if o == nil || isNil(o.EncryptionKey) {
		var ret map[string]interface{}
		return ret
	}
	return o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportData) GetEncryptionKeyOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.EncryptionKey) {
    return map[string]interface{}{}, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *ExportData) HasEncryptionKey() bool {
	if o != nil && !isNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given map[string]interface{} and assigns it to the EncryptionKey field.
func (o *ExportData) SetEncryptionKey(v map[string]interface{}) {
	o.EncryptionKey = v
}

// GetMasterKeys returns the MasterKeys field value if set, zero value otherwise.
func (o *ExportData) GetMasterKeys() MasterKeys {
	if o == nil || isNil(o.MasterKeys) {
		var ret MasterKeys
		return ret
	}
	return *o.MasterKeys
}

// GetMasterKeysOk returns a tuple with the MasterKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportData) GetMasterKeysOk() (*MasterKeys, bool) {
	if o == nil || isNil(o.MasterKeys) {
    return nil, false
	}
	return o.MasterKeys, true
}

// HasMasterKeys returns a boolean if a field has been set.
func (o *ExportData) HasMasterKeys() bool {
	if o != nil && !isNil(o.MasterKeys) {
		return true
	}

	return false
}

// SetMasterKeys gets a reference to the given MasterKeys and assigns it to the MasterKeys field.
func (o *ExportData) SetMasterKeys(v MasterKeys) {
	o.MasterKeys = &v
}

func (o ExportData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.EncryptionKey) {
		toSerialize["encryptionKey"] = o.EncryptionKey
	}
	if !isNil(o.MasterKeys) {
		toSerialize["masterKeys"] = o.MasterKeys
	}
	return json.Marshal(toSerialize)
}

type NullableExportData struct {
	value *ExportData
	isSet bool
}

func (v NullableExportData) Get() *ExportData {
	return v.value
}

func (v *NullableExportData) Set(val *ExportData) {
	v.value = val
	v.isSet = true
}

func (v NullableExportData) IsSet() bool {
	return v.isSet
}

func (v *NullableExportData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportData(val *ExportData) *NullableExportData {
	return &NullableExportData{value: val, isSet: true}
}

func (v NullableExportData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


