/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SupportedScopes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedScopes{}

// SupportedScopes A set of scopes supported by the OIDC Provider.
type SupportedScopes struct {
	// The list of supported scopes (excluding 'openid').
	Scopes []string `json:"scopes,omitempty"`
	// The ID of the client that the scopes are associated with. If not specified, the list of scopes represents all scopes supported by the provider.
	ClientId *string `json:"clientId,omitempty"`
}

// NewSupportedScopes instantiates a new SupportedScopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedScopes() *SupportedScopes {
	this := SupportedScopes{}
	return &this
}

// NewSupportedScopesWithDefaults instantiates a new SupportedScopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedScopesWithDefaults() *SupportedScopes {
	this := SupportedScopes{}
	return &this
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *SupportedScopes) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedScopes) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *SupportedScopes) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *SupportedScopes) SetScopes(v []string) {
	o.Scopes = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *SupportedScopes) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedScopes) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *SupportedScopes) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *SupportedScopes) SetClientId(v string) {
	o.ClientId = &v
}

func (o SupportedScopes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedScopes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	return toSerialize, nil
}

type NullableSupportedScopes struct {
	value *SupportedScopes
	isSet bool
}

func (v NullableSupportedScopes) Get() *SupportedScopes {
	return v.value
}

func (v *NullableSupportedScopes) Set(val *SupportedScopes) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedScopes(val *SupportedScopes) *NullableSupportedScopes {
	return &NullableSupportedScopes{value: val, isSet: true}
}

func (v NullableSupportedScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
