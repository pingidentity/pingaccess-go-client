/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the PingFederateRuntimeApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingFederateRuntimeApplication{}

// PingFederateRuntimeApplication Configuration required to help define application data to handle PingFederate as both a token provider and a proxied application.
type PingFederateRuntimeApplication struct {
	// The base path of the PingFederate runtime application. Default value is '/'.
	ContextRoot *string `json:"contextRoot,omitempty"`
	// The ID of the primary virtual host to use for front channel requests to the PA proxied PingFederate runtime application. This virtual host will be used for the default OpenID Connect Issuer when an application specific issuer is not configured.
	PrimaryVirtualHostId int32 `json:"primaryVirtualHostId"`
	// Additional virtual host IDs that can be used to proxy the PingFederate runtime application.
	AdditionalVirtualHostIds []int32 `json:"additionalVirtualHostIds,omitempty"`
	// A List of PolicyItems associated with the PingFederate runtime application.
	Policy []PolicyItem `json:"policy,omitempty"`
	// The header names to contain PEM-encoded client certificates. The list position correlates to the index in the client certificate chain. For example, the first element always maps to the leaf certificate.
	ClientCertHeaderNames []string `json:"clientCertHeaderNames,omitempty"`
	// True if the context root is case sensitive.
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
}

// NewPingFederateRuntimeApplication instantiates a new PingFederateRuntimeApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingFederateRuntimeApplication(primaryVirtualHostId int32) *PingFederateRuntimeApplication {
	this := PingFederateRuntimeApplication{}
	this.PrimaryVirtualHostId = primaryVirtualHostId
	return &this
}

// NewPingFederateRuntimeApplicationWithDefaults instantiates a new PingFederateRuntimeApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingFederateRuntimeApplicationWithDefaults() *PingFederateRuntimeApplication {
	this := PingFederateRuntimeApplication{}
	return &this
}

// GetContextRoot returns the ContextRoot field value if set, zero value otherwise.
func (o *PingFederateRuntimeApplication) GetContextRoot() string {
	if o == nil || IsNil(o.ContextRoot) {
		var ret string
		return ret
	}
	return *o.ContextRoot
}

// GetContextRootOk returns a tuple with the ContextRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntimeApplication) GetContextRootOk() (*string, bool) {
	if o == nil || IsNil(o.ContextRoot) {
		return nil, false
	}
	return o.ContextRoot, true
}

// HasContextRoot returns a boolean if a field has been set.
func (o *PingFederateRuntimeApplication) HasContextRoot() bool {
	if o != nil && !IsNil(o.ContextRoot) {
		return true
	}

	return false
}

// SetContextRoot gets a reference to the given string and assigns it to the ContextRoot field.
func (o *PingFederateRuntimeApplication) SetContextRoot(v string) {
	o.ContextRoot = &v
}

// GetPrimaryVirtualHostId returns the PrimaryVirtualHostId field value
func (o *PingFederateRuntimeApplication) GetPrimaryVirtualHostId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrimaryVirtualHostId
}

// GetPrimaryVirtualHostIdOk returns a tuple with the PrimaryVirtualHostId field value
// and a boolean to check if the value has been set.
func (o *PingFederateRuntimeApplication) GetPrimaryVirtualHostIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryVirtualHostId, true
}

// SetPrimaryVirtualHostId sets field value
func (o *PingFederateRuntimeApplication) SetPrimaryVirtualHostId(v int32) {
	o.PrimaryVirtualHostId = v
}

// GetAdditionalVirtualHostIds returns the AdditionalVirtualHostIds field value if set, zero value otherwise.
func (o *PingFederateRuntimeApplication) GetAdditionalVirtualHostIds() []int32 {
	if o == nil || IsNil(o.AdditionalVirtualHostIds) {
		var ret []int32
		return ret
	}
	return o.AdditionalVirtualHostIds
}

// GetAdditionalVirtualHostIdsOk returns a tuple with the AdditionalVirtualHostIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntimeApplication) GetAdditionalVirtualHostIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.AdditionalVirtualHostIds) {
		return nil, false
	}
	return o.AdditionalVirtualHostIds, true
}

// HasAdditionalVirtualHostIds returns a boolean if a field has been set.
func (o *PingFederateRuntimeApplication) HasAdditionalVirtualHostIds() bool {
	if o != nil && !IsNil(o.AdditionalVirtualHostIds) {
		return true
	}

	return false
}

// SetAdditionalVirtualHostIds gets a reference to the given []int32 and assigns it to the AdditionalVirtualHostIds field.
func (o *PingFederateRuntimeApplication) SetAdditionalVirtualHostIds(v []int32) {
	o.AdditionalVirtualHostIds = v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *PingFederateRuntimeApplication) GetPolicy() []PolicyItem {
	if o == nil || IsNil(o.Policy) {
		var ret []PolicyItem
		return ret
	}
	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntimeApplication) GetPolicyOk() ([]PolicyItem, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *PingFederateRuntimeApplication) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given []PolicyItem and assigns it to the Policy field.
func (o *PingFederateRuntimeApplication) SetPolicy(v []PolicyItem) {
	o.Policy = v
}

// GetClientCertHeaderNames returns the ClientCertHeaderNames field value if set, zero value otherwise.
func (o *PingFederateRuntimeApplication) GetClientCertHeaderNames() []string {
	if o == nil || IsNil(o.ClientCertHeaderNames) {
		var ret []string
		return ret
	}
	return o.ClientCertHeaderNames
}

// GetClientCertHeaderNamesOk returns a tuple with the ClientCertHeaderNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntimeApplication) GetClientCertHeaderNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ClientCertHeaderNames) {
		return nil, false
	}
	return o.ClientCertHeaderNames, true
}

// HasClientCertHeaderNames returns a boolean if a field has been set.
func (o *PingFederateRuntimeApplication) HasClientCertHeaderNames() bool {
	if o != nil && !IsNil(o.ClientCertHeaderNames) {
		return true
	}

	return false
}

// SetClientCertHeaderNames gets a reference to the given []string and assigns it to the ClientCertHeaderNames field.
func (o *PingFederateRuntimeApplication) SetClientCertHeaderNames(v []string) {
	o.ClientCertHeaderNames = v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *PingFederateRuntimeApplication) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingFederateRuntimeApplication) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *PingFederateRuntimeApplication) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *PingFederateRuntimeApplication) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

func (o PingFederateRuntimeApplication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingFederateRuntimeApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextRoot) {
		toSerialize["contextRoot"] = o.ContextRoot
	}
	toSerialize["primaryVirtualHostId"] = o.PrimaryVirtualHostId
	if !IsNil(o.AdditionalVirtualHostIds) {
		toSerialize["additionalVirtualHostIds"] = o.AdditionalVirtualHostIds
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.ClientCertHeaderNames) {
		toSerialize["clientCertHeaderNames"] = o.ClientCertHeaderNames
	}
	if !IsNil(o.CaseSensitive) {
		toSerialize["caseSensitive"] = o.CaseSensitive
	}
	return toSerialize, nil
}

type NullablePingFederateRuntimeApplication struct {
	value *PingFederateRuntimeApplication
	isSet bool
}

func (v NullablePingFederateRuntimeApplication) Get() *PingFederateRuntimeApplication {
	return v.value
}

func (v *NullablePingFederateRuntimeApplication) Set(val *PingFederateRuntimeApplication) {
	v.value = val
	v.isSet = true
}

func (v NullablePingFederateRuntimeApplication) IsSet() bool {
	return v.isSet
}

func (v *NullablePingFederateRuntimeApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingFederateRuntimeApplication(val *PingFederateRuntimeApplication) *NullablePingFederateRuntimeApplication {
	return &NullablePingFederateRuntimeApplication{value: val, isSet: true}
}

func (v NullablePingFederateRuntimeApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingFederateRuntimeApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
