/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AdminConfiguration An admin configuration.
type AdminConfiguration struct {
	// The primary host and port of the administrative console.
	HostPort string `json:"hostPort"`
	// The ID of the proxy to use for HTTP requests or zero if none.
	HttpProxyId *int32 `json:"httpProxyId,omitempty"`
	// The ID of the proxy to use for HTTPS requests or zero if none.
	HttpsProxyId *int32 `json:"httpsProxyId,omitempty"`
}

// NewAdminConfiguration instantiates a new AdminConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConfiguration(hostPort string) *AdminConfiguration {
	this := AdminConfiguration{}
	this.HostPort = hostPort
	return &this
}

// NewAdminConfigurationWithDefaults instantiates a new AdminConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConfigurationWithDefaults() *AdminConfiguration {
	this := AdminConfiguration{}
	return &this
}

// GetHostPort returns the HostPort field value
func (o *AdminConfiguration) GetHostPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetHostPortOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HostPort, true
}

// SetHostPort sets field value
func (o *AdminConfiguration) SetHostPort(v string) {
	o.HostPort = v
}

// GetHttpProxyId returns the HttpProxyId field value if set, zero value otherwise.
func (o *AdminConfiguration) GetHttpProxyId() int32 {
	if o == nil || isNil(o.HttpProxyId) {
		var ret int32
		return ret
	}
	return *o.HttpProxyId
}

// GetHttpProxyIdOk returns a tuple with the HttpProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetHttpProxyIdOk() (*int32, bool) {
	if o == nil || isNil(o.HttpProxyId) {
    return nil, false
	}
	return o.HttpProxyId, true
}

// HasHttpProxyId returns a boolean if a field has been set.
func (o *AdminConfiguration) HasHttpProxyId() bool {
	if o != nil && !isNil(o.HttpProxyId) {
		return true
	}

	return false
}

// SetHttpProxyId gets a reference to the given int32 and assigns it to the HttpProxyId field.
func (o *AdminConfiguration) SetHttpProxyId(v int32) {
	o.HttpProxyId = &v
}

// GetHttpsProxyId returns the HttpsProxyId field value if set, zero value otherwise.
func (o *AdminConfiguration) GetHttpsProxyId() int32 {
	if o == nil || isNil(o.HttpsProxyId) {
		var ret int32
		return ret
	}
	return *o.HttpsProxyId
}

// GetHttpsProxyIdOk returns a tuple with the HttpsProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetHttpsProxyIdOk() (*int32, bool) {
	if o == nil || isNil(o.HttpsProxyId) {
    return nil, false
	}
	return o.HttpsProxyId, true
}

// HasHttpsProxyId returns a boolean if a field has been set.
func (o *AdminConfiguration) HasHttpsProxyId() bool {
	if o != nil && !isNil(o.HttpsProxyId) {
		return true
	}

	return false
}

// SetHttpsProxyId gets a reference to the given int32 and assigns it to the HttpsProxyId field.
func (o *AdminConfiguration) SetHttpsProxyId(v int32) {
	o.HttpsProxyId = &v
}

func (o AdminConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostPort"] = o.HostPort
	}
	if !isNil(o.HttpProxyId) {
		toSerialize["httpProxyId"] = o.HttpProxyId
	}
	if !isNil(o.HttpsProxyId) {
		toSerialize["httpsProxyId"] = o.HttpsProxyId
	}
	return json.Marshal(toSerialize)
}

type NullableAdminConfiguration struct {
	value *AdminConfiguration
	isSet bool
}

func (v NullableAdminConfiguration) Get() *AdminConfiguration {
	return v.value
}

func (v *NullableAdminConfiguration) Set(val *AdminConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConfiguration(val *AdminConfiguration) *NullableAdminConfiguration {
	return &NullableAdminConfiguration{value: val, isSet: true}
}

func (v NullableAdminConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


