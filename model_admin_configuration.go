/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AdminConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminConfiguration{}

// AdminConfiguration An admin configuration.
type AdminConfiguration struct {
	// The primary host and port of the administrative console.
	HostPort string `json:"hostPort"`
	// The ID of the proxy to use for HTTP requests or zero if none.
	HttpProxyId *int64 `json:"httpProxyId,omitempty"`
	// The ID of the proxy to use for HTTPS requests or zero if none.
	HttpsProxyId *int64 `json:"httpsProxyId,omitempty"`
	// The number of minutes since the last communication from an engine after which the engine will be deleted. Misconfiguration of this value when set less than Engine Polling Delay or a loss of connection in the admin node may result in errant engine deletions.
	StaleEngineTimeout *int64 `json:"staleEngineTimeout,omitempty"`
	// Indicates whether the Stale Engine Timeout is enabled and automatic engine pruning will occur.
	StaleEngineTimeoutEnabled *bool `json:"staleEngineTimeoutEnabled,omitempty"`
}

// NewAdminConfiguration instantiates a new AdminConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConfiguration(hostPort string) *AdminConfiguration {
	this := AdminConfiguration{}
	this.HostPort = hostPort
	return &this
}

// NewAdminConfigurationWithDefaults instantiates a new AdminConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConfigurationWithDefaults() *AdminConfiguration {
	this := AdminConfiguration{}
	return &this
}

// GetHostPort returns the HostPort field value
func (o *AdminConfiguration) GetHostPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetHostPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostPort, true
}

// SetHostPort sets field value
func (o *AdminConfiguration) SetHostPort(v string) {
	o.HostPort = v
}

// GetHttpProxyId returns the HttpProxyId field value if set, zero value otherwise.
func (o *AdminConfiguration) GetHttpProxyId() int64 {
	if o == nil || IsNil(o.HttpProxyId) {
		var ret int64
		return ret
	}
	return *o.HttpProxyId
}

// GetHttpProxyIdOk returns a tuple with the HttpProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetHttpProxyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.HttpProxyId) {
		return nil, false
	}
	return o.HttpProxyId, true
}

// HasHttpProxyId returns a boolean if a field has been set.
func (o *AdminConfiguration) HasHttpProxyId() bool {
	if o != nil && !IsNil(o.HttpProxyId) {
		return true
	}

	return false
}

// SetHttpProxyId gets a reference to the given int64 and assigns it to the HttpProxyId field.
func (o *AdminConfiguration) SetHttpProxyId(v int64) {
	o.HttpProxyId = &v
}

// GetHttpsProxyId returns the HttpsProxyId field value if set, zero value otherwise.
func (o *AdminConfiguration) GetHttpsProxyId() int64 {
	if o == nil || IsNil(o.HttpsProxyId) {
		var ret int64
		return ret
	}
	return *o.HttpsProxyId
}

// GetHttpsProxyIdOk returns a tuple with the HttpsProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetHttpsProxyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.HttpsProxyId) {
		return nil, false
	}
	return o.HttpsProxyId, true
}

// HasHttpsProxyId returns a boolean if a field has been set.
func (o *AdminConfiguration) HasHttpsProxyId() bool {
	if o != nil && !IsNil(o.HttpsProxyId) {
		return true
	}

	return false
}

// SetHttpsProxyId gets a reference to the given int64 and assigns it to the HttpsProxyId field.
func (o *AdminConfiguration) SetHttpsProxyId(v int64) {
	o.HttpsProxyId = &v
}

// GetStaleEngineTimeout returns the StaleEngineTimeout field value if set, zero value otherwise.
func (o *AdminConfiguration) GetStaleEngineTimeout() int64 {
	if o == nil || IsNil(o.StaleEngineTimeout) {
		var ret int64
		return ret
	}
	return *o.StaleEngineTimeout
}

// GetStaleEngineTimeoutOk returns a tuple with the StaleEngineTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetStaleEngineTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.StaleEngineTimeout) {
		return nil, false
	}
	return o.StaleEngineTimeout, true
}

// HasStaleEngineTimeout returns a boolean if a field has been set.
func (o *AdminConfiguration) HasStaleEngineTimeout() bool {
	if o != nil && !IsNil(o.StaleEngineTimeout) {
		return true
	}

	return false
}

// SetStaleEngineTimeout gets a reference to the given int64 and assigns it to the StaleEngineTimeout field.
func (o *AdminConfiguration) SetStaleEngineTimeout(v int64) {
	o.StaleEngineTimeout = &v
}

// GetStaleEngineTimeoutEnabled returns the StaleEngineTimeoutEnabled field value if set, zero value otherwise.
func (o *AdminConfiguration) GetStaleEngineTimeoutEnabled() bool {
	if o == nil || IsNil(o.StaleEngineTimeoutEnabled) {
		var ret bool
		return ret
	}
	return *o.StaleEngineTimeoutEnabled
}

// GetStaleEngineTimeoutEnabledOk returns a tuple with the StaleEngineTimeoutEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConfiguration) GetStaleEngineTimeoutEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.StaleEngineTimeoutEnabled) {
		return nil, false
	}
	return o.StaleEngineTimeoutEnabled, true
}

// HasStaleEngineTimeoutEnabled returns a boolean if a field has been set.
func (o *AdminConfiguration) HasStaleEngineTimeoutEnabled() bool {
	if o != nil && !IsNil(o.StaleEngineTimeoutEnabled) {
		return true
	}

	return false
}

// SetStaleEngineTimeoutEnabled gets a reference to the given bool and assigns it to the StaleEngineTimeoutEnabled field.
func (o *AdminConfiguration) SetStaleEngineTimeoutEnabled(v bool) {
	o.StaleEngineTimeoutEnabled = &v
}

func (o AdminConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostPort"] = o.HostPort
	if !IsNil(o.HttpProxyId) {
		toSerialize["httpProxyId"] = o.HttpProxyId
	}
	if !IsNil(o.HttpsProxyId) {
		toSerialize["httpsProxyId"] = o.HttpsProxyId
	}
	if !IsNil(o.StaleEngineTimeout) {
		toSerialize["staleEngineTimeout"] = o.StaleEngineTimeout
	}
	if !IsNil(o.StaleEngineTimeoutEnabled) {
		toSerialize["staleEngineTimeoutEnabled"] = o.StaleEngineTimeoutEnabled
	}
	return toSerialize, nil
}

type NullableAdminConfiguration struct {
	value *AdminConfiguration
	isSet bool
}

func (v NullableAdminConfiguration) Get() *AdminConfiguration {
	return v.value
}

func (v *NullableAdminConfiguration) Set(val *AdminConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConfiguration(val *AdminConfiguration) *NullableAdminConfiguration {
	return &NullableAdminConfiguration{value: val, isSet: true}
}

func (v NullableAdminConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
