/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigurationField Details for configuration in the administrator console.
type ConfigurationField struct {
	// The name of the configuration field.
	Name string `json:"name"`
	// The label of the configuration field.
	Label string `json:"label"`
	Type ConfigurationType `json:"type"`
	// Indicates that the configuration field is an advanced field or not.
	Advanced bool `json:"advanced"`
	// Indicates that the configuration field value is required or not.
	Required bool `json:"required"`
	Help Help `json:"help"`
	// The list of configuration fields that the current configuration field is the parent of.
	Fields []ConfigurationField `json:"fields"`
	// The available options for the select based configuration fields.
	Options []ConfigurationOption `json:"options"`
	ParentField ConfigurationParentField `json:"parentField"`
	// The name of group radio buttons that cooperate in a single selection.
	ButtonGroup string `json:"buttonGroup"`
	// Indicates that a radio button is able to be deselected.
	Deselectable bool `json:"deselectable"`
	// The default value of the configuration field.
	Default *string `json:"default,omitempty"`
}

// NewConfigurationField instantiates a new ConfigurationField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationField(name string, label string, type_ ConfigurationType, advanced bool, required bool, help Help, fields []ConfigurationField, options []ConfigurationOption, parentField ConfigurationParentField, buttonGroup string, deselectable bool) *ConfigurationField {
	this := ConfigurationField{}
	this.Name = name
	this.Label = label
	this.Type = type_
	this.Advanced = advanced
	this.Required = required
	this.Help = help
	this.Fields = fields
	this.Options = options
	this.ParentField = parentField
	this.ButtonGroup = buttonGroup
	this.Deselectable = deselectable
	return &this
}

// NewConfigurationFieldWithDefaults instantiates a new ConfigurationField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationFieldWithDefaults() *ConfigurationField {
	this := ConfigurationField{}
	return &this
}

// GetName returns the Name field value
func (o *ConfigurationField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConfigurationField) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value
func (o *ConfigurationField) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetLabelOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ConfigurationField) SetLabel(v string) {
	o.Label = v
}

// GetType returns the Type field value
func (o *ConfigurationField) GetType() ConfigurationType {
	if o == nil {
		var ret ConfigurationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetTypeOk() (*ConfigurationType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConfigurationField) SetType(v ConfigurationType) {
	o.Type = v
}

// GetAdvanced returns the Advanced field value
func (o *ConfigurationField) GetAdvanced() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Advanced
}

// GetAdvancedOk returns a tuple with the Advanced field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetAdvancedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Advanced, true
}

// SetAdvanced sets field value
func (o *ConfigurationField) SetAdvanced(v bool) {
	o.Advanced = v
}

// GetRequired returns the Required field value
func (o *ConfigurationField) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetRequiredOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *ConfigurationField) SetRequired(v bool) {
	o.Required = v
}

// GetHelp returns the Help field value
func (o *ConfigurationField) GetHelp() Help {
	if o == nil {
		var ret Help
		return ret
	}

	return o.Help
}

// GetHelpOk returns a tuple with the Help field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetHelpOk() (*Help, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Help, true
}

// SetHelp sets field value
func (o *ConfigurationField) SetHelp(v Help) {
	o.Help = v
}

// GetFields returns the Fields field value
func (o *ConfigurationField) GetFields() []ConfigurationField {
	if o == nil {
		var ret []ConfigurationField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetFieldsOk() ([]ConfigurationField, bool) {
	if o == nil {
    return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *ConfigurationField) SetFields(v []ConfigurationField) {
	o.Fields = v
}

// GetOptions returns the Options field value
func (o *ConfigurationField) GetOptions() []ConfigurationOption {
	if o == nil {
		var ret []ConfigurationOption
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetOptionsOk() ([]ConfigurationOption, bool) {
	if o == nil {
    return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *ConfigurationField) SetOptions(v []ConfigurationOption) {
	o.Options = v
}

// GetParentField returns the ParentField field value
func (o *ConfigurationField) GetParentField() ConfigurationParentField {
	if o == nil {
		var ret ConfigurationParentField
		return ret
	}

	return o.ParentField
}

// GetParentFieldOk returns a tuple with the ParentField field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetParentFieldOk() (*ConfigurationParentField, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ParentField, true
}

// SetParentField sets field value
func (o *ConfigurationField) SetParentField(v ConfigurationParentField) {
	o.ParentField = v
}

// GetButtonGroup returns the ButtonGroup field value
func (o *ConfigurationField) GetButtonGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ButtonGroup
}

// GetButtonGroupOk returns a tuple with the ButtonGroup field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetButtonGroupOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ButtonGroup, true
}

// SetButtonGroup sets field value
func (o *ConfigurationField) SetButtonGroup(v string) {
	o.ButtonGroup = v
}

// GetDeselectable returns the Deselectable field value
func (o *ConfigurationField) GetDeselectable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deselectable
}

// GetDeselectableOk returns a tuple with the Deselectable field value
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetDeselectableOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Deselectable, true
}

// SetDeselectable sets field value
func (o *ConfigurationField) SetDeselectable(v bool) {
	o.Deselectable = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ConfigurationField) GetDefault() string {
	if o == nil || isNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationField) GetDefaultOk() (*string, bool) {
	if o == nil || isNil(o.Default) {
    return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ConfigurationField) HasDefault() bool {
	if o != nil && !isNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *ConfigurationField) SetDefault(v string) {
	o.Default = &v
}

func (o ConfigurationField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["advanced"] = o.Advanced
	}
	if true {
		toSerialize["required"] = o.Required
	}
	if true {
		toSerialize["help"] = o.Help
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	if true {
		toSerialize["options"] = o.Options
	}
	if true {
		toSerialize["parentField"] = o.ParentField
	}
	if true {
		toSerialize["buttonGroup"] = o.ButtonGroup
	}
	if true {
		toSerialize["deselectable"] = o.Deselectable
	}
	if !isNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationField struct {
	value *ConfigurationField
	isSet bool
}

func (v NullableConfigurationField) Get() *ConfigurationField {
	return v.value
}

func (v *NullableConfigurationField) Set(val *ConfigurationField) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationField) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationField(val *ConfigurationField) *NullableConfigurationField {
	return &NullableConfigurationField{value: val, isSet: true}
}

func (v NullableConfigurationField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


