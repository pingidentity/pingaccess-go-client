/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AdminWebSessionOidcConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminWebSessionOidcConfiguration{}

// AdminWebSessionOidcConfiguration An admin web session OIDC configuration.
type AdminWebSessionOidcConfiguration struct {
	EnablePushAuthorization *bool `json:"enablePushAuthorization,omitempty"`
	// Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing.
	ValidateSessionIsAlive *bool `json:"validateSessionIsAlive,omitempty"`
	// Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider.
	SendRequestedUrlToProvider *bool `json:"sendRequestedUrlToProvider,omitempty"`
	// Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled.
	RefreshUserInfoClaimsInterval *int64 `json:"refreshUserInfoClaimsInterval,omitempty"`
	ProvideAuthenticationFeedback *bool  `json:"provideAuthenticationFeedback,omitempty"`
	// Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is encoded and stored in the session cookie.
	CacheUserAttributes *bool `json:"cacheUserAttributes,omitempty"`
	// Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions.
	EnableRefreshUser *bool    `json:"enableRefreshUser,omitempty"`
	PromptParameter   []string `json:"promptParameter,omitempty"`
	// The list of scopes. The openid scope is implied and does not need to be specified in this list.
	Scopes            []string               `json:"scopes,omitempty"`
	OidcLoginType     *OidcLoginType         `json:"oidcLoginType,omitempty"`
	PkceChallengeType *PkceChallengeType     `json:"pkceChallengeType,omitempty"`
	ClientCredentials OAuthClientCredentials `json:"clientCredentials"`
	// Specify the number of seconds to cache PingFederate Session State information.
	PfsessionStateCacheInSeconds *int64 `json:"pfsessionStateCacheInSeconds,omitempty"`
}

// NewAdminWebSessionOidcConfiguration instantiates a new AdminWebSessionOidcConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminWebSessionOidcConfiguration(clientCredentials OAuthClientCredentials) *AdminWebSessionOidcConfiguration {
	this := AdminWebSessionOidcConfiguration{}
	this.ClientCredentials = clientCredentials
	return &this
}

// NewAdminWebSessionOidcConfigurationWithDefaults instantiates a new AdminWebSessionOidcConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminWebSessionOidcConfigurationWithDefaults() *AdminWebSessionOidcConfiguration {
	this := AdminWebSessionOidcConfiguration{}
	return &this
}

// GetEnablePushAuthorization returns the EnablePushAuthorization field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetEnablePushAuthorization() bool {
	if o == nil || IsNil(o.EnablePushAuthorization) {
		var ret bool
		return ret
	}
	return *o.EnablePushAuthorization
}

// GetEnablePushAuthorizationOk returns a tuple with the EnablePushAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetEnablePushAuthorizationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePushAuthorization) {
		return nil, false
	}
	return o.EnablePushAuthorization, true
}

// HasEnablePushAuthorization returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasEnablePushAuthorization() bool {
	if o != nil && !IsNil(o.EnablePushAuthorization) {
		return true
	}

	return false
}

// SetEnablePushAuthorization gets a reference to the given bool and assigns it to the EnablePushAuthorization field.
func (o *AdminWebSessionOidcConfiguration) SetEnablePushAuthorization(v bool) {
	o.EnablePushAuthorization = &v
}

// GetValidateSessionIsAlive returns the ValidateSessionIsAlive field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetValidateSessionIsAlive() bool {
	if o == nil || IsNil(o.ValidateSessionIsAlive) {
		var ret bool
		return ret
	}
	return *o.ValidateSessionIsAlive
}

// GetValidateSessionIsAliveOk returns a tuple with the ValidateSessionIsAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetValidateSessionIsAliveOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateSessionIsAlive) {
		return nil, false
	}
	return o.ValidateSessionIsAlive, true
}

// HasValidateSessionIsAlive returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasValidateSessionIsAlive() bool {
	if o != nil && !IsNil(o.ValidateSessionIsAlive) {
		return true
	}

	return false
}

// SetValidateSessionIsAlive gets a reference to the given bool and assigns it to the ValidateSessionIsAlive field.
func (o *AdminWebSessionOidcConfiguration) SetValidateSessionIsAlive(v bool) {
	o.ValidateSessionIsAlive = &v
}

// GetSendRequestedUrlToProvider returns the SendRequestedUrlToProvider field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetSendRequestedUrlToProvider() bool {
	if o == nil || IsNil(o.SendRequestedUrlToProvider) {
		var ret bool
		return ret
	}
	return *o.SendRequestedUrlToProvider
}

// GetSendRequestedUrlToProviderOk returns a tuple with the SendRequestedUrlToProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetSendRequestedUrlToProviderOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRequestedUrlToProvider) {
		return nil, false
	}
	return o.SendRequestedUrlToProvider, true
}

// HasSendRequestedUrlToProvider returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasSendRequestedUrlToProvider() bool {
	if o != nil && !IsNil(o.SendRequestedUrlToProvider) {
		return true
	}

	return false
}

// SetSendRequestedUrlToProvider gets a reference to the given bool and assigns it to the SendRequestedUrlToProvider field.
func (o *AdminWebSessionOidcConfiguration) SetSendRequestedUrlToProvider(v bool) {
	o.SendRequestedUrlToProvider = &v
}

// GetRefreshUserInfoClaimsInterval returns the RefreshUserInfoClaimsInterval field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetRefreshUserInfoClaimsInterval() int64 {
	if o == nil || IsNil(o.RefreshUserInfoClaimsInterval) {
		var ret int64
		return ret
	}
	return *o.RefreshUserInfoClaimsInterval
}

// GetRefreshUserInfoClaimsIntervalOk returns a tuple with the RefreshUserInfoClaimsInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetRefreshUserInfoClaimsIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.RefreshUserInfoClaimsInterval) {
		return nil, false
	}
	return o.RefreshUserInfoClaimsInterval, true
}

// HasRefreshUserInfoClaimsInterval returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasRefreshUserInfoClaimsInterval() bool {
	if o != nil && !IsNil(o.RefreshUserInfoClaimsInterval) {
		return true
	}

	return false
}

// SetRefreshUserInfoClaimsInterval gets a reference to the given int64 and assigns it to the RefreshUserInfoClaimsInterval field.
func (o *AdminWebSessionOidcConfiguration) SetRefreshUserInfoClaimsInterval(v int64) {
	o.RefreshUserInfoClaimsInterval = &v
}

// GetProvideAuthenticationFeedback returns the ProvideAuthenticationFeedback field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetProvideAuthenticationFeedback() bool {
	if o == nil || IsNil(o.ProvideAuthenticationFeedback) {
		var ret bool
		return ret
	}
	return *o.ProvideAuthenticationFeedback
}

// GetProvideAuthenticationFeedbackOk returns a tuple with the ProvideAuthenticationFeedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetProvideAuthenticationFeedbackOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvideAuthenticationFeedback) {
		return nil, false
	}
	return o.ProvideAuthenticationFeedback, true
}

// HasProvideAuthenticationFeedback returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasProvideAuthenticationFeedback() bool {
	if o != nil && !IsNil(o.ProvideAuthenticationFeedback) {
		return true
	}

	return false
}

// SetProvideAuthenticationFeedback gets a reference to the given bool and assigns it to the ProvideAuthenticationFeedback field.
func (o *AdminWebSessionOidcConfiguration) SetProvideAuthenticationFeedback(v bool) {
	o.ProvideAuthenticationFeedback = &v
}

// GetCacheUserAttributes returns the CacheUserAttributes field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetCacheUserAttributes() bool {
	if o == nil || IsNil(o.CacheUserAttributes) {
		var ret bool
		return ret
	}
	return *o.CacheUserAttributes
}

// GetCacheUserAttributesOk returns a tuple with the CacheUserAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetCacheUserAttributesOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheUserAttributes) {
		return nil, false
	}
	return o.CacheUserAttributes, true
}

// HasCacheUserAttributes returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasCacheUserAttributes() bool {
	if o != nil && !IsNil(o.CacheUserAttributes) {
		return true
	}

	return false
}

// SetCacheUserAttributes gets a reference to the given bool and assigns it to the CacheUserAttributes field.
func (o *AdminWebSessionOidcConfiguration) SetCacheUserAttributes(v bool) {
	o.CacheUserAttributes = &v
}

// GetEnableRefreshUser returns the EnableRefreshUser field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetEnableRefreshUser() bool {
	if o == nil || IsNil(o.EnableRefreshUser) {
		var ret bool
		return ret
	}
	return *o.EnableRefreshUser
}

// GetEnableRefreshUserOk returns a tuple with the EnableRefreshUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetEnableRefreshUserOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRefreshUser) {
		return nil, false
	}
	return o.EnableRefreshUser, true
}

// HasEnableRefreshUser returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasEnableRefreshUser() bool {
	if o != nil && !IsNil(o.EnableRefreshUser) {
		return true
	}

	return false
}

// SetEnableRefreshUser gets a reference to the given bool and assigns it to the EnableRefreshUser field.
func (o *AdminWebSessionOidcConfiguration) SetEnableRefreshUser(v bool) {
	o.EnableRefreshUser = &v
}

// GetPromptParameter returns the PromptParameter field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetPromptParameter() []string {
	if o == nil || IsNil(o.PromptParameter) {
		var ret []string
		return ret
	}
	return o.PromptParameter
}

// GetPromptParameterOk returns a tuple with the PromptParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetPromptParameterOk() ([]string, bool) {
	if o == nil || IsNil(o.PromptParameter) {
		return nil, false
	}
	return o.PromptParameter, true
}

// HasPromptParameter returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasPromptParameter() bool {
	if o != nil && !IsNil(o.PromptParameter) {
		return true
	}

	return false
}

// SetPromptParameter gets a reference to the given []string and assigns it to the PromptParameter field.
func (o *AdminWebSessionOidcConfiguration) SetPromptParameter(v []string) {
	o.PromptParameter = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *AdminWebSessionOidcConfiguration) SetScopes(v []string) {
	o.Scopes = v
}

// GetOidcLoginType returns the OidcLoginType field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetOidcLoginType() OidcLoginType {
	if o == nil || IsNil(o.OidcLoginType) {
		var ret OidcLoginType
		return ret
	}
	return *o.OidcLoginType
}

// GetOidcLoginTypeOk returns a tuple with the OidcLoginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetOidcLoginTypeOk() (*OidcLoginType, bool) {
	if o == nil || IsNil(o.OidcLoginType) {
		return nil, false
	}
	return o.OidcLoginType, true
}

// HasOidcLoginType returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasOidcLoginType() bool {
	if o != nil && !IsNil(o.OidcLoginType) {
		return true
	}

	return false
}

// SetOidcLoginType gets a reference to the given OidcLoginType and assigns it to the OidcLoginType field.
func (o *AdminWebSessionOidcConfiguration) SetOidcLoginType(v OidcLoginType) {
	o.OidcLoginType = &v
}

// GetPkceChallengeType returns the PkceChallengeType field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetPkceChallengeType() PkceChallengeType {
	if o == nil || IsNil(o.PkceChallengeType) {
		var ret PkceChallengeType
		return ret
	}
	return *o.PkceChallengeType
}

// GetPkceChallengeTypeOk returns a tuple with the PkceChallengeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetPkceChallengeTypeOk() (*PkceChallengeType, bool) {
	if o == nil || IsNil(o.PkceChallengeType) {
		return nil, false
	}
	return o.PkceChallengeType, true
}

// HasPkceChallengeType returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasPkceChallengeType() bool {
	if o != nil && !IsNil(o.PkceChallengeType) {
		return true
	}

	return false
}

// SetPkceChallengeType gets a reference to the given PkceChallengeType and assigns it to the PkceChallengeType field.
func (o *AdminWebSessionOidcConfiguration) SetPkceChallengeType(v PkceChallengeType) {
	o.PkceChallengeType = &v
}

// GetClientCredentials returns the ClientCredentials field value
func (o *AdminWebSessionOidcConfiguration) GetClientCredentials() OAuthClientCredentials {
	if o == nil {
		var ret OAuthClientCredentials
		return ret
	}

	return o.ClientCredentials
}

// GetClientCredentialsOk returns a tuple with the ClientCredentials field value
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetClientCredentialsOk() (*OAuthClientCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientCredentials, true
}

// SetClientCredentials sets field value
func (o *AdminWebSessionOidcConfiguration) SetClientCredentials(v OAuthClientCredentials) {
	o.ClientCredentials = v
}

// GetPfsessionStateCacheInSeconds returns the PfsessionStateCacheInSeconds field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetPfsessionStateCacheInSeconds() int64 {
	if o == nil || IsNil(o.PfsessionStateCacheInSeconds) {
		var ret int64
		return ret
	}
	return *o.PfsessionStateCacheInSeconds
}

// GetPfsessionStateCacheInSecondsOk returns a tuple with the PfsessionStateCacheInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetPfsessionStateCacheInSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.PfsessionStateCacheInSeconds) {
		return nil, false
	}
	return o.PfsessionStateCacheInSeconds, true
}

// HasPfsessionStateCacheInSeconds returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasPfsessionStateCacheInSeconds() bool {
	if o != nil && !IsNil(o.PfsessionStateCacheInSeconds) {
		return true
	}

	return false
}

// SetPfsessionStateCacheInSeconds gets a reference to the given int64 and assigns it to the PfsessionStateCacheInSeconds field.
func (o *AdminWebSessionOidcConfiguration) SetPfsessionStateCacheInSeconds(v int64) {
	o.PfsessionStateCacheInSeconds = &v
}

func (o AdminWebSessionOidcConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminWebSessionOidcConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnablePushAuthorization) {
		toSerialize["enablePushAuthorization"] = o.EnablePushAuthorization
	}
	if !IsNil(o.ValidateSessionIsAlive) {
		toSerialize["validateSessionIsAlive"] = o.ValidateSessionIsAlive
	}
	if !IsNil(o.SendRequestedUrlToProvider) {
		toSerialize["sendRequestedUrlToProvider"] = o.SendRequestedUrlToProvider
	}
	if !IsNil(o.RefreshUserInfoClaimsInterval) {
		toSerialize["refreshUserInfoClaimsInterval"] = o.RefreshUserInfoClaimsInterval
	}
	if !IsNil(o.ProvideAuthenticationFeedback) {
		toSerialize["provideAuthenticationFeedback"] = o.ProvideAuthenticationFeedback
	}
	if !IsNil(o.CacheUserAttributes) {
		toSerialize["cacheUserAttributes"] = o.CacheUserAttributes
	}
	if !IsNil(o.EnableRefreshUser) {
		toSerialize["enableRefreshUser"] = o.EnableRefreshUser
	}
	if !IsNil(o.PromptParameter) {
		toSerialize["promptParameter"] = o.PromptParameter
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.OidcLoginType) {
		toSerialize["oidcLoginType"] = o.OidcLoginType
	}
	if !IsNil(o.PkceChallengeType) {
		toSerialize["pkceChallengeType"] = o.PkceChallengeType
	}
	toSerialize["clientCredentials"] = o.ClientCredentials
	if !IsNil(o.PfsessionStateCacheInSeconds) {
		toSerialize["pfsessionStateCacheInSeconds"] = o.PfsessionStateCacheInSeconds
	}
	return toSerialize, nil
}

type NullableAdminWebSessionOidcConfiguration struct {
	value *AdminWebSessionOidcConfiguration
	isSet bool
}

func (v NullableAdminWebSessionOidcConfiguration) Get() *AdminWebSessionOidcConfiguration {
	return v.value
}

func (v *NullableAdminWebSessionOidcConfiguration) Set(val *AdminWebSessionOidcConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminWebSessionOidcConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminWebSessionOidcConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminWebSessionOidcConfiguration(val *AdminWebSessionOidcConfiguration) *NullableAdminWebSessionOidcConfiguration {
	return &NullableAdminWebSessionOidcConfiguration{value: val, isSet: true}
}

func (v NullableAdminWebSessionOidcConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminWebSessionOidcConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
