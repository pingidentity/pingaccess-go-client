/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AdminWebSessionOidcConfiguration An admin web session OIDC configuration.
type AdminWebSessionOidcConfiguration struct {
	// Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled.
	RefreshUserInfoClaimsInterval *int32 `json:"refreshUserInfoClaimsInterval,omitempty"`
	// Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider.
	SendRequestedUrlToProvider *bool `json:"sendRequestedUrlToProvider,omitempty"`
	// Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing.
	ValidateSessionIsAlive *bool `json:"validateSessionIsAlive,omitempty"`
	ClientCredentials OAuthClientCredentials `json:"clientCredentials"`
	OidcLoginType *OidcLoginType `json:"oidcLoginType,omitempty"`
	PkceChallengeType *PkceChallengeType `json:"pkceChallengeType,omitempty"`
	// Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is encoded and stored in the session cookie.
	CacheUserAttributes *bool `json:"cacheUserAttributes,omitempty"`
	// Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions.
	EnableRefreshUser *bool `json:"enableRefreshUser,omitempty"`
	// The list of scopes. The openid scope is implied and does not need to be specified in this list.
	Scopes []string `json:"scopes,omitempty"`
	// Specify the number of seconds to cache PingFederate Session State information.
	PfsessionStateCacheInSeconds *int32 `json:"pfsessionStateCacheInSeconds,omitempty"`
}

// NewAdminWebSessionOidcConfiguration instantiates a new AdminWebSessionOidcConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminWebSessionOidcConfiguration(clientCredentials OAuthClientCredentials) *AdminWebSessionOidcConfiguration {
	this := AdminWebSessionOidcConfiguration{}
	this.ClientCredentials = clientCredentials
	return &this
}

// NewAdminWebSessionOidcConfigurationWithDefaults instantiates a new AdminWebSessionOidcConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminWebSessionOidcConfigurationWithDefaults() *AdminWebSessionOidcConfiguration {
	this := AdminWebSessionOidcConfiguration{}
	return &this
}

// GetRefreshUserInfoClaimsInterval returns the RefreshUserInfoClaimsInterval field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetRefreshUserInfoClaimsInterval() int32 {
	if o == nil || isNil(o.RefreshUserInfoClaimsInterval) {
		var ret int32
		return ret
	}
	return *o.RefreshUserInfoClaimsInterval
}

// GetRefreshUserInfoClaimsIntervalOk returns a tuple with the RefreshUserInfoClaimsInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetRefreshUserInfoClaimsIntervalOk() (*int32, bool) {
	if o == nil || isNil(o.RefreshUserInfoClaimsInterval) {
    return nil, false
	}
	return o.RefreshUserInfoClaimsInterval, true
}

// HasRefreshUserInfoClaimsInterval returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasRefreshUserInfoClaimsInterval() bool {
	if o != nil && !isNil(o.RefreshUserInfoClaimsInterval) {
		return true
	}

	return false
}

// SetRefreshUserInfoClaimsInterval gets a reference to the given int32 and assigns it to the RefreshUserInfoClaimsInterval field.
func (o *AdminWebSessionOidcConfiguration) SetRefreshUserInfoClaimsInterval(v int32) {
	o.RefreshUserInfoClaimsInterval = &v
}

// GetSendRequestedUrlToProvider returns the SendRequestedUrlToProvider field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetSendRequestedUrlToProvider() bool {
	if o == nil || isNil(o.SendRequestedUrlToProvider) {
		var ret bool
		return ret
	}
	return *o.SendRequestedUrlToProvider
}

// GetSendRequestedUrlToProviderOk returns a tuple with the SendRequestedUrlToProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetSendRequestedUrlToProviderOk() (*bool, bool) {
	if o == nil || isNil(o.SendRequestedUrlToProvider) {
    return nil, false
	}
	return o.SendRequestedUrlToProvider, true
}

// HasSendRequestedUrlToProvider returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasSendRequestedUrlToProvider() bool {
	if o != nil && !isNil(o.SendRequestedUrlToProvider) {
		return true
	}

	return false
}

// SetSendRequestedUrlToProvider gets a reference to the given bool and assigns it to the SendRequestedUrlToProvider field.
func (o *AdminWebSessionOidcConfiguration) SetSendRequestedUrlToProvider(v bool) {
	o.SendRequestedUrlToProvider = &v
}

// GetValidateSessionIsAlive returns the ValidateSessionIsAlive field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetValidateSessionIsAlive() bool {
	if o == nil || isNil(o.ValidateSessionIsAlive) {
		var ret bool
		return ret
	}
	return *o.ValidateSessionIsAlive
}

// GetValidateSessionIsAliveOk returns a tuple with the ValidateSessionIsAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetValidateSessionIsAliveOk() (*bool, bool) {
	if o == nil || isNil(o.ValidateSessionIsAlive) {
    return nil, false
	}
	return o.ValidateSessionIsAlive, true
}

// HasValidateSessionIsAlive returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasValidateSessionIsAlive() bool {
	if o != nil && !isNil(o.ValidateSessionIsAlive) {
		return true
	}

	return false
}

// SetValidateSessionIsAlive gets a reference to the given bool and assigns it to the ValidateSessionIsAlive field.
func (o *AdminWebSessionOidcConfiguration) SetValidateSessionIsAlive(v bool) {
	o.ValidateSessionIsAlive = &v
}

// GetClientCredentials returns the ClientCredentials field value
func (o *AdminWebSessionOidcConfiguration) GetClientCredentials() OAuthClientCredentials {
	if o == nil {
		var ret OAuthClientCredentials
		return ret
	}

	return o.ClientCredentials
}

// GetClientCredentialsOk returns a tuple with the ClientCredentials field value
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetClientCredentialsOk() (*OAuthClientCredentials, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ClientCredentials, true
}

// SetClientCredentials sets field value
func (o *AdminWebSessionOidcConfiguration) SetClientCredentials(v OAuthClientCredentials) {
	o.ClientCredentials = v
}

// GetOidcLoginType returns the OidcLoginType field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetOidcLoginType() OidcLoginType {
	if o == nil || isNil(o.OidcLoginType) {
		var ret OidcLoginType
		return ret
	}
	return *o.OidcLoginType
}

// GetOidcLoginTypeOk returns a tuple with the OidcLoginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetOidcLoginTypeOk() (*OidcLoginType, bool) {
	if o == nil || isNil(o.OidcLoginType) {
    return nil, false
	}
	return o.OidcLoginType, true
}

// HasOidcLoginType returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasOidcLoginType() bool {
	if o != nil && !isNil(o.OidcLoginType) {
		return true
	}

	return false
}

// SetOidcLoginType gets a reference to the given OidcLoginType and assigns it to the OidcLoginType field.
func (o *AdminWebSessionOidcConfiguration) SetOidcLoginType(v OidcLoginType) {
	o.OidcLoginType = &v
}

// GetPkceChallengeType returns the PkceChallengeType field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetPkceChallengeType() PkceChallengeType {
	if o == nil || isNil(o.PkceChallengeType) {
		var ret PkceChallengeType
		return ret
	}
	return *o.PkceChallengeType
}

// GetPkceChallengeTypeOk returns a tuple with the PkceChallengeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetPkceChallengeTypeOk() (*PkceChallengeType, bool) {
	if o == nil || isNil(o.PkceChallengeType) {
    return nil, false
	}
	return o.PkceChallengeType, true
}

// HasPkceChallengeType returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasPkceChallengeType() bool {
	if o != nil && !isNil(o.PkceChallengeType) {
		return true
	}

	return false
}

// SetPkceChallengeType gets a reference to the given PkceChallengeType and assigns it to the PkceChallengeType field.
func (o *AdminWebSessionOidcConfiguration) SetPkceChallengeType(v PkceChallengeType) {
	o.PkceChallengeType = &v
}

// GetCacheUserAttributes returns the CacheUserAttributes field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetCacheUserAttributes() bool {
	if o == nil || isNil(o.CacheUserAttributes) {
		var ret bool
		return ret
	}
	return *o.CacheUserAttributes
}

// GetCacheUserAttributesOk returns a tuple with the CacheUserAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetCacheUserAttributesOk() (*bool, bool) {
	if o == nil || isNil(o.CacheUserAttributes) {
    return nil, false
	}
	return o.CacheUserAttributes, true
}

// HasCacheUserAttributes returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasCacheUserAttributes() bool {
	if o != nil && !isNil(o.CacheUserAttributes) {
		return true
	}

	return false
}

// SetCacheUserAttributes gets a reference to the given bool and assigns it to the CacheUserAttributes field.
func (o *AdminWebSessionOidcConfiguration) SetCacheUserAttributes(v bool) {
	o.CacheUserAttributes = &v
}

// GetEnableRefreshUser returns the EnableRefreshUser field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetEnableRefreshUser() bool {
	if o == nil || isNil(o.EnableRefreshUser) {
		var ret bool
		return ret
	}
	return *o.EnableRefreshUser
}

// GetEnableRefreshUserOk returns a tuple with the EnableRefreshUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetEnableRefreshUserOk() (*bool, bool) {
	if o == nil || isNil(o.EnableRefreshUser) {
    return nil, false
	}
	return o.EnableRefreshUser, true
}

// HasEnableRefreshUser returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasEnableRefreshUser() bool {
	if o != nil && !isNil(o.EnableRefreshUser) {
		return true
	}

	return false
}

// SetEnableRefreshUser gets a reference to the given bool and assigns it to the EnableRefreshUser field.
func (o *AdminWebSessionOidcConfiguration) SetEnableRefreshUser(v bool) {
	o.EnableRefreshUser = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetScopes() []string {
	if o == nil || isNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetScopesOk() ([]string, bool) {
	if o == nil || isNil(o.Scopes) {
    return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasScopes() bool {
	if o != nil && !isNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *AdminWebSessionOidcConfiguration) SetScopes(v []string) {
	o.Scopes = v
}

// GetPfsessionStateCacheInSeconds returns the PfsessionStateCacheInSeconds field value if set, zero value otherwise.
func (o *AdminWebSessionOidcConfiguration) GetPfsessionStateCacheInSeconds() int32 {
	if o == nil || isNil(o.PfsessionStateCacheInSeconds) {
		var ret int32
		return ret
	}
	return *o.PfsessionStateCacheInSeconds
}

// GetPfsessionStateCacheInSecondsOk returns a tuple with the PfsessionStateCacheInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminWebSessionOidcConfiguration) GetPfsessionStateCacheInSecondsOk() (*int32, bool) {
	if o == nil || isNil(o.PfsessionStateCacheInSeconds) {
    return nil, false
	}
	return o.PfsessionStateCacheInSeconds, true
}

// HasPfsessionStateCacheInSeconds returns a boolean if a field has been set.
func (o *AdminWebSessionOidcConfiguration) HasPfsessionStateCacheInSeconds() bool {
	if o != nil && !isNil(o.PfsessionStateCacheInSeconds) {
		return true
	}

	return false
}

// SetPfsessionStateCacheInSeconds gets a reference to the given int32 and assigns it to the PfsessionStateCacheInSeconds field.
func (o *AdminWebSessionOidcConfiguration) SetPfsessionStateCacheInSeconds(v int32) {
	o.PfsessionStateCacheInSeconds = &v
}

func (o AdminWebSessionOidcConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RefreshUserInfoClaimsInterval) {
		toSerialize["refreshUserInfoClaimsInterval"] = o.RefreshUserInfoClaimsInterval
	}
	if !isNil(o.SendRequestedUrlToProvider) {
		toSerialize["sendRequestedUrlToProvider"] = o.SendRequestedUrlToProvider
	}
	if !isNil(o.ValidateSessionIsAlive) {
		toSerialize["validateSessionIsAlive"] = o.ValidateSessionIsAlive
	}
	if true {
		toSerialize["clientCredentials"] = o.ClientCredentials
	}
	if !isNil(o.OidcLoginType) {
		toSerialize["oidcLoginType"] = o.OidcLoginType
	}
	if !isNil(o.PkceChallengeType) {
		toSerialize["pkceChallengeType"] = o.PkceChallengeType
	}
	if !isNil(o.CacheUserAttributes) {
		toSerialize["cacheUserAttributes"] = o.CacheUserAttributes
	}
	if !isNil(o.EnableRefreshUser) {
		toSerialize["enableRefreshUser"] = o.EnableRefreshUser
	}
	if !isNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !isNil(o.PfsessionStateCacheInSeconds) {
		toSerialize["pfsessionStateCacheInSeconds"] = o.PfsessionStateCacheInSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableAdminWebSessionOidcConfiguration struct {
	value *AdminWebSessionOidcConfiguration
	isSet bool
}

func (v NullableAdminWebSessionOidcConfiguration) Get() *AdminWebSessionOidcConfiguration {
	return v.value
}

func (v *NullableAdminWebSessionOidcConfiguration) Set(val *AdminWebSessionOidcConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminWebSessionOidcConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminWebSessionOidcConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminWebSessionOidcConfiguration(val *AdminWebSessionOidcConfiguration) *NullableAdminWebSessionOidcConfiguration {
	return &NullableAdminWebSessionOidcConfiguration{value: val, isSet: true}
}

func (v NullableAdminWebSessionOidcConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminWebSessionOidcConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


