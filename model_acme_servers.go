/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AcmeServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcmeServers{}

// AcmeServers A collection of ACME servers.
type AcmeServers struct {
	// An array of ACME servers.
	Items []AcmeServer `json:"items"`
}

// NewAcmeServers instantiates a new AcmeServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcmeServers(items []AcmeServer) *AcmeServers {
	this := AcmeServers{}
	this.Items = items
	return &this
}

// NewAcmeServersWithDefaults instantiates a new AcmeServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcmeServersWithDefaults() *AcmeServers {
	this := AcmeServers{}
	return &this
}

// GetItems returns the Items field value
func (o *AcmeServers) GetItems() []AcmeServer {
	if o == nil {
		var ret []AcmeServer
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *AcmeServers) GetItemsOk() ([]AcmeServer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *AcmeServers) SetItems(v []AcmeServer) {
	o.Items = v
}

func (o AcmeServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcmeServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

type NullableAcmeServers struct {
	value *AcmeServers
	isSet bool
}

func (v NullableAcmeServers) Get() *AcmeServers {
	return v.value
}

func (v *NullableAcmeServers) Set(val *AcmeServers) {
	v.value = val
	v.isSet = true
}

func (v NullableAcmeServers) IsSet() bool {
	return v.isSet
}

func (v *NullableAcmeServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcmeServers(val *AcmeServers) *NullableAcmeServers {
	return &NullableAcmeServers{value: val, isSet: true}
}

func (v NullableAcmeServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcmeServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
