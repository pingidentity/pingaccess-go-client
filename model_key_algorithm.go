/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the KeyAlgorithm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyAlgorithm{}

// KeyAlgorithm A key algorithm.
type KeyAlgorithm struct {
	// The algorithm name.
	Name string `json:"name"`
	// The list of available key sizes.
	KeySizes []int64 `json:"keySizes"`
	// The default key size value to use.
	DefaultKeySize int64 `json:"defaultKeySize"`
	// The default signature algorithm to use.
	DefaultSignatureAlgorithm string `json:"defaultSignatureAlgorithm"`
	// The list of available signature algorithms.
	SignatureAlgorithms []string `json:"signatureAlgorithms"`
}

// NewKeyAlgorithm instantiates a new KeyAlgorithm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyAlgorithm(name string, keySizes []int64, defaultKeySize int64, defaultSignatureAlgorithm string, signatureAlgorithms []string) *KeyAlgorithm {
	this := KeyAlgorithm{}
	this.Name = name
	this.KeySizes = keySizes
	this.DefaultKeySize = defaultKeySize
	this.DefaultSignatureAlgorithm = defaultSignatureAlgorithm
	this.SignatureAlgorithms = signatureAlgorithms
	return &this
}

// NewKeyAlgorithmWithDefaults instantiates a new KeyAlgorithm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyAlgorithmWithDefaults() *KeyAlgorithm {
	this := KeyAlgorithm{}
	return &this
}

// GetName returns the Name field value
func (o *KeyAlgorithm) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeyAlgorithm) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeyAlgorithm) SetName(v string) {
	o.Name = v
}

// GetKeySizes returns the KeySizes field value
func (o *KeyAlgorithm) GetKeySizes() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.KeySizes
}

// GetKeySizesOk returns a tuple with the KeySizes field value
// and a boolean to check if the value has been set.
func (o *KeyAlgorithm) GetKeySizesOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeySizes, true
}

// SetKeySizes sets field value
func (o *KeyAlgorithm) SetKeySizes(v []int64) {
	o.KeySizes = v
}

// GetDefaultKeySize returns the DefaultKeySize field value
func (o *KeyAlgorithm) GetDefaultKeySize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DefaultKeySize
}

// GetDefaultKeySizeOk returns a tuple with the DefaultKeySize field value
// and a boolean to check if the value has been set.
func (o *KeyAlgorithm) GetDefaultKeySizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultKeySize, true
}

// SetDefaultKeySize sets field value
func (o *KeyAlgorithm) SetDefaultKeySize(v int64) {
	o.DefaultKeySize = v
}

// GetDefaultSignatureAlgorithm returns the DefaultSignatureAlgorithm field value
func (o *KeyAlgorithm) GetDefaultSignatureAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultSignatureAlgorithm
}

// GetDefaultSignatureAlgorithmOk returns a tuple with the DefaultSignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *KeyAlgorithm) GetDefaultSignatureAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultSignatureAlgorithm, true
}

// SetDefaultSignatureAlgorithm sets field value
func (o *KeyAlgorithm) SetDefaultSignatureAlgorithm(v string) {
	o.DefaultSignatureAlgorithm = v
}

// GetSignatureAlgorithms returns the SignatureAlgorithms field value
func (o *KeyAlgorithm) GetSignatureAlgorithms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SignatureAlgorithms
}

// GetSignatureAlgorithmsOk returns a tuple with the SignatureAlgorithms field value
// and a boolean to check if the value has been set.
func (o *KeyAlgorithm) GetSignatureAlgorithmsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignatureAlgorithms, true
}

// SetSignatureAlgorithms sets field value
func (o *KeyAlgorithm) SetSignatureAlgorithms(v []string) {
	o.SignatureAlgorithms = v
}

func (o KeyAlgorithm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyAlgorithm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["keySizes"] = o.KeySizes
	toSerialize["defaultKeySize"] = o.DefaultKeySize
	toSerialize["defaultSignatureAlgorithm"] = o.DefaultSignatureAlgorithm
	toSerialize["signatureAlgorithms"] = o.SignatureAlgorithms
	return toSerialize, nil
}

type NullableKeyAlgorithm struct {
	value *KeyAlgorithm
	isSet bool
}

func (v NullableKeyAlgorithm) Get() *KeyAlgorithm {
	return v.value
}

func (v *NullableKeyAlgorithm) Set(val *KeyAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyAlgorithm(val *KeyAlgorithm) *NullableKeyAlgorithm {
	return &NullableKeyAlgorithm{value: val, isSet: true}
}

func (v NullableKeyAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
