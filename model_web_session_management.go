/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WebSessionManagement A web session management configuration.
type WebSessionManagement struct {
	// This field is true if key rollover is enabled. When false, PingAccess will not rollover keys at the configured interval.
	KeyRollEnabled *bool `json:"keyRollEnabled,omitempty"`
	// The interval (in hours) at which PingAccess will roll the keys. Key rollover updates keys at regular intervals to ensure the security of signed and encrypted PA tokens.
	KeyRollPeriodInHours *int64 `json:"keyRollPeriodInHours,omitempty"`
	// The issuer value to include in the PA token. PingAccess inserts this value as the iss claim within the PA Token.
	Issuer *string `json:"issuer,omitempty"`
	// The signing algorithm used when creating signed PA tokens and when verifying them from a user's browser.
	SigningAlgorithm *string `json:"signingAlgorithm,omitempty"`
	// The name for the browser cookie to contain the PA token.
	CookieName *string `json:"cookieName,omitempty"`
	// The name of the session state cookie.
	SessionStateCookieName *string `json:"sessionStateCookieName,omitempty"`
	// The number of seconds before the idle timeout is updated in the PA token.
	UpdateTokenWindowInSeconds *int64 `json:"updateTokenWindowInSeconds,omitempty"`
	// The encryption algorithm used when creating encrypted PA tokens and when verifying them from a user's browser.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty"`
	// The number of minutes that the nonce cookie is valid when multiple concurrent authentication requests are made. 0 indicates that the system default value should be used.
	NonceCookieTimeToLiveInMinutes *int32 `json:"nonceCookieTimeToLiveInMinutes,omitempty"`
}

// NewWebSessionManagement instantiates a new WebSessionManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebSessionManagement() *WebSessionManagement {
	this := WebSessionManagement{}
	return &this
}

// NewWebSessionManagementWithDefaults instantiates a new WebSessionManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebSessionManagementWithDefaults() *WebSessionManagement {
	this := WebSessionManagement{}
	return &this
}

// GetKeyRollEnabled returns the KeyRollEnabled field value if set, zero value otherwise.
func (o *WebSessionManagement) GetKeyRollEnabled() bool {
	if o == nil || isNil(o.KeyRollEnabled) {
		var ret bool
		return ret
	}
	return *o.KeyRollEnabled
}

// GetKeyRollEnabledOk returns a tuple with the KeyRollEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetKeyRollEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.KeyRollEnabled) {
    return nil, false
	}
	return o.KeyRollEnabled, true
}

// HasKeyRollEnabled returns a boolean if a field has been set.
func (o *WebSessionManagement) HasKeyRollEnabled() bool {
	if o != nil && !isNil(o.KeyRollEnabled) {
		return true
	}

	return false
}

// SetKeyRollEnabled gets a reference to the given bool and assigns it to the KeyRollEnabled field.
func (o *WebSessionManagement) SetKeyRollEnabled(v bool) {
	o.KeyRollEnabled = &v
}

// GetKeyRollPeriodInHours returns the KeyRollPeriodInHours field value if set, zero value otherwise.
func (o *WebSessionManagement) GetKeyRollPeriodInHours() int64 {
	if o == nil || isNil(o.KeyRollPeriodInHours) {
		var ret int64
		return ret
	}
	return *o.KeyRollPeriodInHours
}

// GetKeyRollPeriodInHoursOk returns a tuple with the KeyRollPeriodInHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetKeyRollPeriodInHoursOk() (*int64, bool) {
	if o == nil || isNil(o.KeyRollPeriodInHours) {
    return nil, false
	}
	return o.KeyRollPeriodInHours, true
}

// HasKeyRollPeriodInHours returns a boolean if a field has been set.
func (o *WebSessionManagement) HasKeyRollPeriodInHours() bool {
	if o != nil && !isNil(o.KeyRollPeriodInHours) {
		return true
	}

	return false
}

// SetKeyRollPeriodInHours gets a reference to the given int64 and assigns it to the KeyRollPeriodInHours field.
func (o *WebSessionManagement) SetKeyRollPeriodInHours(v int64) {
	o.KeyRollPeriodInHours = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *WebSessionManagement) GetIssuer() string {
	if o == nil || isNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetIssuerOk() (*string, bool) {
	if o == nil || isNil(o.Issuer) {
    return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *WebSessionManagement) HasIssuer() bool {
	if o != nil && !isNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *WebSessionManagement) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSigningAlgorithm returns the SigningAlgorithm field value if set, zero value otherwise.
func (o *WebSessionManagement) GetSigningAlgorithm() string {
	if o == nil || isNil(o.SigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.SigningAlgorithm
}

// GetSigningAlgorithmOk returns a tuple with the SigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetSigningAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.SigningAlgorithm) {
    return nil, false
	}
	return o.SigningAlgorithm, true
}

// HasSigningAlgorithm returns a boolean if a field has been set.
func (o *WebSessionManagement) HasSigningAlgorithm() bool {
	if o != nil && !isNil(o.SigningAlgorithm) {
		return true
	}

	return false
}

// SetSigningAlgorithm gets a reference to the given string and assigns it to the SigningAlgorithm field.
func (o *WebSessionManagement) SetSigningAlgorithm(v string) {
	o.SigningAlgorithm = &v
}

// GetCookieName returns the CookieName field value if set, zero value otherwise.
func (o *WebSessionManagement) GetCookieName() string {
	if o == nil || isNil(o.CookieName) {
		var ret string
		return ret
	}
	return *o.CookieName
}

// GetCookieNameOk returns a tuple with the CookieName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetCookieNameOk() (*string, bool) {
	if o == nil || isNil(o.CookieName) {
    return nil, false
	}
	return o.CookieName, true
}

// HasCookieName returns a boolean if a field has been set.
func (o *WebSessionManagement) HasCookieName() bool {
	if o != nil && !isNil(o.CookieName) {
		return true
	}

	return false
}

// SetCookieName gets a reference to the given string and assigns it to the CookieName field.
func (o *WebSessionManagement) SetCookieName(v string) {
	o.CookieName = &v
}

// GetSessionStateCookieName returns the SessionStateCookieName field value if set, zero value otherwise.
func (o *WebSessionManagement) GetSessionStateCookieName() string {
	if o == nil || isNil(o.SessionStateCookieName) {
		var ret string
		return ret
	}
	return *o.SessionStateCookieName
}

// GetSessionStateCookieNameOk returns a tuple with the SessionStateCookieName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetSessionStateCookieNameOk() (*string, bool) {
	if o == nil || isNil(o.SessionStateCookieName) {
    return nil, false
	}
	return o.SessionStateCookieName, true
}

// HasSessionStateCookieName returns a boolean if a field has been set.
func (o *WebSessionManagement) HasSessionStateCookieName() bool {
	if o != nil && !isNil(o.SessionStateCookieName) {
		return true
	}

	return false
}

// SetSessionStateCookieName gets a reference to the given string and assigns it to the SessionStateCookieName field.
func (o *WebSessionManagement) SetSessionStateCookieName(v string) {
	o.SessionStateCookieName = &v
}

// GetUpdateTokenWindowInSeconds returns the UpdateTokenWindowInSeconds field value if set, zero value otherwise.
func (o *WebSessionManagement) GetUpdateTokenWindowInSeconds() int64 {
	if o == nil || isNil(o.UpdateTokenWindowInSeconds) {
		var ret int64
		return ret
	}
	return *o.UpdateTokenWindowInSeconds
}

// GetUpdateTokenWindowInSecondsOk returns a tuple with the UpdateTokenWindowInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetUpdateTokenWindowInSecondsOk() (*int64, bool) {
	if o == nil || isNil(o.UpdateTokenWindowInSeconds) {
    return nil, false
	}
	return o.UpdateTokenWindowInSeconds, true
}

// HasUpdateTokenWindowInSeconds returns a boolean if a field has been set.
func (o *WebSessionManagement) HasUpdateTokenWindowInSeconds() bool {
	if o != nil && !isNil(o.UpdateTokenWindowInSeconds) {
		return true
	}

	return false
}

// SetUpdateTokenWindowInSeconds gets a reference to the given int64 and assigns it to the UpdateTokenWindowInSeconds field.
func (o *WebSessionManagement) SetUpdateTokenWindowInSeconds(v int64) {
	o.UpdateTokenWindowInSeconds = &v
}

// GetEncryptionAlgorithm returns the EncryptionAlgorithm field value if set, zero value otherwise.
func (o *WebSessionManagement) GetEncryptionAlgorithm() string {
	if o == nil || isNil(o.EncryptionAlgorithm) {
		var ret string
		return ret
	}
	return *o.EncryptionAlgorithm
}

// GetEncryptionAlgorithmOk returns a tuple with the EncryptionAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetEncryptionAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionAlgorithm) {
    return nil, false
	}
	return o.EncryptionAlgorithm, true
}

// HasEncryptionAlgorithm returns a boolean if a field has been set.
func (o *WebSessionManagement) HasEncryptionAlgorithm() bool {
	if o != nil && !isNil(o.EncryptionAlgorithm) {
		return true
	}

	return false
}

// SetEncryptionAlgorithm gets a reference to the given string and assigns it to the EncryptionAlgorithm field.
func (o *WebSessionManagement) SetEncryptionAlgorithm(v string) {
	o.EncryptionAlgorithm = &v
}

// GetNonceCookieTimeToLiveInMinutes returns the NonceCookieTimeToLiveInMinutes field value if set, zero value otherwise.
func (o *WebSessionManagement) GetNonceCookieTimeToLiveInMinutes() int32 {
	if o == nil || isNil(o.NonceCookieTimeToLiveInMinutes) {
		var ret int32
		return ret
	}
	return *o.NonceCookieTimeToLiveInMinutes
}

// GetNonceCookieTimeToLiveInMinutesOk returns a tuple with the NonceCookieTimeToLiveInMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSessionManagement) GetNonceCookieTimeToLiveInMinutesOk() (*int32, bool) {
	if o == nil || isNil(o.NonceCookieTimeToLiveInMinutes) {
    return nil, false
	}
	return o.NonceCookieTimeToLiveInMinutes, true
}

// HasNonceCookieTimeToLiveInMinutes returns a boolean if a field has been set.
func (o *WebSessionManagement) HasNonceCookieTimeToLiveInMinutes() bool {
	if o != nil && !isNil(o.NonceCookieTimeToLiveInMinutes) {
		return true
	}

	return false
}

// SetNonceCookieTimeToLiveInMinutes gets a reference to the given int32 and assigns it to the NonceCookieTimeToLiveInMinutes field.
func (o *WebSessionManagement) SetNonceCookieTimeToLiveInMinutes(v int32) {
	o.NonceCookieTimeToLiveInMinutes = &v
}

func (o WebSessionManagement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.KeyRollEnabled) {
		toSerialize["keyRollEnabled"] = o.KeyRollEnabled
	}
	if !isNil(o.KeyRollPeriodInHours) {
		toSerialize["keyRollPeriodInHours"] = o.KeyRollPeriodInHours
	}
	if !isNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !isNil(o.SigningAlgorithm) {
		toSerialize["signingAlgorithm"] = o.SigningAlgorithm
	}
	if !isNil(o.CookieName) {
		toSerialize["cookieName"] = o.CookieName
	}
	if !isNil(o.SessionStateCookieName) {
		toSerialize["sessionStateCookieName"] = o.SessionStateCookieName
	}
	if !isNil(o.UpdateTokenWindowInSeconds) {
		toSerialize["updateTokenWindowInSeconds"] = o.UpdateTokenWindowInSeconds
	}
	if !isNil(o.EncryptionAlgorithm) {
		toSerialize["encryptionAlgorithm"] = o.EncryptionAlgorithm
	}
	if !isNil(o.NonceCookieTimeToLiveInMinutes) {
		toSerialize["nonceCookieTimeToLiveInMinutes"] = o.NonceCookieTimeToLiveInMinutes
	}
	return json.Marshal(toSerialize)
}

type NullableWebSessionManagement struct {
	value *WebSessionManagement
	isSet bool
}

func (v NullableWebSessionManagement) Get() *WebSessionManagement {
	return v.value
}

func (v *NullableWebSessionManagement) Set(val *WebSessionManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableWebSessionManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableWebSessionManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebSessionManagement(val *WebSessionManagement) *NullableWebSessionManagement {
	return &NullableWebSessionManagement{value: val, isSet: true}
}

func (v NullableWebSessionManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebSessionManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


