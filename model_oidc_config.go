/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OidcConfig An OIDC authentication configuration.
type OidcConfig struct {
	// The ID of the authentication requirement list for Administrative SSO login to PingAccess.
	AuthnReqListId *int32 `json:"authnReqListId,omitempty"`
	// This field is true to enable Administrator SSO Authentication.
	Enabled *bool `json:"enabled,omitempty"`
	// Enable if OIDC single log out should be used on the /pa/oidc/logout for admin console.
	UseSlo *bool `json:"useSlo,omitempty"`
	// Attribute to display as the logged in user. If not set, the sub attribute will be used.
	UsernameAttributeName *string `json:"usernameAttributeName,omitempty"`
	RoleMapping *RoleMappingConfiguration `json:"roleMapping,omitempty"`
	OidcConfiguration AdminWebSessionOidcConfiguration `json:"oidcConfiguration"`
}

// NewOidcConfig instantiates a new OidcConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOidcConfig(oidcConfiguration AdminWebSessionOidcConfiguration) *OidcConfig {
	this := OidcConfig{}
	this.OidcConfiguration = oidcConfiguration
	return &this
}

// NewOidcConfigWithDefaults instantiates a new OidcConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOidcConfigWithDefaults() *OidcConfig {
	this := OidcConfig{}
	return &this
}

// GetAuthnReqListId returns the AuthnReqListId field value if set, zero value otherwise.
func (o *OidcConfig) GetAuthnReqListId() int32 {
	if o == nil || isNil(o.AuthnReqListId) {
		var ret int32
		return ret
	}
	return *o.AuthnReqListId
}

// GetAuthnReqListIdOk returns a tuple with the AuthnReqListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetAuthnReqListIdOk() (*int32, bool) {
	if o == nil || isNil(o.AuthnReqListId) {
    return nil, false
	}
	return o.AuthnReqListId, true
}

// HasAuthnReqListId returns a boolean if a field has been set.
func (o *OidcConfig) HasAuthnReqListId() bool {
	if o != nil && !isNil(o.AuthnReqListId) {
		return true
	}

	return false
}

// SetAuthnReqListId gets a reference to the given int32 and assigns it to the AuthnReqListId field.
func (o *OidcConfig) SetAuthnReqListId(v int32) {
	o.AuthnReqListId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OidcConfig) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OidcConfig) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OidcConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUseSlo returns the UseSlo field value if set, zero value otherwise.
func (o *OidcConfig) GetUseSlo() bool {
	if o == nil || isNil(o.UseSlo) {
		var ret bool
		return ret
	}
	return *o.UseSlo
}

// GetUseSloOk returns a tuple with the UseSlo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetUseSloOk() (*bool, bool) {
	if o == nil || isNil(o.UseSlo) {
    return nil, false
	}
	return o.UseSlo, true
}

// HasUseSlo returns a boolean if a field has been set.
func (o *OidcConfig) HasUseSlo() bool {
	if o != nil && !isNil(o.UseSlo) {
		return true
	}

	return false
}

// SetUseSlo gets a reference to the given bool and assigns it to the UseSlo field.
func (o *OidcConfig) SetUseSlo(v bool) {
	o.UseSlo = &v
}

// GetUsernameAttributeName returns the UsernameAttributeName field value if set, zero value otherwise.
func (o *OidcConfig) GetUsernameAttributeName() string {
	if o == nil || isNil(o.UsernameAttributeName) {
		var ret string
		return ret
	}
	return *o.UsernameAttributeName
}

// GetUsernameAttributeNameOk returns a tuple with the UsernameAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetUsernameAttributeNameOk() (*string, bool) {
	if o == nil || isNil(o.UsernameAttributeName) {
    return nil, false
	}
	return o.UsernameAttributeName, true
}

// HasUsernameAttributeName returns a boolean if a field has been set.
func (o *OidcConfig) HasUsernameAttributeName() bool {
	if o != nil && !isNil(o.UsernameAttributeName) {
		return true
	}

	return false
}

// SetUsernameAttributeName gets a reference to the given string and assigns it to the UsernameAttributeName field.
func (o *OidcConfig) SetUsernameAttributeName(v string) {
	o.UsernameAttributeName = &v
}

// GetRoleMapping returns the RoleMapping field value if set, zero value otherwise.
func (o *OidcConfig) GetRoleMapping() RoleMappingConfiguration {
	if o == nil || isNil(o.RoleMapping) {
		var ret RoleMappingConfiguration
		return ret
	}
	return *o.RoleMapping
}

// GetRoleMappingOk returns a tuple with the RoleMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetRoleMappingOk() (*RoleMappingConfiguration, bool) {
	if o == nil || isNil(o.RoleMapping) {
    return nil, false
	}
	return o.RoleMapping, true
}

// HasRoleMapping returns a boolean if a field has been set.
func (o *OidcConfig) HasRoleMapping() bool {
	if o != nil && !isNil(o.RoleMapping) {
		return true
	}

	return false
}

// SetRoleMapping gets a reference to the given RoleMappingConfiguration and assigns it to the RoleMapping field.
func (o *OidcConfig) SetRoleMapping(v RoleMappingConfiguration) {
	o.RoleMapping = &v
}

// GetOidcConfiguration returns the OidcConfiguration field value
func (o *OidcConfig) GetOidcConfiguration() AdminWebSessionOidcConfiguration {
	if o == nil {
		var ret AdminWebSessionOidcConfiguration
		return ret
	}

	return o.OidcConfiguration
}

// GetOidcConfigurationOk returns a tuple with the OidcConfiguration field value
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetOidcConfigurationOk() (*AdminWebSessionOidcConfiguration, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OidcConfiguration, true
}

// SetOidcConfiguration sets field value
func (o *OidcConfig) SetOidcConfiguration(v AdminWebSessionOidcConfiguration) {
	o.OidcConfiguration = v
}

func (o OidcConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuthnReqListId) {
		toSerialize["authnReqListId"] = o.AuthnReqListId
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.UseSlo) {
		toSerialize["useSlo"] = o.UseSlo
	}
	if !isNil(o.UsernameAttributeName) {
		toSerialize["usernameAttributeName"] = o.UsernameAttributeName
	}
	if !isNil(o.RoleMapping) {
		toSerialize["roleMapping"] = o.RoleMapping
	}
	if true {
		toSerialize["oidcConfiguration"] = o.OidcConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableOidcConfig struct {
	value *OidcConfig
	isSet bool
}

func (v NullableOidcConfig) Get() *OidcConfig {
	return v.value
}

func (v *NullableOidcConfig) Set(val *OidcConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOidcConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOidcConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOidcConfig(val *OidcConfig) *NullableOidcConfig {
	return &NullableOidcConfig{value: val, isSet: true}
}

func (v NullableOidcConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOidcConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


