/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the OidcConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OidcConfig{}

// OidcConfig An OIDC authentication configuration.
type OidcConfig struct {
	// The ID of the authentication requirement list for Administrative SSO login to PingAccess.
	AuthnReqListId *int64 `json:"authnReqListId,omitempty"`
	// This field is true to enable Administrator SSO Authentication.
	Enabled *bool `json:"enabled,omitempty"`
	// Enable if OIDC single log out should be used on the /pa/oidc/logout for admin console.
	UseSlo *bool `json:"useSlo,omitempty"`
	// Attribute to display as the logged in user. If not set, the sub attribute will be used.
	UsernameAttributeName *string                          `json:"usernameAttributeName,omitempty"`
	RoleMapping           *RoleMappingConfiguration        `json:"roleMapping,omitempty"`
	OidcConfiguration     AdminWebSessionOidcConfiguration `json:"oidcConfiguration"`
}

// NewOidcConfig instantiates a new OidcConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOidcConfig(oidcConfiguration AdminWebSessionOidcConfiguration) *OidcConfig {
	this := OidcConfig{}
	this.OidcConfiguration = oidcConfiguration
	return &this
}

// NewOidcConfigWithDefaults instantiates a new OidcConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOidcConfigWithDefaults() *OidcConfig {
	this := OidcConfig{}
	return &this
}

// GetAuthnReqListId returns the AuthnReqListId field value if set, zero value otherwise.
func (o *OidcConfig) GetAuthnReqListId() int64 {
	if o == nil || IsNil(o.AuthnReqListId) {
		var ret int64
		return ret
	}
	return *o.AuthnReqListId
}

// GetAuthnReqListIdOk returns a tuple with the AuthnReqListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetAuthnReqListIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthnReqListId) {
		return nil, false
	}
	return o.AuthnReqListId, true
}

// HasAuthnReqListId returns a boolean if a field has been set.
func (o *OidcConfig) HasAuthnReqListId() bool {
	if o != nil && !IsNil(o.AuthnReqListId) {
		return true
	}

	return false
}

// SetAuthnReqListId gets a reference to the given int64 and assigns it to the AuthnReqListId field.
func (o *OidcConfig) SetAuthnReqListId(v int64) {
	o.AuthnReqListId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OidcConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OidcConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OidcConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUseSlo returns the UseSlo field value if set, zero value otherwise.
func (o *OidcConfig) GetUseSlo() bool {
	if o == nil || IsNil(o.UseSlo) {
		var ret bool
		return ret
	}
	return *o.UseSlo
}

// GetUseSloOk returns a tuple with the UseSlo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetUseSloOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSlo) {
		return nil, false
	}
	return o.UseSlo, true
}

// HasUseSlo returns a boolean if a field has been set.
func (o *OidcConfig) HasUseSlo() bool {
	if o != nil && !IsNil(o.UseSlo) {
		return true
	}

	return false
}

// SetUseSlo gets a reference to the given bool and assigns it to the UseSlo field.
func (o *OidcConfig) SetUseSlo(v bool) {
	o.UseSlo = &v
}

// GetUsernameAttributeName returns the UsernameAttributeName field value if set, zero value otherwise.
func (o *OidcConfig) GetUsernameAttributeName() string {
	if o == nil || IsNil(o.UsernameAttributeName) {
		var ret string
		return ret
	}
	return *o.UsernameAttributeName
}

// GetUsernameAttributeNameOk returns a tuple with the UsernameAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetUsernameAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.UsernameAttributeName) {
		return nil, false
	}
	return o.UsernameAttributeName, true
}

// HasUsernameAttributeName returns a boolean if a field has been set.
func (o *OidcConfig) HasUsernameAttributeName() bool {
	if o != nil && !IsNil(o.UsernameAttributeName) {
		return true
	}

	return false
}

// SetUsernameAttributeName gets a reference to the given string and assigns it to the UsernameAttributeName field.
func (o *OidcConfig) SetUsernameAttributeName(v string) {
	o.UsernameAttributeName = &v
}

// GetRoleMapping returns the RoleMapping field value if set, zero value otherwise.
func (o *OidcConfig) GetRoleMapping() RoleMappingConfiguration {
	if o == nil || IsNil(o.RoleMapping) {
		var ret RoleMappingConfiguration
		return ret
	}
	return *o.RoleMapping
}

// GetRoleMappingOk returns a tuple with the RoleMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetRoleMappingOk() (*RoleMappingConfiguration, bool) {
	if o == nil || IsNil(o.RoleMapping) {
		return nil, false
	}
	return o.RoleMapping, true
}

// HasRoleMapping returns a boolean if a field has been set.
func (o *OidcConfig) HasRoleMapping() bool {
	if o != nil && !IsNil(o.RoleMapping) {
		return true
	}

	return false
}

// SetRoleMapping gets a reference to the given RoleMappingConfiguration and assigns it to the RoleMapping field.
func (o *OidcConfig) SetRoleMapping(v RoleMappingConfiguration) {
	o.RoleMapping = &v
}

// GetOidcConfiguration returns the OidcConfiguration field value
func (o *OidcConfig) GetOidcConfiguration() AdminWebSessionOidcConfiguration {
	if o == nil {
		var ret AdminWebSessionOidcConfiguration
		return ret
	}

	return o.OidcConfiguration
}

// GetOidcConfigurationOk returns a tuple with the OidcConfiguration field value
// and a boolean to check if the value has been set.
func (o *OidcConfig) GetOidcConfigurationOk() (*AdminWebSessionOidcConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OidcConfiguration, true
}

// SetOidcConfiguration sets field value
func (o *OidcConfig) SetOidcConfiguration(v AdminWebSessionOidcConfiguration) {
	o.OidcConfiguration = v
}

func (o OidcConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OidcConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthnReqListId) {
		toSerialize["authnReqListId"] = o.AuthnReqListId
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.UseSlo) {
		toSerialize["useSlo"] = o.UseSlo
	}
	if !IsNil(o.UsernameAttributeName) {
		toSerialize["usernameAttributeName"] = o.UsernameAttributeName
	}
	if !IsNil(o.RoleMapping) {
		toSerialize["roleMapping"] = o.RoleMapping
	}
	toSerialize["oidcConfiguration"] = o.OidcConfiguration
	return toSerialize, nil
}

type NullableOidcConfig struct {
	value *OidcConfig
	isSet bool
}

func (v NullableOidcConfig) Get() *OidcConfig {
	return v.value
}

func (v *NullableOidcConfig) Set(val *OidcConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOidcConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOidcConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOidcConfig(val *OidcConfig) *NullableOidcConfig {
	return &NullableOidcConfig{value: val, isSet: true}
}

func (v NullableOidcConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOidcConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
