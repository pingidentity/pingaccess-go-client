/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HttpsListener An HTTPS listener.
type HttpsListener struct {
	// (sortable) The ID of the HTTPS listener.
	Id *int32 `json:"id,omitempty"`
	// (sortable) The name of the HTTPS listener.
	Name string `json:"name"`
	// The ID of the default key pair used by the HTTPS listener.
	KeyPairId int32 `json:"keyPairId"`
	// (sortable) Enable server cipher suite ordering for the HTTPS listener.
	UseServerCipherSuiteOrder bool `json:"useServerCipherSuiteOrder"`
	// Indicates whether an admin or engine restart is required to update the HTTPS listener. Cannot be True for the ENGINE listener.
	RestartRequired bool `json:"restartRequired"`
}

// NewHttpsListener instantiates a new HttpsListener object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpsListener(name string, keyPairId int32, useServerCipherSuiteOrder bool, restartRequired bool) *HttpsListener {
	this := HttpsListener{}
	this.Name = name
	this.KeyPairId = keyPairId
	this.UseServerCipherSuiteOrder = useServerCipherSuiteOrder
	this.RestartRequired = restartRequired
	return &this
}

// NewHttpsListenerWithDefaults instantiates a new HttpsListener object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpsListenerWithDefaults() *HttpsListener {
	this := HttpsListener{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HttpsListener) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpsListener) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HttpsListener) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *HttpsListener) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *HttpsListener) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HttpsListener) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HttpsListener) SetName(v string) {
	o.Name = v
}

// GetKeyPairId returns the KeyPairId field value
func (o *HttpsListener) GetKeyPairId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeyPairId
}

// GetKeyPairIdOk returns a tuple with the KeyPairId field value
// and a boolean to check if the value has been set.
func (o *HttpsListener) GetKeyPairIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.KeyPairId, true
}

// SetKeyPairId sets field value
func (o *HttpsListener) SetKeyPairId(v int32) {
	o.KeyPairId = v
}

// GetUseServerCipherSuiteOrder returns the UseServerCipherSuiteOrder field value
func (o *HttpsListener) GetUseServerCipherSuiteOrder() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseServerCipherSuiteOrder
}

// GetUseServerCipherSuiteOrderOk returns a tuple with the UseServerCipherSuiteOrder field value
// and a boolean to check if the value has been set.
func (o *HttpsListener) GetUseServerCipherSuiteOrderOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UseServerCipherSuiteOrder, true
}

// SetUseServerCipherSuiteOrder sets field value
func (o *HttpsListener) SetUseServerCipherSuiteOrder(v bool) {
	o.UseServerCipherSuiteOrder = v
}

// GetRestartRequired returns the RestartRequired field value
func (o *HttpsListener) GetRestartRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RestartRequired
}

// GetRestartRequiredOk returns a tuple with the RestartRequired field value
// and a boolean to check if the value has been set.
func (o *HttpsListener) GetRestartRequiredOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RestartRequired, true
}

// SetRestartRequired sets field value
func (o *HttpsListener) SetRestartRequired(v bool) {
	o.RestartRequired = v
}

func (o HttpsListener) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["keyPairId"] = o.KeyPairId
	}
	if true {
		toSerialize["useServerCipherSuiteOrder"] = o.UseServerCipherSuiteOrder
	}
	if true {
		toSerialize["restartRequired"] = o.RestartRequired
	}
	return json.Marshal(toSerialize)
}

type NullableHttpsListener struct {
	value *HttpsListener
	isSet bool
}

func (v NullableHttpsListener) Get() *HttpsListener {
	return v.value
}

func (v *NullableHttpsListener) Set(val *HttpsListener) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpsListener) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpsListener) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpsListener(val *HttpsListener) *NullableHttpsListener {
	return &NullableHttpsListener{value: val, isSet: true}
}

func (v NullableHttpsListener) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpsListener) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


