/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the License type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &License{}

// License A Ping Identity license.
type License struct {
	// The tier value from the license file.
	Tier string `json:"tier"`
	// The maximum number of applications from the license file.
	MaxApplications int64 `json:"maxApplications"`
	// The Ping Identity product value from the license file.
	Product string `json:"product"`
	// The Ping Identity product version from the license file.
	Version string `json:"version"`
	// The organization value from the license file.
	Organization string `json:"organization"`
	// The enforcement type value from the license file.
	EnforcementType int32 `json:"enforcementType"`
	// The expiration date value from the license file.
	ExpirationDate string `json:"expirationDate"`
	// The issue date value from the license file.
	IssueDate string `json:"issueDate"`
	// The name value from the license file.  Name is required if the organization value is not set.
	Name string `json:"name"`
	// The ID value from the license file.
	Id int32 `json:"id"`
}

// NewLicense instantiates a new License object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicense(tier string, maxApplications int64, product string, version string, organization string, enforcementType int32, expirationDate string, issueDate string, name string, id int32) *License {
	this := License{}
	this.Tier = tier
	this.MaxApplications = maxApplications
	this.Product = product
	this.Version = version
	this.Organization = organization
	this.EnforcementType = enforcementType
	this.ExpirationDate = expirationDate
	this.IssueDate = issueDate
	this.Name = name
	this.Id = id
	return &this
}

// NewLicenseWithDefaults instantiates a new License object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseWithDefaults() *License {
	this := License{}
	return &this
}

// GetTier returns the Tier field value
func (o *License) GetTier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *License) GetTierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *License) SetTier(v string) {
	o.Tier = v
}

// GetMaxApplications returns the MaxApplications field value
func (o *License) GetMaxApplications() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxApplications
}

// GetMaxApplicationsOk returns a tuple with the MaxApplications field value
// and a boolean to check if the value has been set.
func (o *License) GetMaxApplicationsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxApplications, true
}

// SetMaxApplications sets field value
func (o *License) SetMaxApplications(v int64) {
	o.MaxApplications = v
}

// GetProduct returns the Product field value
func (o *License) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *License) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *License) SetProduct(v string) {
	o.Product = v
}

// GetVersion returns the Version field value
func (o *License) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *License) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *License) SetVersion(v string) {
	o.Version = v
}

// GetOrganization returns the Organization field value
func (o *License) GetOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *License) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *License) SetOrganization(v string) {
	o.Organization = v
}

// GetEnforcementType returns the EnforcementType field value
func (o *License) GetEnforcementType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EnforcementType
}

// GetEnforcementTypeOk returns a tuple with the EnforcementType field value
// and a boolean to check if the value has been set.
func (o *License) GetEnforcementTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnforcementType, true
}

// SetEnforcementType sets field value
func (o *License) SetEnforcementType(v int32) {
	o.EnforcementType = v
}

// GetExpirationDate returns the ExpirationDate field value
func (o *License) GetExpirationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
func (o *License) GetExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationDate, true
}

// SetExpirationDate sets field value
func (o *License) SetExpirationDate(v string) {
	o.ExpirationDate = v
}

// GetIssueDate returns the IssueDate field value
func (o *License) GetIssueDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value
// and a boolean to check if the value has been set.
func (o *License) GetIssueDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueDate, true
}

// SetIssueDate sets field value
func (o *License) SetIssueDate(v string) {
	o.IssueDate = v
}

// GetName returns the Name field value
func (o *License) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *License) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *License) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *License) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *License) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *License) SetId(v int32) {
	o.Id = v
}

func (o License) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o License) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tier"] = o.Tier
	toSerialize["maxApplications"] = o.MaxApplications
	toSerialize["product"] = o.Product
	toSerialize["version"] = o.Version
	toSerialize["organization"] = o.Organization
	toSerialize["enforcementType"] = o.EnforcementType
	toSerialize["expirationDate"] = o.ExpirationDate
	toSerialize["issueDate"] = o.IssueDate
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableLicense struct {
	value *License
	isSet bool
}

func (v NullableLicense) Get() *License {
	return v.value
}

func (v *NullableLicense) Set(val *License) {
	v.value = val
	v.isSet = true
}

func (v NullableLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicense(val *License) *NullableLicense {
	return &NullableLicense{value: val, isSet: true}
}

func (v NullableLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
