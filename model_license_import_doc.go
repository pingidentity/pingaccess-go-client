/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the LicenseImportDoc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseImportDoc{}

// LicenseImportDoc A license file.
type LicenseImportDoc struct {
	// The base64-encoded license file.
	FileData string `json:"fileData"`
}

// NewLicenseImportDoc instantiates a new LicenseImportDoc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseImportDoc(fileData string) *LicenseImportDoc {
	this := LicenseImportDoc{}
	this.FileData = fileData
	return &this
}

// NewLicenseImportDocWithDefaults instantiates a new LicenseImportDoc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseImportDocWithDefaults() *LicenseImportDoc {
	this := LicenseImportDoc{}
	return &this
}

// GetFileData returns the FileData field value
func (o *LicenseImportDoc) GetFileData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileData
}

// GetFileDataOk returns a tuple with the FileData field value
// and a boolean to check if the value has been set.
func (o *LicenseImportDoc) GetFileDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileData, true
}

// SetFileData sets field value
func (o *LicenseImportDoc) SetFileData(v string) {
	o.FileData = v
}

func (o LicenseImportDoc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseImportDoc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fileData"] = o.FileData
	return toSerialize, nil
}

type NullableLicenseImportDoc struct {
	value *LicenseImportDoc
	isSet bool
}

func (v NullableLicenseImportDoc) Get() *LicenseImportDoc {
	return v.value
}

func (v *NullableLicenseImportDoc) Set(val *LicenseImportDoc) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseImportDoc) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseImportDoc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseImportDoc(val *LicenseImportDoc) *NullableLicenseImportDoc {
	return &NullableLicenseImportDoc{value: val, isSet: true}
}

func (v NullableLicenseImportDoc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseImportDoc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
