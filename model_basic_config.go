/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BasicConfig A basic authentication configuration.
type BasicConfig struct {
	// This field is true if basic authentication to the Administrative API is enabled.
	Enabled bool `json:"enabled"`
}

// NewBasicConfig instantiates a new BasicConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicConfig(enabled bool) *BasicConfig {
	this := BasicConfig{}
	this.Enabled = enabled
	return &this
}

// NewBasicConfigWithDefaults instantiates a new BasicConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicConfigWithDefaults() *BasicConfig {
	this := BasicConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *BasicConfig) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *BasicConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *BasicConfig) SetEnabled(v bool) {
	o.Enabled = v
}

func (o BasicConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableBasicConfig struct {
	value *BasicConfig
	isSet bool
}

func (v NullableBasicConfig) Get() *BasicConfig {
	return v.value
}

func (v *NullableBasicConfig) Set(val *BasicConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicConfig(val *BasicConfig) *NullableBasicConfig {
	return &NullableBasicConfig{value: val, isSet: true}
}

func (v NullableBasicConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


