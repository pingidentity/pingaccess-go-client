/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// RuleInterceptorCategory the model 'RuleInterceptorCategory'
type RuleInterceptorCategory string

// List of RuleInterceptorCategory
const (
	RULEINTERCEPTORCATEGORY_ACCESS_CONTROL RuleInterceptorCategory = "AccessControl"
	RULEINTERCEPTORCATEGORY_PROCESSING     RuleInterceptorCategory = "Processing"
)

// All allowed values of RuleInterceptorCategory enum
var AllowedRuleInterceptorCategoryEnumValues = []RuleInterceptorCategory{
	"AccessControl",
	"Processing",
}

func (v *RuleInterceptorCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleInterceptorCategory(value)
	for _, existing := range AllowedRuleInterceptorCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleInterceptorCategory", value)
}

// NewRuleInterceptorCategoryFromValue returns a pointer to a valid RuleInterceptorCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleInterceptorCategoryFromValue(v string) (*RuleInterceptorCategory, error) {
	ev := RuleInterceptorCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleInterceptorCategory: valid values are %v", v, AllowedRuleInterceptorCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleInterceptorCategory) IsValid() bool {
	for _, existing := range AllowedRuleInterceptorCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleInterceptorCategory value
func (v RuleInterceptorCategory) Ptr() *RuleInterceptorCategory {
	return &v
}

type NullableRuleInterceptorCategory struct {
	value *RuleInterceptorCategory
	isSet bool
}

func (v NullableRuleInterceptorCategory) Get() *RuleInterceptorCategory {
	return v.value
}

func (v *NullableRuleInterceptorCategory) Set(val *RuleInterceptorCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleInterceptorCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleInterceptorCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleInterceptorCategory(val *RuleInterceptorCategory) *NullableRuleInterceptorCategory {
	return &NullableRuleInterceptorCategory{value: val, isSet: true}
}

func (v NullableRuleInterceptorCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleInterceptorCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
