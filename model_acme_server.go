/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AcmeServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcmeServer{}

// AcmeServer An ACME server.
type AcmeServer struct {
	// When creating a new AcmeServer, this is the ID for the AcmeServer. If not specified, an ID will be automatically assigned. When updating an existing AcmeServer, this field is ignored and the ID is determined by the path parameter.
	Id *string `json:"id,omitempty"`
	// (sortable) A user-friendly name for the ACME server.
	Name string `json:"name"`
	// The URL of the ACME directory resource on the ACME server.
	Url string `json:"url"`
	// An array of references to accounts. This array is read-only.
	AcmeAccounts []Link `json:"acmeAccounts,omitempty"`
}

// NewAcmeServer instantiates a new AcmeServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcmeServer(name string, url string) *AcmeServer {
	this := AcmeServer{}
	this.Name = name
	this.Url = url
	return &this
}

// NewAcmeServerWithDefaults instantiates a new AcmeServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcmeServerWithDefaults() *AcmeServer {
	this := AcmeServer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AcmeServer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeServer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AcmeServer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AcmeServer) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AcmeServer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AcmeServer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AcmeServer) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *AcmeServer) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *AcmeServer) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *AcmeServer) SetUrl(v string) {
	o.Url = v
}

// GetAcmeAccounts returns the AcmeAccounts field value if set, zero value otherwise.
func (o *AcmeServer) GetAcmeAccounts() []Link {
	if o == nil || IsNil(o.AcmeAccounts) {
		var ret []Link
		return ret
	}
	return o.AcmeAccounts
}

// GetAcmeAccountsOk returns a tuple with the AcmeAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeServer) GetAcmeAccountsOk() ([]Link, bool) {
	if o == nil || IsNil(o.AcmeAccounts) {
		return nil, false
	}
	return o.AcmeAccounts, true
}

// HasAcmeAccounts returns a boolean if a field has been set.
func (o *AcmeServer) HasAcmeAccounts() bool {
	if o != nil && !IsNil(o.AcmeAccounts) {
		return true
	}

	return false
}

// SetAcmeAccounts gets a reference to the given []Link and assigns it to the AcmeAccounts field.
func (o *AcmeServer) SetAcmeAccounts(v []Link) {
	o.AcmeAccounts = v
}

func (o AcmeServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcmeServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	if !IsNil(o.AcmeAccounts) {
		toSerialize["acmeAccounts"] = o.AcmeAccounts
	}
	return toSerialize, nil
}

type NullableAcmeServer struct {
	value *AcmeServer
	isSet bool
}

func (v NullableAcmeServer) Get() *AcmeServer {
	return v.value
}

func (v *NullableAcmeServer) Set(val *AcmeServer) {
	v.value = val
	v.isSet = true
}

func (v NullableAcmeServer) IsSet() bool {
	return v.isSet
}

func (v *NullableAcmeServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcmeServer(val *AcmeServer) *NullableAcmeServer {
	return &NullableAcmeServer{value: val, isSet: true}
}

func (v NullableAcmeServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcmeServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
