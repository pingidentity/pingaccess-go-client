/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AcmeCertState the model 'AcmeCertState'
type AcmeCertState string

// List of AcmeCertState
const (
	ACMECERTSTATE_PENDING AcmeCertState = "PENDING"
	ACMECERTSTATE_READY AcmeCertState = "READY"
	ACMECERTSTATE_PROCESSING AcmeCertState = "PROCESSING"
	ACMECERTSTATE_VALID AcmeCertState = "VALID"
	ACMECERTSTATE_INVALID AcmeCertState = "INVALID"
	ACMECERTSTATE_UNKNOWN AcmeCertState = "UNKNOWN"
)

// All allowed values of AcmeCertState enum
var AllowedAcmeCertStateEnumValues = []AcmeCertState{
	"PENDING",
	"READY",
	"PROCESSING",
	"VALID",
	"INVALID",
	"UNKNOWN",
}

func (v *AcmeCertState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AcmeCertState(value)
	for _, existing := range AllowedAcmeCertStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AcmeCertState", value)
}

// NewAcmeCertStateFromValue returns a pointer to a valid AcmeCertState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAcmeCertStateFromValue(v string) (*AcmeCertState, error) {
	ev := AcmeCertState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AcmeCertState: valid values are %v", v, AllowedAcmeCertStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AcmeCertState) IsValid() bool {
	for _, existing := range AllowedAcmeCertStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AcmeCertState value
func (v AcmeCertState) Ptr() *AcmeCertState {
	return &v
}

type NullableAcmeCertState struct {
	value *AcmeCertState
	isSet bool
}

func (v NullableAcmeCertState) Get() *AcmeCertState {
	return v.value
}

func (v *NullableAcmeCertState) Set(val *AcmeCertState) {
	v.value = val
	v.isSet = true
}

func (v NullableAcmeCertState) IsSet() bool {
	return v.isSet
}

func (v *NullableAcmeCertState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcmeCertState(val *AcmeCertState) *NullableAcmeCertState {
	return &NullableAcmeCertState{value: val, isSet: true}
}

func (v NullableAcmeCertState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcmeCertState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

