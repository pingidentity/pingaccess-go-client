/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the OptionalAttributeMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionalAttributeMapping{}

// OptionalAttributeMapping A set of user attributes that define an optional role mapping.
type OptionalAttributeMapping struct {
	// Set to true to enable the role in the system.
	Enabled *bool `json:"enabled,omitempty"`
	// The attributes that define the role.
	Attributes []Attribute `json:"attributes"`
}

// NewOptionalAttributeMapping instantiates a new OptionalAttributeMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionalAttributeMapping(attributes []Attribute) *OptionalAttributeMapping {
	this := OptionalAttributeMapping{}
	this.Attributes = attributes
	return &this
}

// NewOptionalAttributeMappingWithDefaults instantiates a new OptionalAttributeMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionalAttributeMappingWithDefaults() *OptionalAttributeMapping {
	this := OptionalAttributeMapping{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OptionalAttributeMapping) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionalAttributeMapping) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OptionalAttributeMapping) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OptionalAttributeMapping) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAttributes returns the Attributes field value
func (o *OptionalAttributeMapping) GetAttributes() []Attribute {
	if o == nil {
		var ret []Attribute
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *OptionalAttributeMapping) GetAttributesOk() ([]Attribute, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *OptionalAttributeMapping) SetAttributes(v []Attribute) {
	o.Attributes = v
}

func (o OptionalAttributeMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionalAttributeMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

type NullableOptionalAttributeMapping struct {
	value *OptionalAttributeMapping
	isSet bool
}

func (v NullableOptionalAttributeMapping) Get() *OptionalAttributeMapping {
	return v.value
}

func (v *NullableOptionalAttributeMapping) Set(val *OptionalAttributeMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionalAttributeMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionalAttributeMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionalAttributeMapping(val *OptionalAttributeMapping) *NullableOptionalAttributeMapping {
	return &NullableOptionalAttributeMapping{value: val, isSet: true}
}

func (v NullableOptionalAttributeMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionalAttributeMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
