/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceTypeConfiguration A container for configuration specific to various types of resources.
type ResourceTypeConfiguration struct {
	ResponseGenerator *ResponseGenerator `json:"responseGenerator,omitempty"`
}

// NewResourceTypeConfiguration instantiates a new ResourceTypeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeConfiguration() *ResourceTypeConfiguration {
	this := ResourceTypeConfiguration{}
	return &this
}

// NewResourceTypeConfigurationWithDefaults instantiates a new ResourceTypeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeConfigurationWithDefaults() *ResourceTypeConfiguration {
	this := ResourceTypeConfiguration{}
	return &this
}

// GetResponseGenerator returns the ResponseGenerator field value if set, zero value otherwise.
func (o *ResourceTypeConfiguration) GetResponseGenerator() ResponseGenerator {
	if o == nil || isNil(o.ResponseGenerator) {
		var ret ResponseGenerator
		return ret
	}
	return *o.ResponseGenerator
}

// GetResponseGeneratorOk returns a tuple with the ResponseGenerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeConfiguration) GetResponseGeneratorOk() (*ResponseGenerator, bool) {
	if o == nil || isNil(o.ResponseGenerator) {
    return nil, false
	}
	return o.ResponseGenerator, true
}

// HasResponseGenerator returns a boolean if a field has been set.
func (o *ResourceTypeConfiguration) HasResponseGenerator() bool {
	if o != nil && !isNil(o.ResponseGenerator) {
		return true
	}

	return false
}

// SetResponseGenerator gets a reference to the given ResponseGenerator and assigns it to the ResponseGenerator field.
func (o *ResourceTypeConfiguration) SetResponseGenerator(v ResponseGenerator) {
	o.ResponseGenerator = &v
}

func (o ResourceTypeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ResponseGenerator) {
		toSerialize["responseGenerator"] = o.ResponseGenerator
	}
	return json.Marshal(toSerialize)
}

type NullableResourceTypeConfiguration struct {
	value *ResourceTypeConfiguration
	isSet bool
}

func (v NullableResourceTypeConfiguration) Get() *ResourceTypeConfiguration {
	return v.value
}

func (v *NullableResourceTypeConfiguration) Set(val *ResourceTypeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeConfiguration(val *ResourceTypeConfiguration) *NullableResourceTypeConfiguration {
	return &NullableResourceTypeConfiguration{value: val, isSet: true}
}

func (v NullableResourceTypeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


