/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the OAuthAuthenticationConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthAuthenticationConfiguration{}

// OAuthAuthenticationConfiguration Required when the authentication type is 'OAuth'.
type OAuthAuthenticationConfiguration struct {
	ConfiguredAuthorizationServerType ConfiguredAuthorizationServerType `json:"configuredAuthorizationServerType"`
	ClientCredentials                 OAuthClientCredentials            `json:"clientCredentials"`
	// The required scopes of validated ATs authorized to call the PingFederate administrative API. Scopes can be input as an array of case-sensitive strings.
	Scopes []string `json:"scopes,omitempty"`
}

// NewOAuthAuthenticationConfiguration instantiates a new OAuthAuthenticationConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthAuthenticationConfiguration(configuredAuthorizationServerType ConfiguredAuthorizationServerType, clientCredentials OAuthClientCredentials) *OAuthAuthenticationConfiguration {
	this := OAuthAuthenticationConfiguration{}
	this.ConfiguredAuthorizationServerType = configuredAuthorizationServerType
	this.ClientCredentials = clientCredentials
	return &this
}

// NewOAuthAuthenticationConfigurationWithDefaults instantiates a new OAuthAuthenticationConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthAuthenticationConfigurationWithDefaults() *OAuthAuthenticationConfiguration {
	this := OAuthAuthenticationConfiguration{}
	return &this
}

// GetConfiguredAuthorizationServerType returns the ConfiguredAuthorizationServerType field value
func (o *OAuthAuthenticationConfiguration) GetConfiguredAuthorizationServerType() ConfiguredAuthorizationServerType {
	if o == nil {
		var ret ConfiguredAuthorizationServerType
		return ret
	}

	return o.ConfiguredAuthorizationServerType
}

// GetConfiguredAuthorizationServerTypeOk returns a tuple with the ConfiguredAuthorizationServerType field value
// and a boolean to check if the value has been set.
func (o *OAuthAuthenticationConfiguration) GetConfiguredAuthorizationServerTypeOk() (*ConfiguredAuthorizationServerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfiguredAuthorizationServerType, true
}

// SetConfiguredAuthorizationServerType sets field value
func (o *OAuthAuthenticationConfiguration) SetConfiguredAuthorizationServerType(v ConfiguredAuthorizationServerType) {
	o.ConfiguredAuthorizationServerType = v
}

// GetClientCredentials returns the ClientCredentials field value
func (o *OAuthAuthenticationConfiguration) GetClientCredentials() OAuthClientCredentials {
	if o == nil {
		var ret OAuthClientCredentials
		return ret
	}

	return o.ClientCredentials
}

// GetClientCredentialsOk returns a tuple with the ClientCredentials field value
// and a boolean to check if the value has been set.
func (o *OAuthAuthenticationConfiguration) GetClientCredentialsOk() (*OAuthClientCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientCredentials, true
}

// SetClientCredentials sets field value
func (o *OAuthAuthenticationConfiguration) SetClientCredentials(v OAuthClientCredentials) {
	o.ClientCredentials = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *OAuthAuthenticationConfiguration) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthenticationConfiguration) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *OAuthAuthenticationConfiguration) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *OAuthAuthenticationConfiguration) SetScopes(v []string) {
	o.Scopes = v
}

func (o OAuthAuthenticationConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthAuthenticationConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configuredAuthorizationServerType"] = o.ConfiguredAuthorizationServerType
	toSerialize["clientCredentials"] = o.ClientCredentials
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableOAuthAuthenticationConfiguration struct {
	value *OAuthAuthenticationConfiguration
	isSet bool
}

func (v NullableOAuthAuthenticationConfiguration) Get() *OAuthAuthenticationConfiguration {
	return v.value
}

func (v *NullableOAuthAuthenticationConfiguration) Set(val *OAuthAuthenticationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthAuthenticationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthAuthenticationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthAuthenticationConfiguration(val *OAuthAuthenticationConfiguration) *NullableOAuthAuthenticationConfiguration {
	return &NullableOAuthAuthenticationConfiguration{value: val, isSet: true}
}

func (v NullableOAuthAuthenticationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthAuthenticationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
