/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ResourceOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceOrder{}

// ResourceOrder Specifies an ordering of Application Resources.
type ResourceOrder struct {
	// An ordered list of Resource IDs (integers).
	ResourceIds []int64 `json:"resourceIds,omitempty"`
}

// NewResourceOrder instantiates a new ResourceOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceOrder() *ResourceOrder {
	this := ResourceOrder{}
	return &this
}

// NewResourceOrderWithDefaults instantiates a new ResourceOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceOrderWithDefaults() *ResourceOrder {
	this := ResourceOrder{}
	return &this
}

// GetResourceIds returns the ResourceIds field value if set, zero value otherwise.
func (o *ResourceOrder) GetResourceIds() []int64 {
	if o == nil || IsNil(o.ResourceIds) {
		var ret []int64
		return ret
	}
	return o.ResourceIds
}

// GetResourceIdsOk returns a tuple with the ResourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceOrder) GetResourceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ResourceIds) {
		return nil, false
	}
	return o.ResourceIds, true
}

// HasResourceIds returns a boolean if a field has been set.
func (o *ResourceOrder) HasResourceIds() bool {
	if o != nil && !IsNil(o.ResourceIds) {
		return true
	}

	return false
}

// SetResourceIds gets a reference to the given []int64 and assigns it to the ResourceIds field.
func (o *ResourceOrder) SetResourceIds(v []int64) {
	o.ResourceIds = v
}

func (o ResourceOrder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceIds) {
		toSerialize["resourceIds"] = o.ResourceIds
	}
	return toSerialize, nil
}

type NullableResourceOrder struct {
	value *ResourceOrder
	isSet bool
}

func (v NullableResourceOrder) Get() *ResourceOrder {
	return v.value
}

func (v *NullableResourceOrder) Set(val *ResourceOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceOrder(val *ResourceOrder) *NullableResourceOrder {
	return &NullableResourceOrder{value: val, isSet: true}
}

func (v NullableResourceOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
