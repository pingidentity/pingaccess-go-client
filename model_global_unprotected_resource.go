/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the GlobalUnprotectedResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalUnprotectedResource{}

// GlobalUnprotectedResource A global unprotected resource.
type GlobalUnprotectedResource struct {
	// When creating a new GlobalUnprotectedResource, this is the ID for the GlobalUnprotectedResource. If not specified, an ID will be automatically assigned. When updating an existing GlobalUnprotectedResource, this field is ignored and the ID is determined by the path parameter.
	Id *string `json:"id,omitempty"`
	// (sortable) The name of the global unprotected resource.
	Name string `json:"name"`
	// A path for the global unprotected resource.
	WildcardPath string      `json:"wildcardPath"`
	AuditLevel   *AuditLevel `json:"auditLevel,omitempty"`
	// (sortable) True if the global resource is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// (sortable) A description of the global unprotected resource.
	Description *string `json:"description,omitempty"`
}

// NewGlobalUnprotectedResource instantiates a new GlobalUnprotectedResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalUnprotectedResource(name string, wildcardPath string) *GlobalUnprotectedResource {
	this := GlobalUnprotectedResource{}
	this.Name = name
	this.WildcardPath = wildcardPath
	return &this
}

// NewGlobalUnprotectedResourceWithDefaults instantiates a new GlobalUnprotectedResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalUnprotectedResourceWithDefaults() *GlobalUnprotectedResource {
	this := GlobalUnprotectedResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GlobalUnprotectedResource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalUnprotectedResource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GlobalUnprotectedResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GlobalUnprotectedResource) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *GlobalUnprotectedResource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GlobalUnprotectedResource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GlobalUnprotectedResource) SetName(v string) {
	o.Name = v
}

// GetWildcardPath returns the WildcardPath field value
func (o *GlobalUnprotectedResource) GetWildcardPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WildcardPath
}

// GetWildcardPathOk returns a tuple with the WildcardPath field value
// and a boolean to check if the value has been set.
func (o *GlobalUnprotectedResource) GetWildcardPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WildcardPath, true
}

// SetWildcardPath sets field value
func (o *GlobalUnprotectedResource) SetWildcardPath(v string) {
	o.WildcardPath = v
}

// GetAuditLevel returns the AuditLevel field value if set, zero value otherwise.
func (o *GlobalUnprotectedResource) GetAuditLevel() AuditLevel {
	if o == nil || IsNil(o.AuditLevel) {
		var ret AuditLevel
		return ret
	}
	return *o.AuditLevel
}

// GetAuditLevelOk returns a tuple with the AuditLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalUnprotectedResource) GetAuditLevelOk() (*AuditLevel, bool) {
	if o == nil || IsNil(o.AuditLevel) {
		return nil, false
	}
	return o.AuditLevel, true
}

// HasAuditLevel returns a boolean if a field has been set.
func (o *GlobalUnprotectedResource) HasAuditLevel() bool {
	if o != nil && !IsNil(o.AuditLevel) {
		return true
	}

	return false
}

// SetAuditLevel gets a reference to the given AuditLevel and assigns it to the AuditLevel field.
func (o *GlobalUnprotectedResource) SetAuditLevel(v AuditLevel) {
	o.AuditLevel = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GlobalUnprotectedResource) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalUnprotectedResource) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GlobalUnprotectedResource) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GlobalUnprotectedResource) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GlobalUnprotectedResource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalUnprotectedResource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GlobalUnprotectedResource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GlobalUnprotectedResource) SetDescription(v string) {
	o.Description = &v
}

func (o GlobalUnprotectedResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalUnprotectedResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["wildcardPath"] = o.WildcardPath
	if !IsNil(o.AuditLevel) {
		toSerialize["auditLevel"] = o.AuditLevel
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableGlobalUnprotectedResource struct {
	value *GlobalUnprotectedResource
	isSet bool
}

func (v NullableGlobalUnprotectedResource) Get() *GlobalUnprotectedResource {
	return v.value
}

func (v *NullableGlobalUnprotectedResource) Set(val *GlobalUnprotectedResource) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalUnprotectedResource) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalUnprotectedResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalUnprotectedResource(val *GlobalUnprotectedResource) *NullableGlobalUnprotectedResource {
	return &NullableGlobalUnprotectedResource{value: val, isSet: true}
}

func (v NullableGlobalUnprotectedResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalUnprotectedResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
