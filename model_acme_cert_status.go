/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AcmeCertStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcmeCertStatus{}

// AcmeCertStatus The status of a certificate.
type AcmeCertStatus struct {
	State AcmeCertState `json:"state"`
	// A map of problem documents for requested domains. The key is the domain and the value is a ProblemDocumentView.  Key type: String Value type: ProblemDocument
	Problems *map[string]ProblemDocument `json:"problems,omitempty"`
}

// NewAcmeCertStatus instantiates a new AcmeCertStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcmeCertStatus(state AcmeCertState) *AcmeCertStatus {
	this := AcmeCertStatus{}
	this.State = state
	return &this
}

// NewAcmeCertStatusWithDefaults instantiates a new AcmeCertStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcmeCertStatusWithDefaults() *AcmeCertStatus {
	this := AcmeCertStatus{}
	return &this
}

// GetState returns the State field value
func (o *AcmeCertStatus) GetState() AcmeCertState {
	if o == nil {
		var ret AcmeCertState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *AcmeCertStatus) GetStateOk() (*AcmeCertState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *AcmeCertStatus) SetState(v AcmeCertState) {
	o.State = v
}

// GetProblems returns the Problems field value if set, zero value otherwise.
func (o *AcmeCertStatus) GetProblems() map[string]ProblemDocument {
	if o == nil || IsNil(o.Problems) {
		var ret map[string]ProblemDocument
		return ret
	}
	return *o.Problems
}

// GetProblemsOk returns a tuple with the Problems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeCertStatus) GetProblemsOk() (*map[string]ProblemDocument, bool) {
	if o == nil || IsNil(o.Problems) {
		return nil, false
	}
	return o.Problems, true
}

// HasProblems returns a boolean if a field has been set.
func (o *AcmeCertStatus) HasProblems() bool {
	if o != nil && !IsNil(o.Problems) {
		return true
	}

	return false
}

// SetProblems gets a reference to the given map[string]ProblemDocument and assigns it to the Problems field.
func (o *AcmeCertStatus) SetProblems(v map[string]ProblemDocument) {
	o.Problems = &v
}

func (o AcmeCertStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcmeCertStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	if !IsNil(o.Problems) {
		toSerialize["problems"] = o.Problems
	}
	return toSerialize, nil
}

type NullableAcmeCertStatus struct {
	value *AcmeCertStatus
	isSet bool
}

func (v NullableAcmeCertStatus) Get() *AcmeCertStatus {
	return v.value
}

func (v *NullableAcmeCertStatus) Set(val *AcmeCertStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAcmeCertStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAcmeCertStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcmeCertStatus(val *AcmeCertStatus) *NullableAcmeCertStatus {
	return &NullableAcmeCertStatus{value: val, isSet: true}
}

func (v NullableAcmeCertStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcmeCertStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
