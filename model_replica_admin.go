/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReplicaAdmin A replica admin.
type ReplicaAdmin struct {
	// The ID of the replica admin. This field is read-only.
	Id *int32 `json:"id,omitempty"`
	// The name of the replica admin.
	Name string `json:"name"`
	// The description of the replica admin.
	Description *string `json:"description,omitempty"`
	// Set to true when configuration replication for the replica admin is enabled. False when configuration replication is suspended.
	ConfigReplicationEnabled *bool `json:"configReplicationEnabled,omitempty"`
	// An array of public keys associated with the replica admin.
	Keys []PublicKey `json:"keys,omitempty"`
	// The ID of the proxy to use for HTTP requests or zero if none.
	HttpProxyId *int32 `json:"httpProxyId,omitempty"`
	// The ID of the proxy to use for HTTPS requests or zero if none.
	HttpsProxyId *int32 `json:"httpsProxyId,omitempty"`
	// The host and port of the replica admin.
	HostPort string `json:"hostPort"`
	// The ID of the certificate the replica admin will use to contact PingAccess via SSL/TLS.
	SelectedCertificateId *int32 `json:"selectedCertificateId,omitempty"`
	CertificateHash *Hash `json:"certificateHash,omitempty"`
}

// NewReplicaAdmin instantiates a new ReplicaAdmin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaAdmin(name string, hostPort string) *ReplicaAdmin {
	this := ReplicaAdmin{}
	this.Name = name
	this.HostPort = hostPort
	return &this
}

// NewReplicaAdminWithDefaults instantiates a new ReplicaAdmin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaAdminWithDefaults() *ReplicaAdmin {
	this := ReplicaAdmin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReplicaAdmin) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ReplicaAdmin) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReplicaAdmin) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReplicaAdmin) SetDescription(v string) {
	o.Description = &v
}

// GetConfigReplicationEnabled returns the ConfigReplicationEnabled field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetConfigReplicationEnabled() bool {
	if o == nil || isNil(o.ConfigReplicationEnabled) {
		var ret bool
		return ret
	}
	return *o.ConfigReplicationEnabled
}

// GetConfigReplicationEnabledOk returns a tuple with the ConfigReplicationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetConfigReplicationEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.ConfigReplicationEnabled) {
    return nil, false
	}
	return o.ConfigReplicationEnabled, true
}

// HasConfigReplicationEnabled returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasConfigReplicationEnabled() bool {
	if o != nil && !isNil(o.ConfigReplicationEnabled) {
		return true
	}

	return false
}

// SetConfigReplicationEnabled gets a reference to the given bool and assigns it to the ConfigReplicationEnabled field.
func (o *ReplicaAdmin) SetConfigReplicationEnabled(v bool) {
	o.ConfigReplicationEnabled = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetKeys() []PublicKey {
	if o == nil || isNil(o.Keys) {
		var ret []PublicKey
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetKeysOk() ([]PublicKey, bool) {
	if o == nil || isNil(o.Keys) {
    return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasKeys() bool {
	if o != nil && !isNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []PublicKey and assigns it to the Keys field.
func (o *ReplicaAdmin) SetKeys(v []PublicKey) {
	o.Keys = v
}

// GetHttpProxyId returns the HttpProxyId field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetHttpProxyId() int32 {
	if o == nil || isNil(o.HttpProxyId) {
		var ret int32
		return ret
	}
	return *o.HttpProxyId
}

// GetHttpProxyIdOk returns a tuple with the HttpProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetHttpProxyIdOk() (*int32, bool) {
	if o == nil || isNil(o.HttpProxyId) {
    return nil, false
	}
	return o.HttpProxyId, true
}

// HasHttpProxyId returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasHttpProxyId() bool {
	if o != nil && !isNil(o.HttpProxyId) {
		return true
	}

	return false
}

// SetHttpProxyId gets a reference to the given int32 and assigns it to the HttpProxyId field.
func (o *ReplicaAdmin) SetHttpProxyId(v int32) {
	o.HttpProxyId = &v
}

// GetHttpsProxyId returns the HttpsProxyId field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetHttpsProxyId() int32 {
	if o == nil || isNil(o.HttpsProxyId) {
		var ret int32
		return ret
	}
	return *o.HttpsProxyId
}

// GetHttpsProxyIdOk returns a tuple with the HttpsProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetHttpsProxyIdOk() (*int32, bool) {
	if o == nil || isNil(o.HttpsProxyId) {
    return nil, false
	}
	return o.HttpsProxyId, true
}

// HasHttpsProxyId returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasHttpsProxyId() bool {
	if o != nil && !isNil(o.HttpsProxyId) {
		return true
	}

	return false
}

// SetHttpsProxyId gets a reference to the given int32 and assigns it to the HttpsProxyId field.
func (o *ReplicaAdmin) SetHttpsProxyId(v int32) {
	o.HttpsProxyId = &v
}

// GetHostPort returns the HostPort field value
func (o *ReplicaAdmin) GetHostPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetHostPortOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HostPort, true
}

// SetHostPort sets field value
func (o *ReplicaAdmin) SetHostPort(v string) {
	o.HostPort = v
}

// GetSelectedCertificateId returns the SelectedCertificateId field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetSelectedCertificateId() int32 {
	if o == nil || isNil(o.SelectedCertificateId) {
		var ret int32
		return ret
	}
	return *o.SelectedCertificateId
}

// GetSelectedCertificateIdOk returns a tuple with the SelectedCertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetSelectedCertificateIdOk() (*int32, bool) {
	if o == nil || isNil(o.SelectedCertificateId) {
    return nil, false
	}
	return o.SelectedCertificateId, true
}

// HasSelectedCertificateId returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasSelectedCertificateId() bool {
	if o != nil && !isNil(o.SelectedCertificateId) {
		return true
	}

	return false
}

// SetSelectedCertificateId gets a reference to the given int32 and assigns it to the SelectedCertificateId field.
func (o *ReplicaAdmin) SetSelectedCertificateId(v int32) {
	o.SelectedCertificateId = &v
}

// GetCertificateHash returns the CertificateHash field value if set, zero value otherwise.
func (o *ReplicaAdmin) GetCertificateHash() Hash {
	if o == nil || isNil(o.CertificateHash) {
		var ret Hash
		return ret
	}
	return *o.CertificateHash
}

// GetCertificateHashOk returns a tuple with the CertificateHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaAdmin) GetCertificateHashOk() (*Hash, bool) {
	if o == nil || isNil(o.CertificateHash) {
    return nil, false
	}
	return o.CertificateHash, true
}

// HasCertificateHash returns a boolean if a field has been set.
func (o *ReplicaAdmin) HasCertificateHash() bool {
	if o != nil && !isNil(o.CertificateHash) {
		return true
	}

	return false
}

// SetCertificateHash gets a reference to the given Hash and assigns it to the CertificateHash field.
func (o *ReplicaAdmin) SetCertificateHash(v Hash) {
	o.CertificateHash = &v
}

func (o ReplicaAdmin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.ConfigReplicationEnabled) {
		toSerialize["configReplicationEnabled"] = o.ConfigReplicationEnabled
	}
	if !isNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !isNil(o.HttpProxyId) {
		toSerialize["httpProxyId"] = o.HttpProxyId
	}
	if !isNil(o.HttpsProxyId) {
		toSerialize["httpsProxyId"] = o.HttpsProxyId
	}
	if true {
		toSerialize["hostPort"] = o.HostPort
	}
	if !isNil(o.SelectedCertificateId) {
		toSerialize["selectedCertificateId"] = o.SelectedCertificateId
	}
	if !isNil(o.CertificateHash) {
		toSerialize["certificateHash"] = o.CertificateHash
	}
	return json.Marshal(toSerialize)
}

type NullableReplicaAdmin struct {
	value *ReplicaAdmin
	isSet bool
}

func (v NullableReplicaAdmin) Get() *ReplicaAdmin {
	return v.value
}

func (v *NullableReplicaAdmin) Set(val *ReplicaAdmin) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaAdmin) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaAdmin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaAdmin(val *ReplicaAdmin) *NullableReplicaAdmin {
	return &NullableReplicaAdmin{value: val, isSet: true}
}

func (v NullableReplicaAdmin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaAdmin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


