/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SameSiteType the model 'SameSiteType'
type SameSiteType string

// List of SameSiteType
const (
	SAMESITETYPE_DISABLED SameSiteType = "Disabled"
	SAMESITETYPE_LAX SameSiteType = "Lax"
	SAMESITETYPE_NONE SameSiteType = "None"
)

// All allowed values of SameSiteType enum
var AllowedSameSiteTypeEnumValues = []SameSiteType{
	"Disabled",
	"Lax",
	"None",
}

func (v *SameSiteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SameSiteType(value)
	for _, existing := range AllowedSameSiteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SameSiteType", value)
}

// NewSameSiteTypeFromValue returns a pointer to a valid SameSiteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSameSiteTypeFromValue(v string) (*SameSiteType, error) {
	ev := SameSiteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SameSiteType: valid values are %v", v, AllowedSameSiteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SameSiteType) IsValid() bool {
	for _, existing := range AllowedSameSiteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SameSiteType value
func (v SameSiteType) Ptr() *SameSiteType {
	return &v
}

type NullableSameSiteType struct {
	value *SameSiteType
	isSet bool
}

func (v NullableSameSiteType) Get() *SameSiteType {
	return v.value
}

func (v *NullableSameSiteType) Set(val *SameSiteType) {
	v.value = val
	v.isSet = true
}

func (v NullableSameSiteType) IsSet() bool {
	return v.isSet
}

func (v *NullableSameSiteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSameSiteType(val *SameSiteType) *NullableSameSiteType {
	return &NullableSameSiteType{value: val, isSet: true}
}

func (v NullableSameSiteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSameSiteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

