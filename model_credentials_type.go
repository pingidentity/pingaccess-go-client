/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// CredentialsType the model 'CredentialsType'
type CredentialsType string

// List of CredentialsType
const (
	CREDENTIALSTYPE_SECRET          CredentialsType = "SECRET"
	CREDENTIALSTYPE_CERTIFICATE     CredentialsType = "CERTIFICATE"
	CREDENTIALSTYPE_PRIVATE_KEY_JWT CredentialsType = "PRIVATE_KEY_JWT"
)

// All allowed values of CredentialsType enum
var AllowedCredentialsTypeEnumValues = []CredentialsType{
	"SECRET",
	"CERTIFICATE",
	"PRIVATE_KEY_JWT",
}

func (v *CredentialsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CredentialsType(value)
	for _, existing := range AllowedCredentialsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CredentialsType", value)
}

// NewCredentialsTypeFromValue returns a pointer to a valid CredentialsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCredentialsTypeFromValue(v string) (*CredentialsType, error) {
	ev := CredentialsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CredentialsType: valid values are %v", v, AllowedCredentialsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CredentialsType) IsValid() bool {
	for _, existing := range AllowedCredentialsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CredentialsType value
func (v CredentialsType) Ptr() *CredentialsType {
	return &v
}

type NullableCredentialsType struct {
	value *CredentialsType
	isSet bool
}

func (v NullableCredentialsType) Get() *CredentialsType {
	return v.value
}

func (v *NullableCredentialsType) Set(val *CredentialsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialsType(val *CredentialsType) *NullableCredentialsType {
	return &NullableCredentialsType{value: val, isSet: true}
}

func (v NullableCredentialsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
