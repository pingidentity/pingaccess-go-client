/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PkceChallengeType the model 'PkceChallengeType'
type PkceChallengeType string

// List of PkceChallengeType
const (
	PKCECHALLENGETYPE_SHA256 PkceChallengeType = "SHA256"
	PKCECHALLENGETYPE_OFF PkceChallengeType = "OFF"
)

// All allowed values of PkceChallengeType enum
var AllowedPkceChallengeTypeEnumValues = []PkceChallengeType{
	"SHA256",
	"OFF",
}

func (v *PkceChallengeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PkceChallengeType(value)
	for _, existing := range AllowedPkceChallengeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PkceChallengeType", value)
}

// NewPkceChallengeTypeFromValue returns a pointer to a valid PkceChallengeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPkceChallengeTypeFromValue(v string) (*PkceChallengeType, error) {
	ev := PkceChallengeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PkceChallengeType: valid values are %v", v, AllowedPkceChallengeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PkceChallengeType) IsValid() bool {
	for _, existing := range AllowedPkceChallengeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PkceChallengeType value
func (v PkceChallengeType) Ptr() *PkceChallengeType {
	return &v
}

type NullablePkceChallengeType struct {
	value *PkceChallengeType
	isSet bool
}

func (v NullablePkceChallengeType) Get() *PkceChallengeType {
	return v.value
}

func (v *NullablePkceChallengeType) Set(val *PkceChallengeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePkceChallengeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePkceChallengeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkceChallengeType(val *PkceChallengeType) *NullablePkceChallengeType {
	return &NullablePkceChallengeType{value: val, isSet: true}
}

func (v NullablePkceChallengeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkceChallengeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

