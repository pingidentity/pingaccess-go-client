/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RuleDescriptors A collection of rule descriptors.
type RuleDescriptors struct {
	// The actual list of rule descriptors.
	Items []RuleDescriptor `json:"items"`
}

// NewRuleDescriptors instantiates a new RuleDescriptors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleDescriptors(items []RuleDescriptor) *RuleDescriptors {
	this := RuleDescriptors{}
	this.Items = items
	return &this
}

// NewRuleDescriptorsWithDefaults instantiates a new RuleDescriptors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleDescriptorsWithDefaults() *RuleDescriptors {
	this := RuleDescriptors{}
	return &this
}

// GetItems returns the Items field value
func (o *RuleDescriptors) GetItems() []RuleDescriptor {
	if o == nil {
		var ret []RuleDescriptor
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *RuleDescriptors) GetItemsOk() ([]RuleDescriptor, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *RuleDescriptors) SetItems(v []RuleDescriptor) {
	o.Items = v
}

func (o RuleDescriptors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableRuleDescriptors struct {
	value *RuleDescriptors
	isSet bool
}

func (v NullableRuleDescriptors) Get() *RuleDescriptors {
	return v.value
}

func (v *NullableRuleDescriptors) Set(val *RuleDescriptors) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleDescriptors) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleDescriptors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleDescriptors(val *RuleDescriptors) *NullableRuleDescriptors {
	return &NullableRuleDescriptors{value: val, isSet: true}
}

func (v NullableRuleDescriptors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleDescriptors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


