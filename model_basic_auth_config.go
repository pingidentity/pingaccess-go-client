/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BasicAuthConfig A basic authentication configuration.
type BasicAuthConfig struct {
	// This field is true if basic authentication to the Administrative API is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewBasicAuthConfig instantiates a new BasicAuthConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicAuthConfig() *BasicAuthConfig {
	this := BasicAuthConfig{}
	return &this
}

// NewBasicAuthConfigWithDefaults instantiates a new BasicAuthConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicAuthConfigWithDefaults() *BasicAuthConfig {
	this := BasicAuthConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *BasicAuthConfig) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicAuthConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *BasicAuthConfig) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *BasicAuthConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o BasicAuthConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableBasicAuthConfig struct {
	value *BasicAuthConfig
	isSet bool
}

func (v NullableBasicAuthConfig) Get() *BasicAuthConfig {
	return v.value
}

func (v *NullableBasicAuthConfig) Set(val *BasicAuthConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicAuthConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicAuthConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicAuthConfig(val *BasicAuthConfig) *NullableBasicAuthConfig {
	return &NullableBasicAuthConfig{value: val, isSet: true}
}

func (v NullableBasicAuthConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicAuthConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


