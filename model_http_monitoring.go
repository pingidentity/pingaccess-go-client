/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the HttpMonitoring type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpMonitoring{}

// HttpMonitoring struct for HttpMonitoring
type HttpMonitoring struct {
	AuditLevel *AuditLevel `json:"auditLevel,omitempty"`
}

// NewHttpMonitoring instantiates a new HttpMonitoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpMonitoring() *HttpMonitoring {
	this := HttpMonitoring{}
	return &this
}

// NewHttpMonitoringWithDefaults instantiates a new HttpMonitoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpMonitoringWithDefaults() *HttpMonitoring {
	this := HttpMonitoring{}
	return &this
}

// GetAuditLevel returns the AuditLevel field value if set, zero value otherwise.
func (o *HttpMonitoring) GetAuditLevel() AuditLevel {
	if o == nil || IsNil(o.AuditLevel) {
		var ret AuditLevel
		return ret
	}
	return *o.AuditLevel
}

// GetAuditLevelOk returns a tuple with the AuditLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMonitoring) GetAuditLevelOk() (*AuditLevel, bool) {
	if o == nil || IsNil(o.AuditLevel) {
		return nil, false
	}
	return o.AuditLevel, true
}

// HasAuditLevel returns a boolean if a field has been set.
func (o *HttpMonitoring) HasAuditLevel() bool {
	if o != nil && !IsNil(o.AuditLevel) {
		return true
	}

	return false
}

// SetAuditLevel gets a reference to the given AuditLevel and assigns it to the AuditLevel field.
func (o *HttpMonitoring) SetAuditLevel(v AuditLevel) {
	o.AuditLevel = &v
}

func (o HttpMonitoring) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpMonitoring) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditLevel) {
		toSerialize["auditLevel"] = o.AuditLevel
	}
	return toSerialize, nil
}

type NullableHttpMonitoring struct {
	value *HttpMonitoring
	isSet bool
}

func (v NullableHttpMonitoring) Get() *HttpMonitoring {
	return v.value
}

func (v *NullableHttpMonitoring) Set(val *HttpMonitoring) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpMonitoring) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpMonitoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpMonitoring(val *HttpMonitoring) *NullableHttpMonitoring {
	return &NullableHttpMonitoring{value: val, isSet: true}
}

func (v NullableHttpMonitoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpMonitoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
