/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the OAuthConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthConfig{}

// OAuthConfig An OAuth authentication configuration.
type OAuthConfig struct {
	ClientCredentials *OAuthClientCredentials `json:"clientCredentials,omitempty"`
	// The scope required to successfully access the API--for example, admin.
	Scope string `json:"scope"`
	// The attribute you want to use from the OAuth access token as the subject for auditing purposes. At runtime, the attribute's value is used as the subject field in audit log entries for the Admin API. This field is ignored when the accessTokenValidator is configured.
	SubjectAttributeName *string                   `json:"subjectAttributeName,omitempty"`
	RoleMapping          *RoleMappingConfiguration `json:"roleMapping,omitempty"`
	// This field is true if OAuth authentication to the Administrative API is enabled.
	Enabled              *bool                           `json:"enabled,omitempty"`
	AccessTokenValidator *EmbeddableAccessTokenValidator `json:"accessTokenValidator,omitempty"`
	ClientSecret         *HiddenField                    `json:"clientSecret,omitempty"`
	// The client_id of the OAuth client used for validating OAuth access tokens. (DEPRECATED - to be removed in a future release; please use 'clientCredentials' instead)
	ClientId *string `json:"clientId,omitempty"`
}

// NewOAuthConfig instantiates a new OAuthConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthConfig(scope string) *OAuthConfig {
	this := OAuthConfig{}
	this.Scope = scope
	return &this
}

// NewOAuthConfigWithDefaults instantiates a new OAuthConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthConfigWithDefaults() *OAuthConfig {
	this := OAuthConfig{}
	return &this
}

// GetClientCredentials returns the ClientCredentials field value if set, zero value otherwise.
func (o *OAuthConfig) GetClientCredentials() OAuthClientCredentials {
	if o == nil || IsNil(o.ClientCredentials) {
		var ret OAuthClientCredentials
		return ret
	}
	return *o.ClientCredentials
}

// GetClientCredentialsOk returns a tuple with the ClientCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetClientCredentialsOk() (*OAuthClientCredentials, bool) {
	if o == nil || IsNil(o.ClientCredentials) {
		return nil, false
	}
	return o.ClientCredentials, true
}

// HasClientCredentials returns a boolean if a field has been set.
func (o *OAuthConfig) HasClientCredentials() bool {
	if o != nil && !IsNil(o.ClientCredentials) {
		return true
	}

	return false
}

// SetClientCredentials gets a reference to the given OAuthClientCredentials and assigns it to the ClientCredentials field.
func (o *OAuthConfig) SetClientCredentials(v OAuthClientCredentials) {
	o.ClientCredentials = &v
}

// GetScope returns the Scope field value
func (o *OAuthConfig) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *OAuthConfig) SetScope(v string) {
	o.Scope = v
}

// GetSubjectAttributeName returns the SubjectAttributeName field value if set, zero value otherwise.
func (o *OAuthConfig) GetSubjectAttributeName() string {
	if o == nil || IsNil(o.SubjectAttributeName) {
		var ret string
		return ret
	}
	return *o.SubjectAttributeName
}

// GetSubjectAttributeNameOk returns a tuple with the SubjectAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetSubjectAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectAttributeName) {
		return nil, false
	}
	return o.SubjectAttributeName, true
}

// HasSubjectAttributeName returns a boolean if a field has been set.
func (o *OAuthConfig) HasSubjectAttributeName() bool {
	if o != nil && !IsNil(o.SubjectAttributeName) {
		return true
	}

	return false
}

// SetSubjectAttributeName gets a reference to the given string and assigns it to the SubjectAttributeName field.
func (o *OAuthConfig) SetSubjectAttributeName(v string) {
	o.SubjectAttributeName = &v
}

// GetRoleMapping returns the RoleMapping field value if set, zero value otherwise.
func (o *OAuthConfig) GetRoleMapping() RoleMappingConfiguration {
	if o == nil || IsNil(o.RoleMapping) {
		var ret RoleMappingConfiguration
		return ret
	}
	return *o.RoleMapping
}

// GetRoleMappingOk returns a tuple with the RoleMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetRoleMappingOk() (*RoleMappingConfiguration, bool) {
	if o == nil || IsNil(o.RoleMapping) {
		return nil, false
	}
	return o.RoleMapping, true
}

// HasRoleMapping returns a boolean if a field has been set.
func (o *OAuthConfig) HasRoleMapping() bool {
	if o != nil && !IsNil(o.RoleMapping) {
		return true
	}

	return false
}

// SetRoleMapping gets a reference to the given RoleMappingConfiguration and assigns it to the RoleMapping field.
func (o *OAuthConfig) SetRoleMapping(v RoleMappingConfiguration) {
	o.RoleMapping = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OAuthConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OAuthConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OAuthConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAccessTokenValidator returns the AccessTokenValidator field value if set, zero value otherwise.
func (o *OAuthConfig) GetAccessTokenValidator() EmbeddableAccessTokenValidator {
	if o == nil || IsNil(o.AccessTokenValidator) {
		var ret EmbeddableAccessTokenValidator
		return ret
	}
	return *o.AccessTokenValidator
}

// GetAccessTokenValidatorOk returns a tuple with the AccessTokenValidator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetAccessTokenValidatorOk() (*EmbeddableAccessTokenValidator, bool) {
	if o == nil || IsNil(o.AccessTokenValidator) {
		return nil, false
	}
	return o.AccessTokenValidator, true
}

// HasAccessTokenValidator returns a boolean if a field has been set.
func (o *OAuthConfig) HasAccessTokenValidator() bool {
	if o != nil && !IsNil(o.AccessTokenValidator) {
		return true
	}

	return false
}

// SetAccessTokenValidator gets a reference to the given EmbeddableAccessTokenValidator and assigns it to the AccessTokenValidator field.
func (o *OAuthConfig) SetAccessTokenValidator(v EmbeddableAccessTokenValidator) {
	o.AccessTokenValidator = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *OAuthConfig) GetClientSecret() HiddenField {
	if o == nil || IsNil(o.ClientSecret) {
		var ret HiddenField
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetClientSecretOk() (*HiddenField, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *OAuthConfig) HasClientSecret() bool {
	if o != nil && !IsNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given HiddenField and assigns it to the ClientSecret field.
func (o *OAuthConfig) SetClientSecret(v HiddenField) {
	o.ClientSecret = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *OAuthConfig) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *OAuthConfig) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *OAuthConfig) SetClientId(v string) {
	o.ClientId = &v
}

func (o OAuthConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientCredentials) {
		toSerialize["clientCredentials"] = o.ClientCredentials
	}
	toSerialize["scope"] = o.Scope
	if !IsNil(o.SubjectAttributeName) {
		toSerialize["subjectAttributeName"] = o.SubjectAttributeName
	}
	if !IsNil(o.RoleMapping) {
		toSerialize["roleMapping"] = o.RoleMapping
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AccessTokenValidator) {
		toSerialize["accessTokenValidator"] = o.AccessTokenValidator
	}
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	return toSerialize, nil
}

type NullableOAuthConfig struct {
	value *OAuthConfig
	isSet bool
}

func (v NullableOAuthConfig) Get() *OAuthConfig {
	return v.value
}

func (v *NullableOAuthConfig) Set(val *OAuthConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthConfig(val *OAuthConfig) *NullableOAuthConfig {
	return &NullableOAuthConfig{value: val, isSet: true}
}

func (v NullableOAuthConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
