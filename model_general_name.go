/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GeneralName struct for GeneralName
type GeneralName struct {
	Name GeneralNameEnum `json:"name"`
	Value string `json:"value"`
}

// NewGeneralName instantiates a new GeneralName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralName(name GeneralNameEnum, value string) *GeneralName {
	this := GeneralName{}
	this.Name = name
	this.Value = value
	return &this
}

// NewGeneralNameWithDefaults instantiates a new GeneralName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralNameWithDefaults() *GeneralName {
	this := GeneralName{}
	return &this
}

// GetName returns the Name field value
func (o *GeneralName) GetName() GeneralNameEnum {
	if o == nil {
		var ret GeneralNameEnum
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GeneralName) GetNameOk() (*GeneralNameEnum, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GeneralName) SetName(v GeneralNameEnum) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *GeneralName) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GeneralName) GetValueOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *GeneralName) SetValue(v string) {
	o.Value = v
}

func (o GeneralName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableGeneralName struct {
	value *GeneralName
	isSet bool
}

func (v NullableGeneralName) Get() *GeneralName {
	return v.value
}

func (v *NullableGeneralName) Set(val *GeneralName) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralName) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralName(val *GeneralName) *NullableGeneralName {
	return &NullableGeneralName{value: val, isSet: true}
}

func (v NullableGeneralName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


