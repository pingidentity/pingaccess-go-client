/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GlobalUnprotectedResourcesApiService GlobalUnprotectedResourcesApi service
type GlobalUnprotectedResourcesApiService service

type ApiAddGlobalUnprotectedResourceRequest struct {
	ctx                       context.Context
	ApiService                *GlobalUnprotectedResourcesApiService
	globalUnprotectedResource *GlobalUnprotectedResource
}

// Global Unprotected Resource to add
func (r ApiAddGlobalUnprotectedResourceRequest) GlobalUnprotectedResource(globalUnprotectedResource GlobalUnprotectedResource) ApiAddGlobalUnprotectedResourceRequest {
	r.globalUnprotectedResource = &globalUnprotectedResource
	return r
}

func (r ApiAddGlobalUnprotectedResourceRequest) Execute() (*GlobalUnprotectedResource, *http.Response, error) {
	return r.ApiService.AddGlobalUnprotectedResourceExecute(r)
}

/*
AddGlobalUnprotectedResource Method for AddGlobalUnprotectedResource

Add a Global Unprotected Resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddGlobalUnprotectedResourceRequest
*/
func (a *GlobalUnprotectedResourcesApiService) AddGlobalUnprotectedResource(ctx context.Context) ApiAddGlobalUnprotectedResourceRequest {
	return ApiAddGlobalUnprotectedResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GlobalUnprotectedResource
func (a *GlobalUnprotectedResourcesApiService) AddGlobalUnprotectedResourceExecute(r ApiAddGlobalUnprotectedResourceRequest) (*GlobalUnprotectedResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GlobalUnprotectedResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalUnprotectedResourcesApiService.AddGlobalUnprotectedResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/globalUnprotectedResources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.globalUnprotectedResource == nil {
		return localVarReturnValue, nil, reportError("globalUnprotectedResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.globalUnprotectedResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGlobalUnprotectedResourceRequest struct {
	ctx        context.Context
	ApiService *GlobalUnprotectedResourcesApiService
	id         string
}

func (r ApiDeleteGlobalUnprotectedResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteGlobalUnprotectedResourceExecute(r)
}

/*
DeleteGlobalUnprotectedResource Method for DeleteGlobalUnprotectedResource

Delete a Global Unprotected Resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of Global Unprotected Resource to delete
	@return ApiDeleteGlobalUnprotectedResourceRequest
*/
func (a *GlobalUnprotectedResourcesApiService) DeleteGlobalUnprotectedResource(ctx context.Context, id string) ApiDeleteGlobalUnprotectedResourceRequest {
	return ApiDeleteGlobalUnprotectedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GlobalUnprotectedResourcesApiService) DeleteGlobalUnprotectedResourceExecute(r ApiDeleteGlobalUnprotectedResourceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalUnprotectedResourcesApiService.DeleteGlobalUnprotectedResource")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/globalUnprotectedResources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGlobalUnprotectedResourceRequest struct {
	ctx        context.Context
	ApiService *GlobalUnprotectedResourcesApiService
	id         string
}

func (r ApiGetGlobalUnprotectedResourceRequest) Execute() (*GlobalUnprotectedResource, *http.Response, error) {
	return r.ApiService.GetGlobalUnprotectedResourceExecute(r)
}

/*
GetGlobalUnprotectedResource Method for GetGlobalUnprotectedResource

Get a Global Unprotected Resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of Global Unprotected Resource to get
	@return ApiGetGlobalUnprotectedResourceRequest
*/
func (a *GlobalUnprotectedResourcesApiService) GetGlobalUnprotectedResource(ctx context.Context, id string) ApiGetGlobalUnprotectedResourceRequest {
	return ApiGetGlobalUnprotectedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GlobalUnprotectedResource
func (a *GlobalUnprotectedResourcesApiService) GetGlobalUnprotectedResourceExecute(r ApiGetGlobalUnprotectedResourceRequest) (*GlobalUnprotectedResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GlobalUnprotectedResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalUnprotectedResourcesApiService.GetGlobalUnprotectedResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/globalUnprotectedResources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGlobalUnprotectedResourcesRequest struct {
	ctx           context.Context
	ApiService    *GlobalUnprotectedResourcesApiService
	page          *int32
	numberPerPage *int32
	filter        *string
	name          *string
	sortKey       *string
	order         *string
}

// Page number to retrieve
func (r ApiGetGlobalUnprotectedResourcesRequest) Page(page int32) ApiGetGlobalUnprotectedResourcesRequest {
	r.page = &page
	return r
}

// Number of Global Unprotected Resources per page
func (r ApiGetGlobalUnprotectedResourcesRequest) NumberPerPage(numberPerPage int32) ApiGetGlobalUnprotectedResourcesRequest {
	r.numberPerPage = &numberPerPage
	return r
}

// Search for Global Unprotected Resources with name matching filter text
func (r ApiGetGlobalUnprotectedResourcesRequest) Filter(filter string) ApiGetGlobalUnprotectedResourcesRequest {
	r.filter = &filter
	return r
}

// Get Global Unprotected Resources by name
func (r ApiGetGlobalUnprotectedResourcesRequest) Name(name string) ApiGetGlobalUnprotectedResourcesRequest {
	r.name = &name
	return r
}

// A comma separated list of Global Unprotected Resource attributes (keys) to be used to sort the results
func (r ApiGetGlobalUnprotectedResourcesRequest) SortKey(sortKey string) ApiGetGlobalUnprotectedResourcesRequest {
	r.sortKey = &sortKey
	return r
}

// Order of the sorted results (ASC for ascending, DESC for descending)
func (r ApiGetGlobalUnprotectedResourcesRequest) Order(order string) ApiGetGlobalUnprotectedResourcesRequest {
	r.order = &order
	return r
}

func (r ApiGetGlobalUnprotectedResourcesRequest) Execute() (*GlobalUnprotectedResources, *http.Response, error) {
	return r.ApiService.GetGlobalUnprotectedResourcesExecute(r)
}

/*
GetGlobalUnprotectedResources Method for GetGlobalUnprotectedResources

Get all Global Unprotected Resources

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetGlobalUnprotectedResourcesRequest
*/
func (a *GlobalUnprotectedResourcesApiService) GetGlobalUnprotectedResources(ctx context.Context) ApiGetGlobalUnprotectedResourcesRequest {
	return ApiGetGlobalUnprotectedResourcesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GlobalUnprotectedResources
func (a *GlobalUnprotectedResourcesApiService) GetGlobalUnprotectedResourcesExecute(r ApiGetGlobalUnprotectedResourcesRequest) (*GlobalUnprotectedResources, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GlobalUnprotectedResources
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalUnprotectedResourcesApiService.GetGlobalUnprotectedResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/globalUnprotectedResources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.numberPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberPerPage", r.numberPerPage, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.sortKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortKey", r.sortKey, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateGlobalUnprotectedResourceRequest struct {
	ctx                       context.Context
	ApiService                *GlobalUnprotectedResourcesApiService
	id                        string
	globalUnprotectedResource *GlobalUnprotectedResource
}

// Global Unprotected Resource to update
func (r ApiUpdateGlobalUnprotectedResourceRequest) GlobalUnprotectedResource(globalUnprotectedResource GlobalUnprotectedResource) ApiUpdateGlobalUnprotectedResourceRequest {
	r.globalUnprotectedResource = &globalUnprotectedResource
	return r
}

func (r ApiUpdateGlobalUnprotectedResourceRequest) Execute() (*GlobalUnprotectedResource, *http.Response, error) {
	return r.ApiService.UpdateGlobalUnprotectedResourceExecute(r)
}

/*
UpdateGlobalUnprotectedResource Method for UpdateGlobalUnprotectedResource

Update a Global Unprotected Resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of Global Unprotected Resource to update
	@return ApiUpdateGlobalUnprotectedResourceRequest
*/
func (a *GlobalUnprotectedResourcesApiService) UpdateGlobalUnprotectedResource(ctx context.Context, id string) ApiUpdateGlobalUnprotectedResourceRequest {
	return ApiUpdateGlobalUnprotectedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GlobalUnprotectedResource
func (a *GlobalUnprotectedResourcesApiService) UpdateGlobalUnprotectedResourceExecute(r ApiUpdateGlobalUnprotectedResourceRequest) (*GlobalUnprotectedResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GlobalUnprotectedResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlobalUnprotectedResourcesApiService.UpdateGlobalUnprotectedResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/globalUnprotectedResources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.globalUnprotectedResource == nil {
		return localVarReturnValue, nil, reportError("globalUnprotectedResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.globalUnprotectedResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
