/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ApplicationDefaults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationDefaults{}

// ApplicationDefaults Default Application Settings for PingAccess.
type ApplicationDefaults struct {
	// The ID of the Authentication Challenge Policy to be used by default on new Applications created in the PingAccess Admin UI.
	DefaultAuthnChallengePolicyId *string `json:"defaultAuthnChallengePolicyId,omitempty"`
}

// NewApplicationDefaults instantiates a new ApplicationDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationDefaults() *ApplicationDefaults {
	this := ApplicationDefaults{}
	return &this
}

// NewApplicationDefaultsWithDefaults instantiates a new ApplicationDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDefaultsWithDefaults() *ApplicationDefaults {
	this := ApplicationDefaults{}
	return &this
}

// GetDefaultAuthnChallengePolicyId returns the DefaultAuthnChallengePolicyId field value if set, zero value otherwise.
func (o *ApplicationDefaults) GetDefaultAuthnChallengePolicyId() string {
	if o == nil || IsNil(o.DefaultAuthnChallengePolicyId) {
		var ret string
		return ret
	}
	return *o.DefaultAuthnChallengePolicyId
}

// GetDefaultAuthnChallengePolicyIdOk returns a tuple with the DefaultAuthnChallengePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDefaults) GetDefaultAuthnChallengePolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultAuthnChallengePolicyId) {
		return nil, false
	}
	return o.DefaultAuthnChallengePolicyId, true
}

// HasDefaultAuthnChallengePolicyId returns a boolean if a field has been set.
func (o *ApplicationDefaults) HasDefaultAuthnChallengePolicyId() bool {
	if o != nil && !IsNil(o.DefaultAuthnChallengePolicyId) {
		return true
	}

	return false
}

// SetDefaultAuthnChallengePolicyId gets a reference to the given string and assigns it to the DefaultAuthnChallengePolicyId field.
func (o *ApplicationDefaults) SetDefaultAuthnChallengePolicyId(v string) {
	o.DefaultAuthnChallengePolicyId = &v
}

func (o ApplicationDefaults) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationDefaults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultAuthnChallengePolicyId) {
		toSerialize["defaultAuthnChallengePolicyId"] = o.DefaultAuthnChallengePolicyId
	}
	return toSerialize, nil
}

type NullableApplicationDefaults struct {
	value *ApplicationDefaults
	isSet bool
}

func (v NullableApplicationDefaults) Get() *ApplicationDefaults {
	return v.value
}

func (v *NullableApplicationDefaults) Set(val *ApplicationDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationDefaults(val *ApplicationDefaults) *NullableApplicationDefaults {
	return &NullableApplicationDefaults{value: val, isSet: true}
}

func (v NullableApplicationDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
