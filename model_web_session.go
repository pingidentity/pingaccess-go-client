/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the WebSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebSession{}

// WebSession A web session.
type WebSession struct {
	// When creating a new WebSession, this is the ID for the WebSession. If not specified, an ID will be automatically assigned. When updating an existing WebSession, this field is ignored and the ID is determined by the path parameter.
	Id *int64 `json:"id,omitempty"`
	// (sortable) The name of the web session.
	Name                    string                   `json:"name"`
	RequestPreservationType *RequestPreservationType `json:"requestPreservationType,omitempty"`
	// Enabling will allow PA to push the payload of an OAuth 2.0 authorization request to the authorization server via a direct request and provide it with a request URI that is used as reference to the data in a subsequent call to the authorization endpoint.
	EnablePushAuthorization *bool `json:"enablePushAuthorization,omitempty"`
	// (sortable) The length of time you want the PA Token to remain active. Once the PA Token expires, an authenticated user must re-authenticate.
	SessionTimeoutInMinutes *int64 `json:"sessionTimeoutInMinutes,omitempty"`
	// (sortable) Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing.
	ValidateSessionIsAlive *bool `json:"validateSessionIsAlive,omitempty"`
	// (sortable) Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider.
	SendRequestedUrlToProvider *bool `json:"sendRequestedUrlToProvider,omitempty"`
	// (sortable) Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled.
	RefreshUserInfoClaimsInterval *int64 `json:"refreshUserInfoClaimsInterval,omitempty"`
	// (sortable) Specify if PingAccess should provide feedback to the authentication authority. For example, tell the authority that the user is being redirected because their session expired.
	ProvideAuthenticationFeedback *bool `json:"provideAuthenticationFeedback,omitempty"`
	// (sortable) Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is encoded and stored in the session cookie.
	CacheUserAttributes *bool `json:"cacheUserAttributes,omitempty"`
	// (sortable) Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions.
	EnableRefreshUser *bool `json:"enableRefreshUser,omitempty"`
	// Specifies whether the default scopes ('profile', 'email', 'address', and 'phone') should be specified in the access request. (DEPRECATED - to be removed in a future release; please use 'scopes' instead)
	RequestProfile *bool `json:"requestProfile,omitempty"`
	// Enter zero or more case sensitive string values. The values can be used by the Client to make sure that the End-User is still present for the current session or to bring attention to the request.
	PromptParameter []string `json:"promptParameter,omitempty"`
	// (sortable) Specify whether the PingAccess Cookie must be sent using only HTTPS connections.
	SecureCookie *bool `json:"secureCookie,omitempty"`
	// (sortable) Enable the HttpOnly flag on cookies that contain the PA Token.
	HttpOnlyCookie *bool `json:"httpOnlyCookie,omitempty"`
	// (sortable) The length of time you want the PingAccess Token to remain active when no activity is detected.
	IdleTimeoutInMinutes *int64 `json:"idleTimeoutInMinutes,omitempty"`
	// (sortable) Enter a unique identifier between 1 and 32 characters that defines who the PA Token is applicable to.
	Audience   string                `json:"audience"`
	CookieType *WebSessionCookieType `json:"cookieType,omitempty"`
	SameSite   *SameSiteType         `json:"sameSite,omitempty"`
	// The list of scopes to be specified in the access request. If not specified, the default scopes ('profile', 'email', 'address', and 'phone') will be used. The openid scope is implied and does not need to be specified in this list.
	Scopes            []string           `json:"scopes,omitempty"`
	OidcLoginType     *OidcLoginType     `json:"oidcLoginType,omitempty"`
	WebStorageType    *WebStorageType    `json:"webStorageType,omitempty"`
	PkceChallengeType *PkceChallengeType `json:"pkceChallengeType,omitempty"`
	// An optional Groovy script used to calculate override values for sessionTimeoutInMinutes and idleTimeoutInMinutes based on user attributes during token issuance. The script outputs a SessionTimeoutContext with an idle and session timeout. Values of 0 for this context will result in the existing values on the web session configuration being used, and negative values are not valid and will cause errors.
	TimeoutGroovyScript *string                `json:"timeoutGroovyScript,omitempty"`
	ClientCredentials   OAuthClientCredentials `json:"clientCredentials"`
	// (sortable) The domain where the cookie is stored--for example, corp.yourcompany.com.
	CookieDomain *string `json:"cookieDomain,omitempty"`
	// (sortable) Specify if PingAccess should produce a 415 HTTP response when it receives an unauthenticated POST request with a content type unsupported by request preservation. The only content type supported by request preservation is application/x-www-form-urlencoded. When disabled, PingAccess will challenge an unauthenticated POST request using an unsupported content type with the same challenge response sent to an unauthenticated GET request. The default is false.
	FailOnUnsupportedPreservationContentType bool `json:"failOnUnsupportedPreservationContentType"`
	// (sortable) Specify the number of seconds to cache PingFederate Session State information.
	PfsessionStateCacheInSeconds *int64 `json:"pfsessionStateCacheInSeconds,omitempty"`
}

// NewWebSession instantiates a new WebSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebSession(name string, audience string, clientCredentials OAuthClientCredentials, failOnUnsupportedPreservationContentType bool) *WebSession {
	this := WebSession{}
	this.Name = name
	this.Audience = audience
	this.ClientCredentials = clientCredentials
	this.FailOnUnsupportedPreservationContentType = failOnUnsupportedPreservationContentType
	return &this
}

// NewWebSessionWithDefaults instantiates a new WebSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebSessionWithDefaults() *WebSession {
	this := WebSession{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WebSession) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WebSession) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *WebSession) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *WebSession) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WebSession) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WebSession) SetName(v string) {
	o.Name = v
}

// GetRequestPreservationType returns the RequestPreservationType field value if set, zero value otherwise.
func (o *WebSession) GetRequestPreservationType() RequestPreservationType {
	if o == nil || IsNil(o.RequestPreservationType) {
		var ret RequestPreservationType
		return ret
	}
	return *o.RequestPreservationType
}

// GetRequestPreservationTypeOk returns a tuple with the RequestPreservationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetRequestPreservationTypeOk() (*RequestPreservationType, bool) {
	if o == nil || IsNil(o.RequestPreservationType) {
		return nil, false
	}
	return o.RequestPreservationType, true
}

// HasRequestPreservationType returns a boolean if a field has been set.
func (o *WebSession) HasRequestPreservationType() bool {
	if o != nil && !IsNil(o.RequestPreservationType) {
		return true
	}

	return false
}

// SetRequestPreservationType gets a reference to the given RequestPreservationType and assigns it to the RequestPreservationType field.
func (o *WebSession) SetRequestPreservationType(v RequestPreservationType) {
	o.RequestPreservationType = &v
}

// GetEnablePushAuthorization returns the EnablePushAuthorization field value if set, zero value otherwise.
func (o *WebSession) GetEnablePushAuthorization() bool {
	if o == nil || IsNil(o.EnablePushAuthorization) {
		var ret bool
		return ret
	}
	return *o.EnablePushAuthorization
}

// GetEnablePushAuthorizationOk returns a tuple with the EnablePushAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetEnablePushAuthorizationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePushAuthorization) {
		return nil, false
	}
	return o.EnablePushAuthorization, true
}

// HasEnablePushAuthorization returns a boolean if a field has been set.
func (o *WebSession) HasEnablePushAuthorization() bool {
	if o != nil && !IsNil(o.EnablePushAuthorization) {
		return true
	}

	return false
}

// SetEnablePushAuthorization gets a reference to the given bool and assigns it to the EnablePushAuthorization field.
func (o *WebSession) SetEnablePushAuthorization(v bool) {
	o.EnablePushAuthorization = &v
}

// GetSessionTimeoutInMinutes returns the SessionTimeoutInMinutes field value if set, zero value otherwise.
func (o *WebSession) GetSessionTimeoutInMinutes() int64 {
	if o == nil || IsNil(o.SessionTimeoutInMinutes) {
		var ret int64
		return ret
	}
	return *o.SessionTimeoutInMinutes
}

// GetSessionTimeoutInMinutesOk returns a tuple with the SessionTimeoutInMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetSessionTimeoutInMinutesOk() (*int64, bool) {
	if o == nil || IsNil(o.SessionTimeoutInMinutes) {
		return nil, false
	}
	return o.SessionTimeoutInMinutes, true
}

// HasSessionTimeoutInMinutes returns a boolean if a field has been set.
func (o *WebSession) HasSessionTimeoutInMinutes() bool {
	if o != nil && !IsNil(o.SessionTimeoutInMinutes) {
		return true
	}

	return false
}

// SetSessionTimeoutInMinutes gets a reference to the given int64 and assigns it to the SessionTimeoutInMinutes field.
func (o *WebSession) SetSessionTimeoutInMinutes(v int64) {
	o.SessionTimeoutInMinutes = &v
}

// GetValidateSessionIsAlive returns the ValidateSessionIsAlive field value if set, zero value otherwise.
func (o *WebSession) GetValidateSessionIsAlive() bool {
	if o == nil || IsNil(o.ValidateSessionIsAlive) {
		var ret bool
		return ret
	}
	return *o.ValidateSessionIsAlive
}

// GetValidateSessionIsAliveOk returns a tuple with the ValidateSessionIsAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetValidateSessionIsAliveOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateSessionIsAlive) {
		return nil, false
	}
	return o.ValidateSessionIsAlive, true
}

// HasValidateSessionIsAlive returns a boolean if a field has been set.
func (o *WebSession) HasValidateSessionIsAlive() bool {
	if o != nil && !IsNil(o.ValidateSessionIsAlive) {
		return true
	}

	return false
}

// SetValidateSessionIsAlive gets a reference to the given bool and assigns it to the ValidateSessionIsAlive field.
func (o *WebSession) SetValidateSessionIsAlive(v bool) {
	o.ValidateSessionIsAlive = &v
}

// GetSendRequestedUrlToProvider returns the SendRequestedUrlToProvider field value if set, zero value otherwise.
func (o *WebSession) GetSendRequestedUrlToProvider() bool {
	if o == nil || IsNil(o.SendRequestedUrlToProvider) {
		var ret bool
		return ret
	}
	return *o.SendRequestedUrlToProvider
}

// GetSendRequestedUrlToProviderOk returns a tuple with the SendRequestedUrlToProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetSendRequestedUrlToProviderOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRequestedUrlToProvider) {
		return nil, false
	}
	return o.SendRequestedUrlToProvider, true
}

// HasSendRequestedUrlToProvider returns a boolean if a field has been set.
func (o *WebSession) HasSendRequestedUrlToProvider() bool {
	if o != nil && !IsNil(o.SendRequestedUrlToProvider) {
		return true
	}

	return false
}

// SetSendRequestedUrlToProvider gets a reference to the given bool and assigns it to the SendRequestedUrlToProvider field.
func (o *WebSession) SetSendRequestedUrlToProvider(v bool) {
	o.SendRequestedUrlToProvider = &v
}

// GetRefreshUserInfoClaimsInterval returns the RefreshUserInfoClaimsInterval field value if set, zero value otherwise.
func (o *WebSession) GetRefreshUserInfoClaimsInterval() int64 {
	if o == nil || IsNil(o.RefreshUserInfoClaimsInterval) {
		var ret int64
		return ret
	}
	return *o.RefreshUserInfoClaimsInterval
}

// GetRefreshUserInfoClaimsIntervalOk returns a tuple with the RefreshUserInfoClaimsInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetRefreshUserInfoClaimsIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.RefreshUserInfoClaimsInterval) {
		return nil, false
	}
	return o.RefreshUserInfoClaimsInterval, true
}

// HasRefreshUserInfoClaimsInterval returns a boolean if a field has been set.
func (o *WebSession) HasRefreshUserInfoClaimsInterval() bool {
	if o != nil && !IsNil(o.RefreshUserInfoClaimsInterval) {
		return true
	}

	return false
}

// SetRefreshUserInfoClaimsInterval gets a reference to the given int64 and assigns it to the RefreshUserInfoClaimsInterval field.
func (o *WebSession) SetRefreshUserInfoClaimsInterval(v int64) {
	o.RefreshUserInfoClaimsInterval = &v
}

// GetProvideAuthenticationFeedback returns the ProvideAuthenticationFeedback field value if set, zero value otherwise.
func (o *WebSession) GetProvideAuthenticationFeedback() bool {
	if o == nil || IsNil(o.ProvideAuthenticationFeedback) {
		var ret bool
		return ret
	}
	return *o.ProvideAuthenticationFeedback
}

// GetProvideAuthenticationFeedbackOk returns a tuple with the ProvideAuthenticationFeedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetProvideAuthenticationFeedbackOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvideAuthenticationFeedback) {
		return nil, false
	}
	return o.ProvideAuthenticationFeedback, true
}

// HasProvideAuthenticationFeedback returns a boolean if a field has been set.
func (o *WebSession) HasProvideAuthenticationFeedback() bool {
	if o != nil && !IsNil(o.ProvideAuthenticationFeedback) {
		return true
	}

	return false
}

// SetProvideAuthenticationFeedback gets a reference to the given bool and assigns it to the ProvideAuthenticationFeedback field.
func (o *WebSession) SetProvideAuthenticationFeedback(v bool) {
	o.ProvideAuthenticationFeedback = &v
}

// GetCacheUserAttributes returns the CacheUserAttributes field value if set, zero value otherwise.
func (o *WebSession) GetCacheUserAttributes() bool {
	if o == nil || IsNil(o.CacheUserAttributes) {
		var ret bool
		return ret
	}
	return *o.CacheUserAttributes
}

// GetCacheUserAttributesOk returns a tuple with the CacheUserAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetCacheUserAttributesOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheUserAttributes) {
		return nil, false
	}
	return o.CacheUserAttributes, true
}

// HasCacheUserAttributes returns a boolean if a field has been set.
func (o *WebSession) HasCacheUserAttributes() bool {
	if o != nil && !IsNil(o.CacheUserAttributes) {
		return true
	}

	return false
}

// SetCacheUserAttributes gets a reference to the given bool and assigns it to the CacheUserAttributes field.
func (o *WebSession) SetCacheUserAttributes(v bool) {
	o.CacheUserAttributes = &v
}

// GetEnableRefreshUser returns the EnableRefreshUser field value if set, zero value otherwise.
func (o *WebSession) GetEnableRefreshUser() bool {
	if o == nil || IsNil(o.EnableRefreshUser) {
		var ret bool
		return ret
	}
	return *o.EnableRefreshUser
}

// GetEnableRefreshUserOk returns a tuple with the EnableRefreshUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetEnableRefreshUserOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRefreshUser) {
		return nil, false
	}
	return o.EnableRefreshUser, true
}

// HasEnableRefreshUser returns a boolean if a field has been set.
func (o *WebSession) HasEnableRefreshUser() bool {
	if o != nil && !IsNil(o.EnableRefreshUser) {
		return true
	}

	return false
}

// SetEnableRefreshUser gets a reference to the given bool and assigns it to the EnableRefreshUser field.
func (o *WebSession) SetEnableRefreshUser(v bool) {
	o.EnableRefreshUser = &v
}

// GetRequestProfile returns the RequestProfile field value if set, zero value otherwise.
func (o *WebSession) GetRequestProfile() bool {
	if o == nil || IsNil(o.RequestProfile) {
		var ret bool
		return ret
	}
	return *o.RequestProfile
}

// GetRequestProfileOk returns a tuple with the RequestProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetRequestProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestProfile) {
		return nil, false
	}
	return o.RequestProfile, true
}

// HasRequestProfile returns a boolean if a field has been set.
func (o *WebSession) HasRequestProfile() bool {
	if o != nil && !IsNil(o.RequestProfile) {
		return true
	}

	return false
}

// SetRequestProfile gets a reference to the given bool and assigns it to the RequestProfile field.
func (o *WebSession) SetRequestProfile(v bool) {
	o.RequestProfile = &v
}

// GetPromptParameter returns the PromptParameter field value if set, zero value otherwise.
func (o *WebSession) GetPromptParameter() []string {
	if o == nil || IsNil(o.PromptParameter) {
		var ret []string
		return ret
	}
	return o.PromptParameter
}

// GetPromptParameterOk returns a tuple with the PromptParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetPromptParameterOk() ([]string, bool) {
	if o == nil || IsNil(o.PromptParameter) {
		return nil, false
	}
	return o.PromptParameter, true
}

// HasPromptParameter returns a boolean if a field has been set.
func (o *WebSession) HasPromptParameter() bool {
	if o != nil && !IsNil(o.PromptParameter) {
		return true
	}

	return false
}

// SetPromptParameter gets a reference to the given []string and assigns it to the PromptParameter field.
func (o *WebSession) SetPromptParameter(v []string) {
	o.PromptParameter = v
}

// GetSecureCookie returns the SecureCookie field value if set, zero value otherwise.
func (o *WebSession) GetSecureCookie() bool {
	if o == nil || IsNil(o.SecureCookie) {
		var ret bool
		return ret
	}
	return *o.SecureCookie
}

// GetSecureCookieOk returns a tuple with the SecureCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetSecureCookieOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureCookie) {
		return nil, false
	}
	return o.SecureCookie, true
}

// HasSecureCookie returns a boolean if a field has been set.
func (o *WebSession) HasSecureCookie() bool {
	if o != nil && !IsNil(o.SecureCookie) {
		return true
	}

	return false
}

// SetSecureCookie gets a reference to the given bool and assigns it to the SecureCookie field.
func (o *WebSession) SetSecureCookie(v bool) {
	o.SecureCookie = &v
}

// GetHttpOnlyCookie returns the HttpOnlyCookie field value if set, zero value otherwise.
func (o *WebSession) GetHttpOnlyCookie() bool {
	if o == nil || IsNil(o.HttpOnlyCookie) {
		var ret bool
		return ret
	}
	return *o.HttpOnlyCookie
}

// GetHttpOnlyCookieOk returns a tuple with the HttpOnlyCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetHttpOnlyCookieOk() (*bool, bool) {
	if o == nil || IsNil(o.HttpOnlyCookie) {
		return nil, false
	}
	return o.HttpOnlyCookie, true
}

// HasHttpOnlyCookie returns a boolean if a field has been set.
func (o *WebSession) HasHttpOnlyCookie() bool {
	if o != nil && !IsNil(o.HttpOnlyCookie) {
		return true
	}

	return false
}

// SetHttpOnlyCookie gets a reference to the given bool and assigns it to the HttpOnlyCookie field.
func (o *WebSession) SetHttpOnlyCookie(v bool) {
	o.HttpOnlyCookie = &v
}

// GetIdleTimeoutInMinutes returns the IdleTimeoutInMinutes field value if set, zero value otherwise.
func (o *WebSession) GetIdleTimeoutInMinutes() int64 {
	if o == nil || IsNil(o.IdleTimeoutInMinutes) {
		var ret int64
		return ret
	}
	return *o.IdleTimeoutInMinutes
}

// GetIdleTimeoutInMinutesOk returns a tuple with the IdleTimeoutInMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetIdleTimeoutInMinutesOk() (*int64, bool) {
	if o == nil || IsNil(o.IdleTimeoutInMinutes) {
		return nil, false
	}
	return o.IdleTimeoutInMinutes, true
}

// HasIdleTimeoutInMinutes returns a boolean if a field has been set.
func (o *WebSession) HasIdleTimeoutInMinutes() bool {
	if o != nil && !IsNil(o.IdleTimeoutInMinutes) {
		return true
	}

	return false
}

// SetIdleTimeoutInMinutes gets a reference to the given int64 and assigns it to the IdleTimeoutInMinutes field.
func (o *WebSession) SetIdleTimeoutInMinutes(v int64) {
	o.IdleTimeoutInMinutes = &v
}

// GetAudience returns the Audience field value
func (o *WebSession) GetAudience() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value
// and a boolean to check if the value has been set.
func (o *WebSession) GetAudienceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Audience, true
}

// SetAudience sets field value
func (o *WebSession) SetAudience(v string) {
	o.Audience = v
}

// GetCookieType returns the CookieType field value if set, zero value otherwise.
func (o *WebSession) GetCookieType() WebSessionCookieType {
	if o == nil || IsNil(o.CookieType) {
		var ret WebSessionCookieType
		return ret
	}
	return *o.CookieType
}

// GetCookieTypeOk returns a tuple with the CookieType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetCookieTypeOk() (*WebSessionCookieType, bool) {
	if o == nil || IsNil(o.CookieType) {
		return nil, false
	}
	return o.CookieType, true
}

// HasCookieType returns a boolean if a field has been set.
func (o *WebSession) HasCookieType() bool {
	if o != nil && !IsNil(o.CookieType) {
		return true
	}

	return false
}

// SetCookieType gets a reference to the given WebSessionCookieType and assigns it to the CookieType field.
func (o *WebSession) SetCookieType(v WebSessionCookieType) {
	o.CookieType = &v
}

// GetSameSite returns the SameSite field value if set, zero value otherwise.
func (o *WebSession) GetSameSite() SameSiteType {
	if o == nil || IsNil(o.SameSite) {
		var ret SameSiteType
		return ret
	}
	return *o.SameSite
}

// GetSameSiteOk returns a tuple with the SameSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetSameSiteOk() (*SameSiteType, bool) {
	if o == nil || IsNil(o.SameSite) {
		return nil, false
	}
	return o.SameSite, true
}

// HasSameSite returns a boolean if a field has been set.
func (o *WebSession) HasSameSite() bool {
	if o != nil && !IsNil(o.SameSite) {
		return true
	}

	return false
}

// SetSameSite gets a reference to the given SameSiteType and assigns it to the SameSite field.
func (o *WebSession) SetSameSite(v SameSiteType) {
	o.SameSite = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *WebSession) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *WebSession) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *WebSession) SetScopes(v []string) {
	o.Scopes = v
}

// GetOidcLoginType returns the OidcLoginType field value if set, zero value otherwise.
func (o *WebSession) GetOidcLoginType() OidcLoginType {
	if o == nil || IsNil(o.OidcLoginType) {
		var ret OidcLoginType
		return ret
	}
	return *o.OidcLoginType
}

// GetOidcLoginTypeOk returns a tuple with the OidcLoginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetOidcLoginTypeOk() (*OidcLoginType, bool) {
	if o == nil || IsNil(o.OidcLoginType) {
		return nil, false
	}
	return o.OidcLoginType, true
}

// HasOidcLoginType returns a boolean if a field has been set.
func (o *WebSession) HasOidcLoginType() bool {
	if o != nil && !IsNil(o.OidcLoginType) {
		return true
	}

	return false
}

// SetOidcLoginType gets a reference to the given OidcLoginType and assigns it to the OidcLoginType field.
func (o *WebSession) SetOidcLoginType(v OidcLoginType) {
	o.OidcLoginType = &v
}

// GetWebStorageType returns the WebStorageType field value if set, zero value otherwise.
func (o *WebSession) GetWebStorageType() WebStorageType {
	if o == nil || IsNil(o.WebStorageType) {
		var ret WebStorageType
		return ret
	}
	return *o.WebStorageType
}

// GetWebStorageTypeOk returns a tuple with the WebStorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetWebStorageTypeOk() (*WebStorageType, bool) {
	if o == nil || IsNil(o.WebStorageType) {
		return nil, false
	}
	return o.WebStorageType, true
}

// HasWebStorageType returns a boolean if a field has been set.
func (o *WebSession) HasWebStorageType() bool {
	if o != nil && !IsNil(o.WebStorageType) {
		return true
	}

	return false
}

// SetWebStorageType gets a reference to the given WebStorageType and assigns it to the WebStorageType field.
func (o *WebSession) SetWebStorageType(v WebStorageType) {
	o.WebStorageType = &v
}

// GetPkceChallengeType returns the PkceChallengeType field value if set, zero value otherwise.
func (o *WebSession) GetPkceChallengeType() PkceChallengeType {
	if o == nil || IsNil(o.PkceChallengeType) {
		var ret PkceChallengeType
		return ret
	}
	return *o.PkceChallengeType
}

// GetPkceChallengeTypeOk returns a tuple with the PkceChallengeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetPkceChallengeTypeOk() (*PkceChallengeType, bool) {
	if o == nil || IsNil(o.PkceChallengeType) {
		return nil, false
	}
	return o.PkceChallengeType, true
}

// HasPkceChallengeType returns a boolean if a field has been set.
func (o *WebSession) HasPkceChallengeType() bool {
	if o != nil && !IsNil(o.PkceChallengeType) {
		return true
	}

	return false
}

// SetPkceChallengeType gets a reference to the given PkceChallengeType and assigns it to the PkceChallengeType field.
func (o *WebSession) SetPkceChallengeType(v PkceChallengeType) {
	o.PkceChallengeType = &v
}

// GetTimeoutGroovyScript returns the TimeoutGroovyScript field value if set, zero value otherwise.
func (o *WebSession) GetTimeoutGroovyScript() string {
	if o == nil || IsNil(o.TimeoutGroovyScript) {
		var ret string
		return ret
	}
	return *o.TimeoutGroovyScript
}

// GetTimeoutGroovyScriptOk returns a tuple with the TimeoutGroovyScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetTimeoutGroovyScriptOk() (*string, bool) {
	if o == nil || IsNil(o.TimeoutGroovyScript) {
		return nil, false
	}
	return o.TimeoutGroovyScript, true
}

// HasTimeoutGroovyScript returns a boolean if a field has been set.
func (o *WebSession) HasTimeoutGroovyScript() bool {
	if o != nil && !IsNil(o.TimeoutGroovyScript) {
		return true
	}

	return false
}

// SetTimeoutGroovyScript gets a reference to the given string and assigns it to the TimeoutGroovyScript field.
func (o *WebSession) SetTimeoutGroovyScript(v string) {
	o.TimeoutGroovyScript = &v
}

// GetClientCredentials returns the ClientCredentials field value
func (o *WebSession) GetClientCredentials() OAuthClientCredentials {
	if o == nil {
		var ret OAuthClientCredentials
		return ret
	}

	return o.ClientCredentials
}

// GetClientCredentialsOk returns a tuple with the ClientCredentials field value
// and a boolean to check if the value has been set.
func (o *WebSession) GetClientCredentialsOk() (*OAuthClientCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientCredentials, true
}

// SetClientCredentials sets field value
func (o *WebSession) SetClientCredentials(v OAuthClientCredentials) {
	o.ClientCredentials = v
}

// GetCookieDomain returns the CookieDomain field value if set, zero value otherwise.
func (o *WebSession) GetCookieDomain() string {
	if o == nil || IsNil(o.CookieDomain) {
		var ret string
		return ret
	}
	return *o.CookieDomain
}

// GetCookieDomainOk returns a tuple with the CookieDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetCookieDomainOk() (*string, bool) {
	if o == nil || IsNil(o.CookieDomain) {
		return nil, false
	}
	return o.CookieDomain, true
}

// HasCookieDomain returns a boolean if a field has been set.
func (o *WebSession) HasCookieDomain() bool {
	if o != nil && !IsNil(o.CookieDomain) {
		return true
	}

	return false
}

// SetCookieDomain gets a reference to the given string and assigns it to the CookieDomain field.
func (o *WebSession) SetCookieDomain(v string) {
	o.CookieDomain = &v
}

// GetFailOnUnsupportedPreservationContentType returns the FailOnUnsupportedPreservationContentType field value
func (o *WebSession) GetFailOnUnsupportedPreservationContentType() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FailOnUnsupportedPreservationContentType
}

// GetFailOnUnsupportedPreservationContentTypeOk returns a tuple with the FailOnUnsupportedPreservationContentType field value
// and a boolean to check if the value has been set.
func (o *WebSession) GetFailOnUnsupportedPreservationContentTypeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailOnUnsupportedPreservationContentType, true
}

// SetFailOnUnsupportedPreservationContentType sets field value
func (o *WebSession) SetFailOnUnsupportedPreservationContentType(v bool) {
	o.FailOnUnsupportedPreservationContentType = v
}

// GetPfsessionStateCacheInSeconds returns the PfsessionStateCacheInSeconds field value if set, zero value otherwise.
func (o *WebSession) GetPfsessionStateCacheInSeconds() int64 {
	if o == nil || IsNil(o.PfsessionStateCacheInSeconds) {
		var ret int64
		return ret
	}
	return *o.PfsessionStateCacheInSeconds
}

// GetPfsessionStateCacheInSecondsOk returns a tuple with the PfsessionStateCacheInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSession) GetPfsessionStateCacheInSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.PfsessionStateCacheInSeconds) {
		return nil, false
	}
	return o.PfsessionStateCacheInSeconds, true
}

// HasPfsessionStateCacheInSeconds returns a boolean if a field has been set.
func (o *WebSession) HasPfsessionStateCacheInSeconds() bool {
	if o != nil && !IsNil(o.PfsessionStateCacheInSeconds) {
		return true
	}

	return false
}

// SetPfsessionStateCacheInSeconds gets a reference to the given int64 and assigns it to the PfsessionStateCacheInSeconds field.
func (o *WebSession) SetPfsessionStateCacheInSeconds(v int64) {
	o.PfsessionStateCacheInSeconds = &v
}

func (o WebSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.RequestPreservationType) {
		toSerialize["requestPreservationType"] = o.RequestPreservationType
	}
	if !IsNil(o.EnablePushAuthorization) {
		toSerialize["enablePushAuthorization"] = o.EnablePushAuthorization
	}
	if !IsNil(o.SessionTimeoutInMinutes) {
		toSerialize["sessionTimeoutInMinutes"] = o.SessionTimeoutInMinutes
	}
	if !IsNil(o.ValidateSessionIsAlive) {
		toSerialize["validateSessionIsAlive"] = o.ValidateSessionIsAlive
	}
	if !IsNil(o.SendRequestedUrlToProvider) {
		toSerialize["sendRequestedUrlToProvider"] = o.SendRequestedUrlToProvider
	}
	if !IsNil(o.RefreshUserInfoClaimsInterval) {
		toSerialize["refreshUserInfoClaimsInterval"] = o.RefreshUserInfoClaimsInterval
	}
	if !IsNil(o.ProvideAuthenticationFeedback) {
		toSerialize["provideAuthenticationFeedback"] = o.ProvideAuthenticationFeedback
	}
	if !IsNil(o.CacheUserAttributes) {
		toSerialize["cacheUserAttributes"] = o.CacheUserAttributes
	}
	if !IsNil(o.EnableRefreshUser) {
		toSerialize["enableRefreshUser"] = o.EnableRefreshUser
	}
	if !IsNil(o.RequestProfile) {
		toSerialize["requestProfile"] = o.RequestProfile
	}
	if !IsNil(o.PromptParameter) {
		toSerialize["promptParameter"] = o.PromptParameter
	}
	if !IsNil(o.SecureCookie) {
		toSerialize["secureCookie"] = o.SecureCookie
	}
	if !IsNil(o.HttpOnlyCookie) {
		toSerialize["httpOnlyCookie"] = o.HttpOnlyCookie
	}
	if !IsNil(o.IdleTimeoutInMinutes) {
		toSerialize["idleTimeoutInMinutes"] = o.IdleTimeoutInMinutes
	}
	toSerialize["audience"] = o.Audience
	if !IsNil(o.CookieType) {
		toSerialize["cookieType"] = o.CookieType
	}
	if !IsNil(o.SameSite) {
		toSerialize["sameSite"] = o.SameSite
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.OidcLoginType) {
		toSerialize["oidcLoginType"] = o.OidcLoginType
	}
	if !IsNil(o.WebStorageType) {
		toSerialize["webStorageType"] = o.WebStorageType
	}
	if !IsNil(o.PkceChallengeType) {
		toSerialize["pkceChallengeType"] = o.PkceChallengeType
	}
	if !IsNil(o.TimeoutGroovyScript) {
		toSerialize["timeoutGroovyScript"] = o.TimeoutGroovyScript
	}
	toSerialize["clientCredentials"] = o.ClientCredentials
	if !IsNil(o.CookieDomain) {
		toSerialize["cookieDomain"] = o.CookieDomain
	}
	toSerialize["failOnUnsupportedPreservationContentType"] = o.FailOnUnsupportedPreservationContentType
	if !IsNil(o.PfsessionStateCacheInSeconds) {
		toSerialize["pfsessionStateCacheInSeconds"] = o.PfsessionStateCacheInSeconds
	}
	return toSerialize, nil
}

type NullableWebSession struct {
	value *WebSession
	isSet bool
}

func (v NullableWebSession) Get() *WebSession {
	return v.value
}

func (v *NullableWebSession) Set(val *WebSession) {
	v.value = val
	v.isSet = true
}

func (v NullableWebSession) IsSet() bool {
	return v.isSet
}

func (v *NullableWebSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebSession(val *WebSession) *NullableWebSession {
	return &NullableWebSession{value: val, isSet: true}
}

func (v NullableWebSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
