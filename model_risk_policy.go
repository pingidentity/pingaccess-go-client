/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RiskPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPolicy{}

// RiskPolicy A risk policy.
type RiskPolicy struct {
	// (sortable) The class name of the risk policy implementation.
	ClassName string `json:"className"`
	// When creating a new RiskPolicy, this is the ID for the RiskPolicy. If not specified, an ID will be automatically assigned. When updating an existing RiskPolicy, this field is ignored and the ID is determined by the path parameter.
	Id *int64 `json:"id,omitempty"`
	// (sortable) The name of the risk policy.
	Name string `json:"name"`
	// The configuration data  of the risk policy. - This value is a PingAccess plugin configuration (JSON).
	Configuration map[string]interface{} `json:"configuration,omitempty"`
}

// NewRiskPolicy instantiates a new RiskPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPolicy(className string, name string) *RiskPolicy {
	this := RiskPolicy{}
	this.ClassName = className
	this.Name = name
	return &this
}

// NewRiskPolicyWithDefaults instantiates a new RiskPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPolicyWithDefaults() *RiskPolicy {
	this := RiskPolicy{}
	return &this
}

// GetClassName returns the ClassName field value
func (o *RiskPolicy) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *RiskPolicy) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *RiskPolicy) SetClassName(v string) {
	o.ClassName = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RiskPolicy) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPolicy) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RiskPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RiskPolicy) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *RiskPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RiskPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RiskPolicy) SetName(v string) {
	o.Name = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *RiskPolicy) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPolicy) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *RiskPolicy) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *RiskPolicy) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

func (o RiskPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["className"] = o.ClassName
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableRiskPolicy struct {
	value *RiskPolicy
	isSet bool
}

func (v NullableRiskPolicy) Get() *RiskPolicy {
	return v.value
}

func (v *NullableRiskPolicy) Set(val *RiskPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPolicy(val *RiskPolicy) *NullableRiskPolicy {
	return &NullableRiskPolicy{value: val, isSet: true}
}

func (v NullableRiskPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
