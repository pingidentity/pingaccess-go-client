/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TargetHostPort A redirect target.
type TargetHostPort struct {
	// The hostname.
	Host string `json:"host"`
	// The port number.
	Port int32 `json:"port"`
	// True if the target host expects HTTPS connections.
	Secure bool `json:"secure"`
}

// NewTargetHostPort instantiates a new TargetHostPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetHostPort(host string, port int32, secure bool) *TargetHostPort {
	this := TargetHostPort{}
	this.Host = host
	this.Port = port
	this.Secure = secure
	return &this
}

// NewTargetHostPortWithDefaults instantiates a new TargetHostPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetHostPortWithDefaults() *TargetHostPort {
	this := TargetHostPort{}
	return &this
}

// GetHost returns the Host field value
func (o *TargetHostPort) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *TargetHostPort) GetHostOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *TargetHostPort) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *TargetHostPort) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *TargetHostPort) GetPortOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *TargetHostPort) SetPort(v int32) {
	o.Port = v
}

// GetSecure returns the Secure field value
func (o *TargetHostPort) GetSecure() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Secure
}

// GetSecureOk returns a tuple with the Secure field value
// and a boolean to check if the value has been set.
func (o *TargetHostPort) GetSecureOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Secure, true
}

// SetSecure sets field value
func (o *TargetHostPort) SetSecure(v bool) {
	o.Secure = v
}

func (o TargetHostPort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["secure"] = o.Secure
	}
	return json.Marshal(toSerialize)
}

type NullableTargetHostPort struct {
	value *TargetHostPort
	isSet bool
}

func (v NullableTargetHostPort) Get() *TargetHostPort {
	return v.value
}

func (v *NullableTargetHostPort) Set(val *TargetHostPort) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetHostPort) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetHostPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetHostPort(val *TargetHostPort) *NullableTargetHostPort {
	return &NullableTargetHostPort{value: val, isSet: true}
}

func (v NullableTargetHostPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetHostPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


