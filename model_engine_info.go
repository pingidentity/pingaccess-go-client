/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EngineInfo struct for EngineInfo
type EngineInfo struct {
	PollingDelay int64 `json:"pollingDelay"`
	LastUpdated int64 `json:"lastUpdated"`
	Description string `json:"description"`
	Name string `json:"name"`
}

// NewEngineInfo instantiates a new EngineInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngineInfo(pollingDelay int64, lastUpdated int64, description string, name string) *EngineInfo {
	this := EngineInfo{}
	this.PollingDelay = pollingDelay
	this.LastUpdated = lastUpdated
	this.Description = description
	this.Name = name
	return &this
}

// NewEngineInfoWithDefaults instantiates a new EngineInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineInfoWithDefaults() *EngineInfo {
	this := EngineInfo{}
	return &this
}

// GetPollingDelay returns the PollingDelay field value
func (o *EngineInfo) GetPollingDelay() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PollingDelay
}

// GetPollingDelayOk returns a tuple with the PollingDelay field value
// and a boolean to check if the value has been set.
func (o *EngineInfo) GetPollingDelayOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PollingDelay, true
}

// SetPollingDelay sets field value
func (o *EngineInfo) SetPollingDelay(v int64) {
	o.PollingDelay = v
}

// GetLastUpdated returns the LastUpdated field value
func (o *EngineInfo) GetLastUpdated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *EngineInfo) GetLastUpdatedOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *EngineInfo) SetLastUpdated(v int64) {
	o.LastUpdated = v
}

// GetDescription returns the Description field value
func (o *EngineInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EngineInfo) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EngineInfo) SetDescription(v string) {
	o.Description = v
}

// GetName returns the Name field value
func (o *EngineInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EngineInfo) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EngineInfo) SetName(v string) {
	o.Name = v
}

func (o EngineInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pollingDelay"] = o.PollingDelay
	}
	if true {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableEngineInfo struct {
	value *EngineInfo
	isSet bool
}

func (v NullableEngineInfo) Get() *EngineInfo {
	return v.value
}

func (v *NullableEngineInfo) Set(val *EngineInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineInfo(val *EngineInfo) *NullableEngineInfo {
	return &NullableEngineInfo{value: val, isSet: true}
}

func (v NullableEngineInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


