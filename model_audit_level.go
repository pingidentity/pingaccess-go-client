/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AuditLevel the model 'AuditLevel'
type AuditLevel string

// List of AuditLevel
const (
	AUDITLEVEL_ON AuditLevel = "ON"
	AUDITLEVEL_OFF AuditLevel = "OFF"
)

// All allowed values of AuditLevel enum
var AllowedAuditLevelEnumValues = []AuditLevel{
	"ON",
	"OFF",
}

func (v *AuditLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuditLevel(value)
	for _, existing := range AllowedAuditLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditLevel", value)
}

// NewAuditLevelFromValue returns a pointer to a valid AuditLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditLevelFromValue(v string) (*AuditLevel, error) {
	ev := AuditLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditLevel: valid values are %v", v, AllowedAuditLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditLevel) IsValid() bool {
	for _, existing := range AllowedAuditLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuditLevel value
func (v AuditLevel) Ptr() *AuditLevel {
	return &v
}

type NullableAuditLevel struct {
	value *AuditLevel
	isSet bool
}

func (v NullableAuditLevel) Get() *AuditLevel {
	return v.value
}

func (v *NullableAuditLevel) Set(val *AuditLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLevel(val *AuditLevel) *NullableAuditLevel {
	return &NullableAuditLevel{value: val, isSet: true}
}

func (v NullableAuditLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

