/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Redirect A Redirect.
type Redirect struct {
	// When creating a new Redirect, this is the ID for the Redirect. If not specified, an ID will be automatically assigned. When updating an existing Redirect, this field is ignored and the ID is determined by the path parameter.
	Id *string `json:"id,omitempty"`
	Source *HostPort `json:"source,omitempty"`
	Target *TargetHostPort `json:"target,omitempty"`
	// (sortable) The Redirect HTTP status code used by the response.
	ResponseCode *int32 `json:"responseCode,omitempty"`
	AuditLevel *AuditLevel `json:"auditLevel,omitempty"`
}

// NewRedirect instantiates a new Redirect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirect() *Redirect {
	this := Redirect{}
	return &this
}

// NewRedirectWithDefaults instantiates a new Redirect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectWithDefaults() *Redirect {
	this := Redirect{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Redirect) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Redirect) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Redirect) SetId(v string) {
	o.Id = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Redirect) GetSource() HostPort {
	if o == nil || isNil(o.Source) {
		var ret HostPort
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetSourceOk() (*HostPort, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Redirect) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given HostPort and assigns it to the Source field.
func (o *Redirect) SetSource(v HostPort) {
	o.Source = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *Redirect) GetTarget() TargetHostPort {
	if o == nil || isNil(o.Target) {
		var ret TargetHostPort
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetTargetOk() (*TargetHostPort, bool) {
	if o == nil || isNil(o.Target) {
    return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Redirect) HasTarget() bool {
	if o != nil && !isNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given TargetHostPort and assigns it to the Target field.
func (o *Redirect) SetTarget(v TargetHostPort) {
	o.Target = &v
}

// GetResponseCode returns the ResponseCode field value if set, zero value otherwise.
func (o *Redirect) GetResponseCode() int32 {
	if o == nil || isNil(o.ResponseCode) {
		var ret int32
		return ret
	}
	return *o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetResponseCodeOk() (*int32, bool) {
	if o == nil || isNil(o.ResponseCode) {
    return nil, false
	}
	return o.ResponseCode, true
}

// HasResponseCode returns a boolean if a field has been set.
func (o *Redirect) HasResponseCode() bool {
	if o != nil && !isNil(o.ResponseCode) {
		return true
	}

	return false
}

// SetResponseCode gets a reference to the given int32 and assigns it to the ResponseCode field.
func (o *Redirect) SetResponseCode(v int32) {
	o.ResponseCode = &v
}

// GetAuditLevel returns the AuditLevel field value if set, zero value otherwise.
func (o *Redirect) GetAuditLevel() AuditLevel {
	if o == nil || isNil(o.AuditLevel) {
		var ret AuditLevel
		return ret
	}
	return *o.AuditLevel
}

// GetAuditLevelOk returns a tuple with the AuditLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetAuditLevelOk() (*AuditLevel, bool) {
	if o == nil || isNil(o.AuditLevel) {
    return nil, false
	}
	return o.AuditLevel, true
}

// HasAuditLevel returns a boolean if a field has been set.
func (o *Redirect) HasAuditLevel() bool {
	if o != nil && !isNil(o.AuditLevel) {
		return true
	}

	return false
}

// SetAuditLevel gets a reference to the given AuditLevel and assigns it to the AuditLevel field.
func (o *Redirect) SetAuditLevel(v AuditLevel) {
	o.AuditLevel = &v
}

func (o Redirect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !isNil(o.ResponseCode) {
		toSerialize["responseCode"] = o.ResponseCode
	}
	if !isNil(o.AuditLevel) {
		toSerialize["auditLevel"] = o.AuditLevel
	}
	return json.Marshal(toSerialize)
}

type NullableRedirect struct {
	value *Redirect
	isSet bool
}

func (v NullableRedirect) Get() *Redirect {
	return v.value
}

func (v *NullableRedirect) Set(val *Redirect) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirect) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirect(val *Redirect) *NullableRedirect {
	return &NullableRedirect{value: val, isSet: true}
}

func (v NullableRedirect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


