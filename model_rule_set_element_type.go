/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// RuleSetElementType the model 'RuleSetElementType'
type RuleSetElementType string

// List of RuleSetElementType
const (
	RULESETELEMENTTYPE_RULE     RuleSetElementType = "Rule"
	RULESETELEMENTTYPE_RULE_SET RuleSetElementType = "RuleSet"
)

// All allowed values of RuleSetElementType enum
var AllowedRuleSetElementTypeEnumValues = []RuleSetElementType{
	"Rule",
	"RuleSet",
}

func (v *RuleSetElementType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleSetElementType(value)
	for _, existing := range AllowedRuleSetElementTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleSetElementType", value)
}

// NewRuleSetElementTypeFromValue returns a pointer to a valid RuleSetElementType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleSetElementTypeFromValue(v string) (*RuleSetElementType, error) {
	ev := RuleSetElementType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleSetElementType: valid values are %v", v, AllowedRuleSetElementTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleSetElementType) IsValid() bool {
	for _, existing := range AllowedRuleSetElementTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleSetElementType value
func (v RuleSetElementType) Ptr() *RuleSetElementType {
	return &v
}

type NullableRuleSetElementType struct {
	value *RuleSetElementType
	isSet bool
}

func (v NullableRuleSetElementType) Get() *RuleSetElementType {
	return v.value
}

func (v *NullableRuleSetElementType) Set(val *RuleSetElementType) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleSetElementType) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleSetElementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleSetElementType(val *RuleSetElementType) *NullableRuleSetElementType {
	return &NullableRuleSetElementType{value: val, isSet: true}
}

func (v NullableRuleSetElementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleSetElementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
