/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigurationParentField Configuration of the parent field.
type ConfigurationParentField struct {
	// The configuration parent field name.
	FieldName string `json:"fieldName"`
	// The dependent field options attributes.
	DependentFieldOptions []ConfigurationDependentFieldOption `json:"dependentFieldOptions"`
}

// NewConfigurationParentField instantiates a new ConfigurationParentField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationParentField(fieldName string, dependentFieldOptions []ConfigurationDependentFieldOption) *ConfigurationParentField {
	this := ConfigurationParentField{}
	this.FieldName = fieldName
	this.DependentFieldOptions = dependentFieldOptions
	return &this
}

// NewConfigurationParentFieldWithDefaults instantiates a new ConfigurationParentField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationParentFieldWithDefaults() *ConfigurationParentField {
	this := ConfigurationParentField{}
	return &this
}

// GetFieldName returns the FieldName field value
func (o *ConfigurationParentField) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *ConfigurationParentField) GetFieldNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *ConfigurationParentField) SetFieldName(v string) {
	o.FieldName = v
}

// GetDependentFieldOptions returns the DependentFieldOptions field value
func (o *ConfigurationParentField) GetDependentFieldOptions() []ConfigurationDependentFieldOption {
	if o == nil {
		var ret []ConfigurationDependentFieldOption
		return ret
	}

	return o.DependentFieldOptions
}

// GetDependentFieldOptionsOk returns a tuple with the DependentFieldOptions field value
// and a boolean to check if the value has been set.
func (o *ConfigurationParentField) GetDependentFieldOptionsOk() ([]ConfigurationDependentFieldOption, bool) {
	if o == nil {
    return nil, false
	}
	return o.DependentFieldOptions, true
}

// SetDependentFieldOptions sets field value
func (o *ConfigurationParentField) SetDependentFieldOptions(v []ConfigurationDependentFieldOption) {
	o.DependentFieldOptions = v
}

func (o ConfigurationParentField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fieldName"] = o.FieldName
	}
	if true {
		toSerialize["dependentFieldOptions"] = o.DependentFieldOptions
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationParentField struct {
	value *ConfigurationParentField
	isSet bool
}

func (v NullableConfigurationParentField) Get() *ConfigurationParentField {
	return v.value
}

func (v *NullableConfigurationParentField) Set(val *ConfigurationParentField) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationParentField) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationParentField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationParentField(val *ConfigurationParentField) *NullableConfigurationParentField {
	return &NullableConfigurationParentField{value: val, isSet: true}
}

func (v NullableConfigurationParentField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationParentField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


