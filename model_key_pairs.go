/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeyPairs A collection of key pairs.
type KeyPairs struct {
	// The actual list of key pairs.
	Items []KeyPair `json:"items"`
}

// NewKeyPairs instantiates a new KeyPairs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPairs(items []KeyPair) *KeyPairs {
	this := KeyPairs{}
	this.Items = items
	return &this
}

// NewKeyPairsWithDefaults instantiates a new KeyPairs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPairsWithDefaults() *KeyPairs {
	this := KeyPairs{}
	return &this
}

// GetItems returns the Items field value
func (o *KeyPairs) GetItems() []KeyPair {
	if o == nil {
		var ret []KeyPair
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *KeyPairs) GetItemsOk() ([]KeyPair, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *KeyPairs) SetItems(v []KeyPair) {
	o.Items = v
}

func (o KeyPairs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableKeyPairs struct {
	value *KeyPairs
	isSet bool
}

func (v NullableKeyPairs) Get() *KeyPairs {
	return v.value
}

func (v *NullableKeyPairs) Set(val *KeyPairs) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPairs) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPairs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPairs(val *KeyPairs) *NullableKeyPairs {
	return &NullableKeyPairs{value: val, isSet: true}
}

func (v NullableKeyPairs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPairs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


