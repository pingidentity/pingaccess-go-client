/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the PingOneConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingOneConnection{}

// PingOneConnection A PingOne Connection.
type PingOneConnection struct {
	// When creating a new PingOneConnection, this is the ID for the PingOneConnection. If not specified, an ID will be automatically assigned. When updating an existing PingOneConnection, this field is ignored and the ID is determined by the path parameter.
	Id *string `json:"id,omitempty"`
	// (sortable) A unique name for the PingOne Connection
	Name string `json:"name"`
	// (sortable) The description of the PingOne Connection.
	Description *string      `json:"description,omitempty"`
	Credential  *HiddenField `json:"credential,omitempty"`
	// (sortable) True if a proxy should be used for HTTPS requests to PingOne.
	UseProxy *bool `json:"useProxy,omitempty"`
	// The group of certificates to use when communicating to PingOne through this connection.
	TrustedCertificateGroupId *int64 `json:"trustedCertificateGroupId,omitempty"`
	// Array of SSL protocols to use for HTTPS requests. Empty to use all available protocols.
	SslProtocols []string `json:"sslProtocols"`
	// Array of SSL ciphers to use for HTTPS requests. Empty to use all available ciphers.
	SslCiphers []string `json:"sslCiphers"`
}

// NewPingOneConnection instantiates a new PingOneConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingOneConnection(name string, sslProtocols []string, sslCiphers []string) *PingOneConnection {
	this := PingOneConnection{}
	this.Name = name
	this.SslProtocols = sslProtocols
	this.SslCiphers = sslCiphers
	return &this
}

// NewPingOneConnectionWithDefaults instantiates a new PingOneConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingOneConnectionWithDefaults() *PingOneConnection {
	this := PingOneConnection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PingOneConnection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PingOneConnection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PingOneConnection) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *PingOneConnection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PingOneConnection) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PingOneConnection) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PingOneConnection) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PingOneConnection) SetDescription(v string) {
	o.Description = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *PingOneConnection) GetCredential() HiddenField {
	if o == nil || IsNil(o.Credential) {
		var ret HiddenField
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetCredentialOk() (*HiddenField, bool) {
	if o == nil || IsNil(o.Credential) {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *PingOneConnection) HasCredential() bool {
	if o != nil && !IsNil(o.Credential) {
		return true
	}

	return false
}

// SetCredential gets a reference to the given HiddenField and assigns it to the Credential field.
func (o *PingOneConnection) SetCredential(v HiddenField) {
	o.Credential = &v
}

// GetUseProxy returns the UseProxy field value if set, zero value otherwise.
func (o *PingOneConnection) GetUseProxy() bool {
	if o == nil || IsNil(o.UseProxy) {
		var ret bool
		return ret
	}
	return *o.UseProxy
}

// GetUseProxyOk returns a tuple with the UseProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetUseProxyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseProxy) {
		return nil, false
	}
	return o.UseProxy, true
}

// HasUseProxy returns a boolean if a field has been set.
func (o *PingOneConnection) HasUseProxy() bool {
	if o != nil && !IsNil(o.UseProxy) {
		return true
	}

	return false
}

// SetUseProxy gets a reference to the given bool and assigns it to the UseProxy field.
func (o *PingOneConnection) SetUseProxy(v bool) {
	o.UseProxy = &v
}

// GetTrustedCertificateGroupId returns the TrustedCertificateGroupId field value if set, zero value otherwise.
func (o *PingOneConnection) GetTrustedCertificateGroupId() int64 {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		var ret int64
		return ret
	}
	return *o.TrustedCertificateGroupId
}

// GetTrustedCertificateGroupIdOk returns a tuple with the TrustedCertificateGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetTrustedCertificateGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		return nil, false
	}
	return o.TrustedCertificateGroupId, true
}

// HasTrustedCertificateGroupId returns a boolean if a field has been set.
func (o *PingOneConnection) HasTrustedCertificateGroupId() bool {
	if o != nil && !IsNil(o.TrustedCertificateGroupId) {
		return true
	}

	return false
}

// SetTrustedCertificateGroupId gets a reference to the given int64 and assigns it to the TrustedCertificateGroupId field.
func (o *PingOneConnection) SetTrustedCertificateGroupId(v int64) {
	o.TrustedCertificateGroupId = &v
}

// GetSslProtocols returns the SslProtocols field value
func (o *PingOneConnection) GetSslProtocols() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SslProtocols
}

// GetSslProtocolsOk returns a tuple with the SslProtocols field value
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetSslProtocolsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SslProtocols, true
}

// SetSslProtocols sets field value
func (o *PingOneConnection) SetSslProtocols(v []string) {
	o.SslProtocols = v
}

// GetSslCiphers returns the SslCiphers field value
func (o *PingOneConnection) GetSslCiphers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SslCiphers
}

// GetSslCiphersOk returns a tuple with the SslCiphers field value
// and a boolean to check if the value has been set.
func (o *PingOneConnection) GetSslCiphersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SslCiphers, true
}

// SetSslCiphers sets field value
func (o *PingOneConnection) SetSslCiphers(v []string) {
	o.SslCiphers = v
}

func (o PingOneConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingOneConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Credential) {
		toSerialize["credential"] = o.Credential
	}
	if !IsNil(o.UseProxy) {
		toSerialize["useProxy"] = o.UseProxy
	}
	if !IsNil(o.TrustedCertificateGroupId) {
		toSerialize["trustedCertificateGroupId"] = o.TrustedCertificateGroupId
	}
	toSerialize["sslProtocols"] = o.SslProtocols
	toSerialize["sslCiphers"] = o.SslCiphers
	return toSerialize, nil
}

type NullablePingOneConnection struct {
	value *PingOneConnection
	isSet bool
}

func (v NullablePingOneConnection) Get() *PingOneConnection {
	return v.value
}

func (v *NullablePingOneConnection) Set(val *PingOneConnection) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOneConnection) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOneConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOneConnection(val *PingOneConnection) *NullablePingOneConnection {
	return &NullablePingOneConnection{value: val, isSet: true}
}

func (v NullablePingOneConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOneConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
