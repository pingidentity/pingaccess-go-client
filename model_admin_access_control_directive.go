/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AdminAccessControlDirective the model 'AdminAccessControlDirective'
type AdminAccessControlDirective string

// List of AdminAccessControlDirective
const (
	ADMINACCESSCONTROLDIRECTIVE_DENY_POLICY_CONFIGURATION AdminAccessControlDirective = "DENY_POLICY_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_APPLICATION_CREATION AdminAccessControlDirective = "DENY_APPLICATION_CREATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_API_APPLICATION_CREATION AdminAccessControlDirective = "DENY_API_APPLICATION_CREATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_AUTH_REQ_CREATION AdminAccessControlDirective = "DENY_AUTH_REQ_CREATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_PING_FEDERATE_CONFIGURATION AdminAccessControlDirective = "DENY_PING_FEDERATE_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_THIRD_PARTY_OAUTH_CONFIGURATION AdminAccessControlDirective = "DENY_THIRD_PARTY_OAUTH_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_XPOST_WEBSESSION_CONFIGURATION AdminAccessControlDirective = "DENY_XPOST_WEBSESSION_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_POST_WEBSESSION_CONFIGURATION AdminAccessControlDirective = "DENY_POST_WEBSESSION_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_REQUIRE_AAD_TOKEN_PROVIDER_ISSUER AdminAccessControlDirective = "REQUIRE_AAD_TOKEN_PROVIDER_ISSUER"
	ADMINACCESSCONTROLDIRECTIVE_DENY_API_AUTHENTICATION_CONFIGURATION AdminAccessControlDirective = "DENY_API_AUTHENTICATION_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_CUSTOM_SITE_AUTHENTICATOR_CREATION AdminAccessControlDirective = "DENY_CUSTOM_SITE_AUTHENTICATOR_CREATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_CUSTOM_LOAD_BALANCING_STRATEGY_CREATION AdminAccessControlDirective = "DENY_CUSTOM_LOAD_BALANCING_STRATEGY_CREATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_CUSTOM_AVAILABILITY_PROFILE_CREATION AdminAccessControlDirective = "DENY_CUSTOM_AVAILABILITY_PROFILE_CREATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_CUSTOM_IDENTITY_MAPPING_CREATION AdminAccessControlDirective = "DENY_CUSTOM_IDENTITY_MAPPING_CREATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_ADMIN_AUTHENTICATION_CONFIGURATION AdminAccessControlDirective = "DENY_ADMIN_AUTHENTICATION_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_ENVIRONMENT_CONFIGURATION AdminAccessControlDirective = "DENY_ENVIRONMENT_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_USERS_CONFIGURATION AdminAccessControlDirective = "DENY_USERS_CONFIGURATION"
	ADMINACCESSCONTROLDIRECTIVE_DENY_WRITE_ACCESS AdminAccessControlDirective = "DENY_WRITE_ACCESS"
	ADMINACCESSCONTROLDIRECTIVE_DENY_BULK_CONFIG_ACCESS AdminAccessControlDirective = "DENY_BULK_CONFIG_ACCESS"
)

// All allowed values of AdminAccessControlDirective enum
var AllowedAdminAccessControlDirectiveEnumValues = []AdminAccessControlDirective{
	"DENY_POLICY_CONFIGURATION",
	"DENY_APPLICATION_CREATION",
	"DENY_API_APPLICATION_CREATION",
	"DENY_AUTH_REQ_CREATION",
	"DENY_PING_FEDERATE_CONFIGURATION",
	"DENY_THIRD_PARTY_OAUTH_CONFIGURATION",
	"DENY_XPOST_WEBSESSION_CONFIGURATION",
	"DENY_POST_WEBSESSION_CONFIGURATION",
	"REQUIRE_AAD_TOKEN_PROVIDER_ISSUER",
	"DENY_API_AUTHENTICATION_CONFIGURATION",
	"DENY_CUSTOM_SITE_AUTHENTICATOR_CREATION",
	"DENY_CUSTOM_LOAD_BALANCING_STRATEGY_CREATION",
	"DENY_CUSTOM_AVAILABILITY_PROFILE_CREATION",
	"DENY_CUSTOM_IDENTITY_MAPPING_CREATION",
	"DENY_ADMIN_AUTHENTICATION_CONFIGURATION",
	"DENY_ENVIRONMENT_CONFIGURATION",
	"DENY_USERS_CONFIGURATION",
	"DENY_WRITE_ACCESS",
	"DENY_BULK_CONFIG_ACCESS",
}

func (v *AdminAccessControlDirective) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminAccessControlDirective(value)
	for _, existing := range AllowedAdminAccessControlDirectiveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminAccessControlDirective", value)
}

// NewAdminAccessControlDirectiveFromValue returns a pointer to a valid AdminAccessControlDirective
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminAccessControlDirectiveFromValue(v string) (*AdminAccessControlDirective, error) {
	ev := AdminAccessControlDirective(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminAccessControlDirective: valid values are %v", v, AllowedAdminAccessControlDirectiveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminAccessControlDirective) IsValid() bool {
	for _, existing := range AllowedAdminAccessControlDirectiveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminAccessControlDirective value
func (v AdminAccessControlDirective) Ptr() *AdminAccessControlDirective {
	return &v
}

type NullableAdminAccessControlDirective struct {
	value *AdminAccessControlDirective
	isSet bool
}

func (v NullableAdminAccessControlDirective) Get() *AdminAccessControlDirective {
	return v.value
}

func (v *NullableAdminAccessControlDirective) Set(val *AdminAccessControlDirective) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminAccessControlDirective) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminAccessControlDirective) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminAccessControlDirective(val *AdminAccessControlDirective) *NullableAdminAccessControlDirective {
	return &NullableAdminAccessControlDirective{value: val, isSet: true}
}

func (v NullableAdminAccessControlDirective) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminAccessControlDirective) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

