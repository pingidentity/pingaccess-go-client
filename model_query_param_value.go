/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QueryParamValue struct for QueryParamValue
type QueryParamValue struct {
	// The string value of the query parameter value.
	Pattern *string `json:"pattern,omitempty"`
	Type *QueryParamPatternType `json:"type,omitempty"`
	// Matching any value. Ignoring the specified value.
	MatchAny *bool `json:"matchAny,omitempty"`
}

// NewQueryParamValue instantiates a new QueryParamValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryParamValue() *QueryParamValue {
	this := QueryParamValue{}
	return &this
}

// NewQueryParamValueWithDefaults instantiates a new QueryParamValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryParamValueWithDefaults() *QueryParamValue {
	this := QueryParamValue{}
	return &this
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *QueryParamValue) GetPattern() string {
	if o == nil || isNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryParamValue) GetPatternOk() (*string, bool) {
	if o == nil || isNil(o.Pattern) {
    return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *QueryParamValue) HasPattern() bool {
	if o != nil && !isNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *QueryParamValue) SetPattern(v string) {
	o.Pattern = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QueryParamValue) GetType() QueryParamPatternType {
	if o == nil || isNil(o.Type) {
		var ret QueryParamPatternType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryParamValue) GetTypeOk() (*QueryParamPatternType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QueryParamValue) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given QueryParamPatternType and assigns it to the Type field.
func (o *QueryParamValue) SetType(v QueryParamPatternType) {
	o.Type = &v
}

// GetMatchAny returns the MatchAny field value if set, zero value otherwise.
func (o *QueryParamValue) GetMatchAny() bool {
	if o == nil || isNil(o.MatchAny) {
		var ret bool
		return ret
	}
	return *o.MatchAny
}

// GetMatchAnyOk returns a tuple with the MatchAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryParamValue) GetMatchAnyOk() (*bool, bool) {
	if o == nil || isNil(o.MatchAny) {
    return nil, false
	}
	return o.MatchAny, true
}

// HasMatchAny returns a boolean if a field has been set.
func (o *QueryParamValue) HasMatchAny() bool {
	if o != nil && !isNil(o.MatchAny) {
		return true
	}

	return false
}

// SetMatchAny gets a reference to the given bool and assigns it to the MatchAny field.
func (o *QueryParamValue) SetMatchAny(v bool) {
	o.MatchAny = &v
}

func (o QueryParamValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.MatchAny) {
		toSerialize["matchAny"] = o.MatchAny
	}
	return json.Marshal(toSerialize)
}

type NullableQueryParamValue struct {
	value *QueryParamValue
	isSet bool
}

func (v NullableQueryParamValue) Get() *QueryParamValue {
	return v.value
}

func (v *NullableQueryParamValue) Set(val *QueryParamValue) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryParamValue) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryParamValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryParamValue(val *QueryParamValue) *NullableQueryParamValue {
	return &NullableQueryParamValue{value: val, isSet: true}
}

func (v NullableQueryParamValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryParamValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


