/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TrustedCertificateGroups A collection of trusted certificate group items.
type TrustedCertificateGroups struct {
	// The actual list of trusted certificate groups.
	Items []TrustedCertificateGroup `json:"items"`
}

// NewTrustedCertificateGroups instantiates a new TrustedCertificateGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustedCertificateGroups(items []TrustedCertificateGroup) *TrustedCertificateGroups {
	this := TrustedCertificateGroups{}
	this.Items = items
	return &this
}

// NewTrustedCertificateGroupsWithDefaults instantiates a new TrustedCertificateGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustedCertificateGroupsWithDefaults() *TrustedCertificateGroups {
	this := TrustedCertificateGroups{}
	return &this
}

// GetItems returns the Items field value
func (o *TrustedCertificateGroups) GetItems() []TrustedCertificateGroup {
	if o == nil {
		var ret []TrustedCertificateGroup
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroups) GetItemsOk() ([]TrustedCertificateGroup, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *TrustedCertificateGroups) SetItems(v []TrustedCertificateGroup) {
	o.Items = v
}

func (o TrustedCertificateGroups) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableTrustedCertificateGroups struct {
	value *TrustedCertificateGroups
	isSet bool
}

func (v NullableTrustedCertificateGroups) Get() *TrustedCertificateGroups {
	return v.value
}

func (v *NullableTrustedCertificateGroups) Set(val *TrustedCertificateGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedCertificateGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedCertificateGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedCertificateGroups(val *TrustedCertificateGroups) *NullableTrustedCertificateGroups {
	return &NullableTrustedCertificateGroups{value: val, isSet: true}
}

func (v NullableTrustedCertificateGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedCertificateGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


