/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the PathPattern type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PathPattern{}

// PathPattern A pattern for matching request URI paths.
type PathPattern struct {
	// The path-matching pattern, relative to the Application context root (interpreted according to the pattern 'type').
	Pattern *string          `json:"pattern,omitempty"`
	Type    *PathPatternType `json:"type,omitempty"`
}

// NewPathPattern instantiates a new PathPattern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPathPattern() *PathPattern {
	this := PathPattern{}
	return &this
}

// NewPathPatternWithDefaults instantiates a new PathPattern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathPatternWithDefaults() *PathPattern {
	this := PathPattern{}
	return &this
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *PathPattern) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathPattern) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *PathPattern) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *PathPattern) SetPattern(v string) {
	o.Pattern = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PathPattern) GetType() PathPatternType {
	if o == nil || IsNil(o.Type) {
		var ret PathPatternType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathPattern) GetTypeOk() (*PathPatternType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PathPattern) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PathPatternType and assigns it to the Type field.
func (o *PathPattern) SetType(v PathPatternType) {
	o.Type = &v
}

func (o PathPattern) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PathPattern) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePathPattern struct {
	value *PathPattern
	isSet bool
}

func (v NullablePathPattern) Get() *PathPattern {
	return v.value
}

func (v *NullablePathPattern) Set(val *PathPattern) {
	v.value = val
	v.isSet = true
}

func (v NullablePathPattern) IsSet() bool {
	return v.isSet
}

func (v *NullablePathPattern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathPattern(val *PathPattern) *NullablePathPattern {
	return &NullablePathPattern{value: val, isSet: true}
}

func (v NullablePathPattern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathPattern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
