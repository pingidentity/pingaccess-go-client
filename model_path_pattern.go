/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PathPattern A pattern for matching request URI paths.
type PathPattern struct {
	// The path-matching pattern, relative to the Application context root (interpreted according to the pattern 'type').
	Pattern *string `json:"pattern,omitempty"`
	Type *PathPatternType `json:"type,omitempty"`
}

// NewPathPattern instantiates a new PathPattern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPathPattern() *PathPattern {
	this := PathPattern{}
	return &this
}

// NewPathPatternWithDefaults instantiates a new PathPattern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathPatternWithDefaults() *PathPattern {
	this := PathPattern{}
	return &this
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *PathPattern) GetPattern() string {
	if o == nil || isNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathPattern) GetPatternOk() (*string, bool) {
	if o == nil || isNil(o.Pattern) {
    return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *PathPattern) HasPattern() bool {
	if o != nil && !isNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *PathPattern) SetPattern(v string) {
	o.Pattern = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PathPattern) GetType() PathPatternType {
	if o == nil || isNil(o.Type) {
		var ret PathPatternType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathPattern) GetTypeOk() (*PathPatternType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PathPattern) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PathPatternType and assigns it to the Type field.
func (o *PathPattern) SetType(v PathPatternType) {
	o.Type = &v
}

func (o PathPattern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePathPattern struct {
	value *PathPattern
	isSet bool
}

func (v NullablePathPattern) Get() *PathPattern {
	return v.value
}

func (v *NullablePathPattern) Set(val *PathPattern) {
	v.value = val
	v.isSet = true
}

func (v NullablePathPattern) IsSet() bool {
	return v.isSet
}

func (v *NullablePathPattern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathPattern(val *PathPattern) *NullablePathPattern {
	return &NullablePathPattern{value: val, isSet: true}
}

func (v NullablePathPattern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathPattern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


