/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChainCertificatesDoc struct for ChainCertificatesDoc
type ChainCertificatesDoc struct {
	AddChainCertificates []string `json:"addChainCertificates"`
}

// NewChainCertificatesDoc instantiates a new ChainCertificatesDoc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainCertificatesDoc(addChainCertificates []string) *ChainCertificatesDoc {
	this := ChainCertificatesDoc{}
	this.AddChainCertificates = addChainCertificates
	return &this
}

// NewChainCertificatesDocWithDefaults instantiates a new ChainCertificatesDoc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainCertificatesDocWithDefaults() *ChainCertificatesDoc {
	this := ChainCertificatesDoc{}
	return &this
}

// GetAddChainCertificates returns the AddChainCertificates field value
func (o *ChainCertificatesDoc) GetAddChainCertificates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AddChainCertificates
}

// GetAddChainCertificatesOk returns a tuple with the AddChainCertificates field value
// and a boolean to check if the value has been set.
func (o *ChainCertificatesDoc) GetAddChainCertificatesOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AddChainCertificates, true
}

// SetAddChainCertificates sets field value
func (o *ChainCertificatesDoc) SetAddChainCertificates(v []string) {
	o.AddChainCertificates = v
}

func (o ChainCertificatesDoc) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["addChainCertificates"] = o.AddChainCertificates
	}
	return json.Marshal(toSerialize)
}

type NullableChainCertificatesDoc struct {
	value *ChainCertificatesDoc
	isSet bool
}

func (v NullableChainCertificatesDoc) Get() *ChainCertificatesDoc {
	return v.value
}

func (v *NullableChainCertificatesDoc) Set(val *ChainCertificatesDoc) {
	v.value = val
	v.isSet = true
}

func (v NullableChainCertificatesDoc) IsSet() bool {
	return v.isSet
}

func (v *NullableChainCertificatesDoc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainCertificatesDoc(val *ChainCertificatesDoc) *NullableChainCertificatesDoc {
	return &NullableChainCertificatesDoc{value: val, isSet: true}
}

func (v NullableChainCertificatesDoc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainCertificatesDoc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


