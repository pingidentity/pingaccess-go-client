/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the EngineCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngineCertificate{}

// EngineCertificate An engine certificate.
type EngineCertificate struct {
	// The id for the engine certificate.
	Id *int64 `json:"id,omitempty"`
	// (sortable) The Serial Number for the engine certificate.
	SerialNumber string `json:"serialNumber"`
	// (sortable) The alias for the engine certificate.
	Alias string `json:"alias"`
	// (sortable) The Subject DN for the engine certificate.
	SubjectDn string `json:"subjectDn"`
	// (sortable) The common name (CN) identifying the certificate.
	SubjectCn *string `json:"subjectCn,omitempty"`
	// (sortable) The issuer DN for the engine certificate.
	IssuerDn string `json:"issuerDn"`
	// (sortable) The date at which the engine certificate is valid from as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
	ValidFrom *time.Time `json:"validFrom,omitempty"`
	// (sortable) The date at which the engine certificate expires as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
	Expires *time.Time `json:"expires,omitempty"`
	// (sortable) The Signature Algorithm used by the engine certificate.
	SignatureAlgorithm string     `json:"signatureAlgorithm"`
	Status             CertStatus `json:"status"`
	// The SHA1 checksum of the engine certificate.
	Sha1sum string `json:"sha1sum"`
	// The MD5 checksum of the engine certificate. The value will be set to \"\" when in FIPS mode.
	Md5sum string `json:"md5sum"`
	// The SHA256 checksum of the engine certificate.
	Sha256sum string `json:"sha256sum"`
	// A collection of subject alternative names for the engine certificate.
	SubjectAlternativeNames []GeneralName `json:"subjectAlternativeNames,omitempty"`
	// A flag indicating whether the engine certificate is a trusted certificate.
	TrustedCertificate bool `json:"trustedCertificate"`
	// A flag indicating whether the engine certificate is a key pair.
	KeyPair bool `json:"keyPair"`
	// A flag indicating whether the engine certificate is a chain certificate.
	ChainCertificate bool `json:"chainCertificate"`
}

// NewEngineCertificate instantiates a new EngineCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngineCertificate(serialNumber string, alias string, subjectDn string, issuerDn string, signatureAlgorithm string, status CertStatus, sha1sum string, md5sum string, sha256sum string, trustedCertificate bool, keyPair bool, chainCertificate bool) *EngineCertificate {
	this := EngineCertificate{}
	this.SerialNumber = serialNumber
	this.Alias = alias
	this.SubjectDn = subjectDn
	this.IssuerDn = issuerDn
	this.SignatureAlgorithm = signatureAlgorithm
	this.Status = status
	this.Sha1sum = sha1sum
	this.Md5sum = md5sum
	this.Sha256sum = sha256sum
	this.TrustedCertificate = trustedCertificate
	this.KeyPair = keyPair
	this.ChainCertificate = chainCertificate
	return &this
}

// NewEngineCertificateWithDefaults instantiates a new EngineCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineCertificateWithDefaults() *EngineCertificate {
	this := EngineCertificate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EngineCertificate) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EngineCertificate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *EngineCertificate) SetId(v int64) {
	o.Id = &v
}

// GetSerialNumber returns the SerialNumber field value
func (o *EngineCertificate) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *EngineCertificate) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetAlias returns the Alias field value
func (o *EngineCertificate) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *EngineCertificate) SetAlias(v string) {
	o.Alias = v
}

// GetSubjectDn returns the SubjectDn field value
func (o *EngineCertificate) GetSubjectDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectDn
}

// GetSubjectDnOk returns a tuple with the SubjectDn field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetSubjectDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectDn, true
}

// SetSubjectDn sets field value
func (o *EngineCertificate) SetSubjectDn(v string) {
	o.SubjectDn = v
}

// GetSubjectCn returns the SubjectCn field value if set, zero value otherwise.
func (o *EngineCertificate) GetSubjectCn() string {
	if o == nil || IsNil(o.SubjectCn) {
		var ret string
		return ret
	}
	return *o.SubjectCn
}

// GetSubjectCnOk returns a tuple with the SubjectCn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetSubjectCnOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectCn) {
		return nil, false
	}
	return o.SubjectCn, true
}

// HasSubjectCn returns a boolean if a field has been set.
func (o *EngineCertificate) HasSubjectCn() bool {
	if o != nil && !IsNil(o.SubjectCn) {
		return true
	}

	return false
}

// SetSubjectCn gets a reference to the given string and assigns it to the SubjectCn field.
func (o *EngineCertificate) SetSubjectCn(v string) {
	o.SubjectCn = &v
}

// GetIssuerDn returns the IssuerDn field value
func (o *EngineCertificate) GetIssuerDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerDn
}

// GetIssuerDnOk returns a tuple with the IssuerDn field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetIssuerDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerDn, true
}

// SetIssuerDn sets field value
func (o *EngineCertificate) SetIssuerDn(v string) {
	o.IssuerDn = v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *EngineCertificate) GetValidFrom() time.Time {
	if o == nil || IsNil(o.ValidFrom) {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetValidFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *EngineCertificate) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *EngineCertificate) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *EngineCertificate) GetExpires() time.Time {
	if o == nil || IsNil(o.Expires) {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetExpiresOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *EngineCertificate) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *EngineCertificate) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value
func (o *EngineCertificate) GetSignatureAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAlgorithm, true
}

// SetSignatureAlgorithm sets field value
func (o *EngineCertificate) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = v
}

// GetStatus returns the Status field value
func (o *EngineCertificate) GetStatus() CertStatus {
	if o == nil {
		var ret CertStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetStatusOk() (*CertStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EngineCertificate) SetStatus(v CertStatus) {
	o.Status = v
}

// GetSha1sum returns the Sha1sum field value
func (o *EngineCertificate) GetSha1sum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha1sum
}

// GetSha1sumOk returns a tuple with the Sha1sum field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetSha1sumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha1sum, true
}

// SetSha1sum sets field value
func (o *EngineCertificate) SetSha1sum(v string) {
	o.Sha1sum = v
}

// GetMd5sum returns the Md5sum field value
func (o *EngineCertificate) GetMd5sum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Md5sum
}

// GetMd5sumOk returns a tuple with the Md5sum field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetMd5sumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Md5sum, true
}

// SetMd5sum sets field value
func (o *EngineCertificate) SetMd5sum(v string) {
	o.Md5sum = v
}

// GetSha256sum returns the Sha256sum field value
func (o *EngineCertificate) GetSha256sum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha256sum
}

// GetSha256sumOk returns a tuple with the Sha256sum field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetSha256sumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha256sum, true
}

// SetSha256sum sets field value
func (o *EngineCertificate) SetSha256sum(v string) {
	o.Sha256sum = v
}

// GetSubjectAlternativeNames returns the SubjectAlternativeNames field value if set, zero value otherwise.
func (o *EngineCertificate) GetSubjectAlternativeNames() []GeneralName {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		var ret []GeneralName
		return ret
	}
	return o.SubjectAlternativeNames
}

// GetSubjectAlternativeNamesOk returns a tuple with the SubjectAlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetSubjectAlternativeNamesOk() ([]GeneralName, bool) {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		return nil, false
	}
	return o.SubjectAlternativeNames, true
}

// HasSubjectAlternativeNames returns a boolean if a field has been set.
func (o *EngineCertificate) HasSubjectAlternativeNames() bool {
	if o != nil && !IsNil(o.SubjectAlternativeNames) {
		return true
	}

	return false
}

// SetSubjectAlternativeNames gets a reference to the given []GeneralName and assigns it to the SubjectAlternativeNames field.
func (o *EngineCertificate) SetSubjectAlternativeNames(v []GeneralName) {
	o.SubjectAlternativeNames = v
}

// GetTrustedCertificate returns the TrustedCertificate field value
func (o *EngineCertificate) GetTrustedCertificate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TrustedCertificate
}

// GetTrustedCertificateOk returns a tuple with the TrustedCertificate field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetTrustedCertificateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrustedCertificate, true
}

// SetTrustedCertificate sets field value
func (o *EngineCertificate) SetTrustedCertificate(v bool) {
	o.TrustedCertificate = v
}

// GetKeyPair returns the KeyPair field value
func (o *EngineCertificate) GetKeyPair() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.KeyPair
}

// GetKeyPairOk returns a tuple with the KeyPair field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetKeyPairOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyPair, true
}

// SetKeyPair sets field value
func (o *EngineCertificate) SetKeyPair(v bool) {
	o.KeyPair = v
}

// GetChainCertificate returns the ChainCertificate field value
func (o *EngineCertificate) GetChainCertificate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ChainCertificate
}

// GetChainCertificateOk returns a tuple with the ChainCertificate field value
// and a boolean to check if the value has been set.
func (o *EngineCertificate) GetChainCertificateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainCertificate, true
}

// SetChainCertificate sets field value
func (o *EngineCertificate) SetChainCertificate(v bool) {
	o.ChainCertificate = v
}

func (o EngineCertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngineCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["alias"] = o.Alias
	toSerialize["subjectDn"] = o.SubjectDn
	if !IsNil(o.SubjectCn) {
		toSerialize["subjectCn"] = o.SubjectCn
	}
	toSerialize["issuerDn"] = o.IssuerDn
	if !IsNil(o.ValidFrom) {
		toSerialize["validFrom"] = o.ValidFrom
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	toSerialize["status"] = o.Status
	toSerialize["sha1sum"] = o.Sha1sum
	toSerialize["md5sum"] = o.Md5sum
	toSerialize["sha256sum"] = o.Sha256sum
	if !IsNil(o.SubjectAlternativeNames) {
		toSerialize["subjectAlternativeNames"] = o.SubjectAlternativeNames
	}
	toSerialize["trustedCertificate"] = o.TrustedCertificate
	toSerialize["keyPair"] = o.KeyPair
	toSerialize["chainCertificate"] = o.ChainCertificate
	return toSerialize, nil
}

type NullableEngineCertificate struct {
	value *EngineCertificate
	isSet bool
}

func (v NullableEngineCertificate) Get() *EngineCertificate {
	return v.value
}

func (v *NullableEngineCertificate) Set(val *EngineCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineCertificate(val *EngineCertificate) *NullableEngineCertificate {
	return &NullableEngineCertificate{value: val, isSet: true}
}

func (v NullableEngineCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
