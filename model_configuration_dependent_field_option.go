/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigurationDependentFieldOption Configuration of the dependent field option.
type ConfigurationDependentFieldOption struct {
	// The dependent field option value.
	Value string `json:"value"`
	// The dependent field options.
	Options []ConfigurationOption `json:"options"`
}

// NewConfigurationDependentFieldOption instantiates a new ConfigurationDependentFieldOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationDependentFieldOption(value string, options []ConfigurationOption) *ConfigurationDependentFieldOption {
	this := ConfigurationDependentFieldOption{}
	this.Value = value
	this.Options = options
	return &this
}

// NewConfigurationDependentFieldOptionWithDefaults instantiates a new ConfigurationDependentFieldOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationDependentFieldOptionWithDefaults() *ConfigurationDependentFieldOption {
	this := ConfigurationDependentFieldOption{}
	return &this
}

// GetValue returns the Value field value
func (o *ConfigurationDependentFieldOption) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ConfigurationDependentFieldOption) GetValueOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ConfigurationDependentFieldOption) SetValue(v string) {
	o.Value = v
}

// GetOptions returns the Options field value
func (o *ConfigurationDependentFieldOption) GetOptions() []ConfigurationOption {
	if o == nil {
		var ret []ConfigurationOption
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *ConfigurationDependentFieldOption) GetOptionsOk() ([]ConfigurationOption, bool) {
	if o == nil {
    return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *ConfigurationDependentFieldOption) SetOptions(v []ConfigurationOption) {
	o.Options = v
}

func (o ConfigurationDependentFieldOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationDependentFieldOption struct {
	value *ConfigurationDependentFieldOption
	isSet bool
}

func (v NullableConfigurationDependentFieldOption) Get() *ConfigurationDependentFieldOption {
	return v.value
}

func (v *NullableConfigurationDependentFieldOption) Set(val *ConfigurationDependentFieldOption) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationDependentFieldOption) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationDependentFieldOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationDependentFieldOption(val *ConfigurationDependentFieldOption) *NullableConfigurationDependentFieldOption {
	return &NullableConfigurationDependentFieldOption{value: val, isSet: true}
}

func (v NullableConfigurationDependentFieldOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationDependentFieldOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


