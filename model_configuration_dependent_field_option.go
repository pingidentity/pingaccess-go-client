/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ConfigurationDependentFieldOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationDependentFieldOption{}

// ConfigurationDependentFieldOption Configuration of the dependent field option.
type ConfigurationDependentFieldOption struct {
	// The dependent field option value.
	Value string `json:"value"`
	// The dependent field options.
	Options []ConfigurationOption `json:"options"`
}

// NewConfigurationDependentFieldOption instantiates a new ConfigurationDependentFieldOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationDependentFieldOption(value string, options []ConfigurationOption) *ConfigurationDependentFieldOption {
	this := ConfigurationDependentFieldOption{}
	this.Value = value
	this.Options = options
	return &this
}

// NewConfigurationDependentFieldOptionWithDefaults instantiates a new ConfigurationDependentFieldOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationDependentFieldOptionWithDefaults() *ConfigurationDependentFieldOption {
	this := ConfigurationDependentFieldOption{}
	return &this
}

// GetValue returns the Value field value
func (o *ConfigurationDependentFieldOption) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ConfigurationDependentFieldOption) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ConfigurationDependentFieldOption) SetValue(v string) {
	o.Value = v
}

// GetOptions returns the Options field value
func (o *ConfigurationDependentFieldOption) GetOptions() []ConfigurationOption {
	if o == nil {
		var ret []ConfigurationOption
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *ConfigurationDependentFieldOption) GetOptionsOk() ([]ConfigurationOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *ConfigurationDependentFieldOption) SetOptions(v []ConfigurationOption) {
	o.Options = v
}

func (o ConfigurationDependentFieldOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationDependentFieldOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["options"] = o.Options
	return toSerialize, nil
}

type NullableConfigurationDependentFieldOption struct {
	value *ConfigurationDependentFieldOption
	isSet bool
}

func (v NullableConfigurationDependentFieldOption) Get() *ConfigurationDependentFieldOption {
	return v.value
}

func (v *NullableConfigurationDependentFieldOption) Set(val *ConfigurationDependentFieldOption) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationDependentFieldOption) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationDependentFieldOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationDependentFieldOption(val *ConfigurationDependentFieldOption) *NullableConfigurationDependentFieldOption {
	return &NullableConfigurationDependentFieldOption{value: val, isSet: true}
}

func (v NullableConfigurationDependentFieldOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationDependentFieldOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
