/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RequestMatcher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestMatcher{}

// RequestMatcher A request matcher used to match an unauthenticated request to its challenge response.
type RequestMatcher struct {
	// The class name of the request matcher.
	ClassName string `json:"className"`
	// The request matcher configuration. - This value is a PingAccess plugin configuration (JSON).
	Configuration map[string]interface{} `json:"configuration,omitempty"`
}

// NewRequestMatcher instantiates a new RequestMatcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestMatcher(className string) *RequestMatcher {
	this := RequestMatcher{}
	this.ClassName = className
	return &this
}

// NewRequestMatcherWithDefaults instantiates a new RequestMatcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestMatcherWithDefaults() *RequestMatcher {
	this := RequestMatcher{}
	return &this
}

// GetClassName returns the ClassName field value
func (o *RequestMatcher) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *RequestMatcher) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *RequestMatcher) SetClassName(v string) {
	o.ClassName = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *RequestMatcher) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestMatcher) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *RequestMatcher) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *RequestMatcher) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

func (o RequestMatcher) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestMatcher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["className"] = o.ClassName
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableRequestMatcher struct {
	value *RequestMatcher
	isSet bool
}

func (v NullableRequestMatcher) Get() *RequestMatcher {
	return v.value
}

func (v *NullableRequestMatcher) Set(val *RequestMatcher) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestMatcher(val *RequestMatcher) *NullableRequestMatcher {
	return &NullableRequestMatcher{value: val, isSet: true}
}

func (v NullableRequestMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
