/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RevocationChecking struct for RevocationChecking
type RevocationChecking struct {
	CrlChecking *bool `json:"crlChecking,omitempty"`
	Ocsp *bool `json:"ocsp,omitempty"`
	DenyRevocationStatusUnknown *bool `json:"denyRevocationStatusUnknown,omitempty"`
	SupportDisorderedChain *bool `json:"supportDisorderedChain,omitempty"`
	SkipTrustAnchors *bool `json:"skipTrustAnchors,omitempty"`
}

// NewRevocationChecking instantiates a new RevocationChecking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevocationChecking() *RevocationChecking {
	this := RevocationChecking{}
	return &this
}

// NewRevocationCheckingWithDefaults instantiates a new RevocationChecking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevocationCheckingWithDefaults() *RevocationChecking {
	this := RevocationChecking{}
	return &this
}

// GetCrlChecking returns the CrlChecking field value if set, zero value otherwise.
func (o *RevocationChecking) GetCrlChecking() bool {
	if o == nil || isNil(o.CrlChecking) {
		var ret bool
		return ret
	}
	return *o.CrlChecking
}

// GetCrlCheckingOk returns a tuple with the CrlChecking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetCrlCheckingOk() (*bool, bool) {
	if o == nil || isNil(o.CrlChecking) {
    return nil, false
	}
	return o.CrlChecking, true
}

// HasCrlChecking returns a boolean if a field has been set.
func (o *RevocationChecking) HasCrlChecking() bool {
	if o != nil && !isNil(o.CrlChecking) {
		return true
	}

	return false
}

// SetCrlChecking gets a reference to the given bool and assigns it to the CrlChecking field.
func (o *RevocationChecking) SetCrlChecking(v bool) {
	o.CrlChecking = &v
}

// GetOcsp returns the Ocsp field value if set, zero value otherwise.
func (o *RevocationChecking) GetOcsp() bool {
	if o == nil || isNil(o.Ocsp) {
		var ret bool
		return ret
	}
	return *o.Ocsp
}

// GetOcspOk returns a tuple with the Ocsp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetOcspOk() (*bool, bool) {
	if o == nil || isNil(o.Ocsp) {
    return nil, false
	}
	return o.Ocsp, true
}

// HasOcsp returns a boolean if a field has been set.
func (o *RevocationChecking) HasOcsp() bool {
	if o != nil && !isNil(o.Ocsp) {
		return true
	}

	return false
}

// SetOcsp gets a reference to the given bool and assigns it to the Ocsp field.
func (o *RevocationChecking) SetOcsp(v bool) {
	o.Ocsp = &v
}

// GetDenyRevocationStatusUnknown returns the DenyRevocationStatusUnknown field value if set, zero value otherwise.
func (o *RevocationChecking) GetDenyRevocationStatusUnknown() bool {
	if o == nil || isNil(o.DenyRevocationStatusUnknown) {
		var ret bool
		return ret
	}
	return *o.DenyRevocationStatusUnknown
}

// GetDenyRevocationStatusUnknownOk returns a tuple with the DenyRevocationStatusUnknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetDenyRevocationStatusUnknownOk() (*bool, bool) {
	if o == nil || isNil(o.DenyRevocationStatusUnknown) {
    return nil, false
	}
	return o.DenyRevocationStatusUnknown, true
}

// HasDenyRevocationStatusUnknown returns a boolean if a field has been set.
func (o *RevocationChecking) HasDenyRevocationStatusUnknown() bool {
	if o != nil && !isNil(o.DenyRevocationStatusUnknown) {
		return true
	}

	return false
}

// SetDenyRevocationStatusUnknown gets a reference to the given bool and assigns it to the DenyRevocationStatusUnknown field.
func (o *RevocationChecking) SetDenyRevocationStatusUnknown(v bool) {
	o.DenyRevocationStatusUnknown = &v
}

// GetSupportDisorderedChain returns the SupportDisorderedChain field value if set, zero value otherwise.
func (o *RevocationChecking) GetSupportDisorderedChain() bool {
	if o == nil || isNil(o.SupportDisorderedChain) {
		var ret bool
		return ret
	}
	return *o.SupportDisorderedChain
}

// GetSupportDisorderedChainOk returns a tuple with the SupportDisorderedChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetSupportDisorderedChainOk() (*bool, bool) {
	if o == nil || isNil(o.SupportDisorderedChain) {
    return nil, false
	}
	return o.SupportDisorderedChain, true
}

// HasSupportDisorderedChain returns a boolean if a field has been set.
func (o *RevocationChecking) HasSupportDisorderedChain() bool {
	if o != nil && !isNil(o.SupportDisorderedChain) {
		return true
	}

	return false
}

// SetSupportDisorderedChain gets a reference to the given bool and assigns it to the SupportDisorderedChain field.
func (o *RevocationChecking) SetSupportDisorderedChain(v bool) {
	o.SupportDisorderedChain = &v
}

// GetSkipTrustAnchors returns the SkipTrustAnchors field value if set, zero value otherwise.
func (o *RevocationChecking) GetSkipTrustAnchors() bool {
	if o == nil || isNil(o.SkipTrustAnchors) {
		var ret bool
		return ret
	}
	return *o.SkipTrustAnchors
}

// GetSkipTrustAnchorsOk returns a tuple with the SkipTrustAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetSkipTrustAnchorsOk() (*bool, bool) {
	if o == nil || isNil(o.SkipTrustAnchors) {
    return nil, false
	}
	return o.SkipTrustAnchors, true
}

// HasSkipTrustAnchors returns a boolean if a field has been set.
func (o *RevocationChecking) HasSkipTrustAnchors() bool {
	if o != nil && !isNil(o.SkipTrustAnchors) {
		return true
	}

	return false
}

// SetSkipTrustAnchors gets a reference to the given bool and assigns it to the SkipTrustAnchors field.
func (o *RevocationChecking) SetSkipTrustAnchors(v bool) {
	o.SkipTrustAnchors = &v
}

func (o RevocationChecking) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CrlChecking) {
		toSerialize["crlChecking"] = o.CrlChecking
	}
	if !isNil(o.Ocsp) {
		toSerialize["ocsp"] = o.Ocsp
	}
	if !isNil(o.DenyRevocationStatusUnknown) {
		toSerialize["denyRevocationStatusUnknown"] = o.DenyRevocationStatusUnknown
	}
	if !isNil(o.SupportDisorderedChain) {
		toSerialize["supportDisorderedChain"] = o.SupportDisorderedChain
	}
	if !isNil(o.SkipTrustAnchors) {
		toSerialize["skipTrustAnchors"] = o.SkipTrustAnchors
	}
	return json.Marshal(toSerialize)
}

type NullableRevocationChecking struct {
	value *RevocationChecking
	isSet bool
}

func (v NullableRevocationChecking) Get() *RevocationChecking {
	return v.value
}

func (v *NullableRevocationChecking) Set(val *RevocationChecking) {
	v.value = val
	v.isSet = true
}

func (v NullableRevocationChecking) IsSet() bool {
	return v.isSet
}

func (v *NullableRevocationChecking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevocationChecking(val *RevocationChecking) *NullableRevocationChecking {
	return &NullableRevocationChecking{value: val, isSet: true}
}

func (v NullableRevocationChecking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevocationChecking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


