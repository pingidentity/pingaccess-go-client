/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RevocationChecking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevocationChecking{}

// RevocationChecking struct for RevocationChecking
type RevocationChecking struct {
	// This field is true if CRL client certificate revocation checking is enabled.
	CrlChecking *bool `json:"crlChecking,omitempty"`
	// This field is true if OCSP client certificate revocation checking is enabled.
	Ocsp *bool `json:"ocsp,omitempty"`
	// This field is true if client certificates should be denied when the revocation status cannot be determined.
	DenyRevocationStatusUnknown *bool `json:"denyRevocationStatusUnknown,omitempty"`
	// When set to true, PA can validate client certificate chains that are not in the standard order of leaf -> intermediate(s) -> root. When false, validation may fail on client certificate chains that are not in the standard order.
	SupportDisorderedChain *bool `json:"supportDisorderedChain,omitempty"`
	// When set to true, PA will skip validation of any certificates configured in the trusted certificate group as well as their subsequent chain of issuers when trusted certificates are found in the client certificate chain.
	SkipTrustAnchors *bool `json:"skipTrustAnchors,omitempty"`
}

// NewRevocationChecking instantiates a new RevocationChecking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevocationChecking() *RevocationChecking {
	this := RevocationChecking{}
	return &this
}

// NewRevocationCheckingWithDefaults instantiates a new RevocationChecking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevocationCheckingWithDefaults() *RevocationChecking {
	this := RevocationChecking{}
	return &this
}

// GetCrlChecking returns the CrlChecking field value if set, zero value otherwise.
func (o *RevocationChecking) GetCrlChecking() bool {
	if o == nil || IsNil(o.CrlChecking) {
		var ret bool
		return ret
	}
	return *o.CrlChecking
}

// GetCrlCheckingOk returns a tuple with the CrlChecking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetCrlCheckingOk() (*bool, bool) {
	if o == nil || IsNil(o.CrlChecking) {
		return nil, false
	}
	return o.CrlChecking, true
}

// HasCrlChecking returns a boolean if a field has been set.
func (o *RevocationChecking) HasCrlChecking() bool {
	if o != nil && !IsNil(o.CrlChecking) {
		return true
	}

	return false
}

// SetCrlChecking gets a reference to the given bool and assigns it to the CrlChecking field.
func (o *RevocationChecking) SetCrlChecking(v bool) {
	o.CrlChecking = &v
}

// GetOcsp returns the Ocsp field value if set, zero value otherwise.
func (o *RevocationChecking) GetOcsp() bool {
	if o == nil || IsNil(o.Ocsp) {
		var ret bool
		return ret
	}
	return *o.Ocsp
}

// GetOcspOk returns a tuple with the Ocsp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetOcspOk() (*bool, bool) {
	if o == nil || IsNil(o.Ocsp) {
		return nil, false
	}
	return o.Ocsp, true
}

// HasOcsp returns a boolean if a field has been set.
func (o *RevocationChecking) HasOcsp() bool {
	if o != nil && !IsNil(o.Ocsp) {
		return true
	}

	return false
}

// SetOcsp gets a reference to the given bool and assigns it to the Ocsp field.
func (o *RevocationChecking) SetOcsp(v bool) {
	o.Ocsp = &v
}

// GetDenyRevocationStatusUnknown returns the DenyRevocationStatusUnknown field value if set, zero value otherwise.
func (o *RevocationChecking) GetDenyRevocationStatusUnknown() bool {
	if o == nil || IsNil(o.DenyRevocationStatusUnknown) {
		var ret bool
		return ret
	}
	return *o.DenyRevocationStatusUnknown
}

// GetDenyRevocationStatusUnknownOk returns a tuple with the DenyRevocationStatusUnknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetDenyRevocationStatusUnknownOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyRevocationStatusUnknown) {
		return nil, false
	}
	return o.DenyRevocationStatusUnknown, true
}

// HasDenyRevocationStatusUnknown returns a boolean if a field has been set.
func (o *RevocationChecking) HasDenyRevocationStatusUnknown() bool {
	if o != nil && !IsNil(o.DenyRevocationStatusUnknown) {
		return true
	}

	return false
}

// SetDenyRevocationStatusUnknown gets a reference to the given bool and assigns it to the DenyRevocationStatusUnknown field.
func (o *RevocationChecking) SetDenyRevocationStatusUnknown(v bool) {
	o.DenyRevocationStatusUnknown = &v
}

// GetSupportDisorderedChain returns the SupportDisorderedChain field value if set, zero value otherwise.
func (o *RevocationChecking) GetSupportDisorderedChain() bool {
	if o == nil || IsNil(o.SupportDisorderedChain) {
		var ret bool
		return ret
	}
	return *o.SupportDisorderedChain
}

// GetSupportDisorderedChainOk returns a tuple with the SupportDisorderedChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetSupportDisorderedChainOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportDisorderedChain) {
		return nil, false
	}
	return o.SupportDisorderedChain, true
}

// HasSupportDisorderedChain returns a boolean if a field has been set.
func (o *RevocationChecking) HasSupportDisorderedChain() bool {
	if o != nil && !IsNil(o.SupportDisorderedChain) {
		return true
	}

	return false
}

// SetSupportDisorderedChain gets a reference to the given bool and assigns it to the SupportDisorderedChain field.
func (o *RevocationChecking) SetSupportDisorderedChain(v bool) {
	o.SupportDisorderedChain = &v
}

// GetSkipTrustAnchors returns the SkipTrustAnchors field value if set, zero value otherwise.
func (o *RevocationChecking) GetSkipTrustAnchors() bool {
	if o == nil || IsNil(o.SkipTrustAnchors) {
		var ret bool
		return ret
	}
	return *o.SkipTrustAnchors
}

// GetSkipTrustAnchorsOk returns a tuple with the SkipTrustAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationChecking) GetSkipTrustAnchorsOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipTrustAnchors) {
		return nil, false
	}
	return o.SkipTrustAnchors, true
}

// HasSkipTrustAnchors returns a boolean if a field has been set.
func (o *RevocationChecking) HasSkipTrustAnchors() bool {
	if o != nil && !IsNil(o.SkipTrustAnchors) {
		return true
	}

	return false
}

// SetSkipTrustAnchors gets a reference to the given bool and assigns it to the SkipTrustAnchors field.
func (o *RevocationChecking) SetSkipTrustAnchors(v bool) {
	o.SkipTrustAnchors = &v
}

func (o RevocationChecking) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevocationChecking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CrlChecking) {
		toSerialize["crlChecking"] = o.CrlChecking
	}
	if !IsNil(o.Ocsp) {
		toSerialize["ocsp"] = o.Ocsp
	}
	if !IsNil(o.DenyRevocationStatusUnknown) {
		toSerialize["denyRevocationStatusUnknown"] = o.DenyRevocationStatusUnknown
	}
	if !IsNil(o.SupportDisorderedChain) {
		toSerialize["supportDisorderedChain"] = o.SupportDisorderedChain
	}
	if !IsNil(o.SkipTrustAnchors) {
		toSerialize["skipTrustAnchors"] = o.SkipTrustAnchors
	}
	return toSerialize, nil
}

type NullableRevocationChecking struct {
	value *RevocationChecking
	isSet bool
}

func (v NullableRevocationChecking) Get() *RevocationChecking {
	return v.value
}

func (v *NullableRevocationChecking) Set(val *RevocationChecking) {
	v.value = val
	v.isSet = true
}

func (v NullableRevocationChecking) IsSet() bool {
	return v.isSet
}

func (v *NullableRevocationChecking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevocationChecking(val *RevocationChecking) *NullableRevocationChecking {
	return &NullableRevocationChecking{value: val, isSet: true}
}

func (v NullableRevocationChecking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevocationChecking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
