/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SanType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SanType{}

// SanType struct for SanType
type SanType struct {
	// The general name. This field is read-only.
	Name string `json:"name"`
	// A description of the available general name. This field is read-only.
	Description string `json:"description"`
}

// NewSanType instantiates a new SanType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSanType(name string, description string) *SanType {
	this := SanType{}
	this.Name = name
	this.Description = description
	return &this
}

// NewSanTypeWithDefaults instantiates a new SanType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSanTypeWithDefaults() *SanType {
	this := SanType{}
	return &this
}

// GetName returns the Name field value
func (o *SanType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SanType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SanType) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *SanType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SanType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SanType) SetDescription(v string) {
	o.Description = v
}

func (o SanType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SanType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

type NullableSanType struct {
	value *SanType
	isSet bool
}

func (v NullableSanType) Get() *SanType {
	return v.value
}

func (v *NullableSanType) Set(val *SanType) {
	v.value = val
	v.isSet = true
}

func (v NullableSanType) IsSet() bool {
	return v.isSet
}

func (v *NullableSanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSanType(val *SanType) *NullableSanType {
	return &NullableSanType{value: val, isSet: true}
}

func (v NullableSanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
