/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SanType struct for SanType
type SanType struct {
	Name string `json:"name"`
	Description string `json:"description"`
}

// NewSanType instantiates a new SanType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSanType(name string, description string) *SanType {
	this := SanType{}
	this.Name = name
	this.Description = description
	return &this
}

// NewSanTypeWithDefaults instantiates a new SanType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSanTypeWithDefaults() *SanType {
	this := SanType{}
	return &this
}

// GetName returns the Name field value
func (o *SanType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SanType) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SanType) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *SanType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SanType) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SanType) SetDescription(v string) {
	o.Description = v
}

func (o SanType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableSanType struct {
	value *SanType
	isSet bool
}

func (v NullableSanType) Get() *SanType {
	return v.value
}

func (v *NullableSanType) Set(val *SanType) {
	v.value = val
	v.isSet = true
}

func (v NullableSanType) IsSet() bool {
	return v.isSet
}

func (v *NullableSanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSanType(val *SanType) *NullableSanType {
	return &NullableSanType{value: val, isSet: true}
}

func (v NullableSanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


