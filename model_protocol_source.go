/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProtocolSource Configuration for the protocol source.
type ProtocolSource struct {
	// The header name used to identify the protocol source name.
	HeaderName string `json:"headerName"`
}

// NewProtocolSource instantiates a new ProtocolSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolSource(headerName string) *ProtocolSource {
	this := ProtocolSource{}
	this.HeaderName = headerName
	return &this
}

// NewProtocolSourceWithDefaults instantiates a new ProtocolSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolSourceWithDefaults() *ProtocolSource {
	this := ProtocolSource{}
	return &this
}

// GetHeaderName returns the HeaderName field value
func (o *ProtocolSource) GetHeaderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HeaderName
}

// GetHeaderNameOk returns a tuple with the HeaderName field value
// and a boolean to check if the value has been set.
func (o *ProtocolSource) GetHeaderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HeaderName, true
}

// SetHeaderName sets field value
func (o *ProtocolSource) SetHeaderName(v string) {
	o.HeaderName = v
}

func (o ProtocolSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["headerName"] = o.HeaderName
	}
	return json.Marshal(toSerialize)
}

type NullableProtocolSource struct {
	value *ProtocolSource
	isSet bool
}

func (v NullableProtocolSource) Get() *ProtocolSource {
	return v.value
}

func (v *NullableProtocolSource) Set(val *ProtocolSource) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolSource) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolSource(val *ProtocolSource) *NullableProtocolSource {
	return &NullableProtocolSource{value: val, isSet: true}
}

func (v NullableProtocolSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


