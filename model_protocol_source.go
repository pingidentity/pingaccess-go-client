/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ProtocolSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtocolSource{}

// ProtocolSource Configuration for the protocol source.
type ProtocolSource struct {
	// The header name used to identify the protocol source name.
	HeaderName string `json:"headerName"`
}

// NewProtocolSource instantiates a new ProtocolSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolSource(headerName string) *ProtocolSource {
	this := ProtocolSource{}
	this.HeaderName = headerName
	return &this
}

// NewProtocolSourceWithDefaults instantiates a new ProtocolSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolSourceWithDefaults() *ProtocolSource {
	this := ProtocolSource{}
	return &this
}

// GetHeaderName returns the HeaderName field value
func (o *ProtocolSource) GetHeaderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HeaderName
}

// GetHeaderNameOk returns a tuple with the HeaderName field value
// and a boolean to check if the value has been set.
func (o *ProtocolSource) GetHeaderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeaderName, true
}

// SetHeaderName sets field value
func (o *ProtocolSource) SetHeaderName(v string) {
	o.HeaderName = v
}

func (o ProtocolSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtocolSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["headerName"] = o.HeaderName
	return toSerialize, nil
}

type NullableProtocolSource struct {
	value *ProtocolSource
	isSet bool
}

func (v NullableProtocolSource) Get() *ProtocolSource {
	return v.value
}

func (v *NullableProtocolSource) Set(val *ProtocolSource) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolSource) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolSource(val *ProtocolSource) *NullableProtocolSource {
	return &NullableProtocolSource{value: val, isSet: true}
}

func (v NullableProtocolSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
