/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the TrustedCertificateGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustedCertificateGroup{}

// TrustedCertificateGroup A trusted certificate group.
type TrustedCertificateGroup struct {
	// When creating a new TrustedCertificateGroup, this is the ID for the TrustedCertificateGroup. If not specified, an ID will be automatically assigned. When updating an existing TrustedCertificateGroup, this field is ignored and the ID is determined by the path parameter.
	Id *int64 `json:"id,omitempty"`
	// (sortable) The name of the trusted certificate group.
	Name string `json:"name"`
	// (sortable) This field is true if the certificates in the group should also include all certificates in the Java Trust Store.
	UseJavaTrustStore *bool `json:"useJavaTrustStore,omitempty"`
	// (sortable) This field is read-only and indicates the trusted certificate group cannot be modified.
	SystemGroup *bool `json:"systemGroup,omitempty"`
	// (sortable) This field is read-only and is only set to true for the Trust Any certificate group.
	IgnoreAllCertificateErrors *bool `json:"ignoreAllCertificateErrors,omitempty"`
	// (sortable) This field is true if certificates that have expired or are not yet valid but have passed the other certificate checks should be trusted.
	SkipCertificateDateCheck *bool               `json:"skipCertificateDateCheck,omitempty"`
	RevocationChecking       *RevocationChecking `json:"revocationChecking,omitempty"`
	// The IDs of the certificates that are in the trusted certificate group.
	CertIds []int64 `json:"certIds,omitempty"`
}

// NewTrustedCertificateGroup instantiates a new TrustedCertificateGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustedCertificateGroup(name string) *TrustedCertificateGroup {
	this := TrustedCertificateGroup{}
	this.Name = name
	return &this
}

// NewTrustedCertificateGroupWithDefaults instantiates a new TrustedCertificateGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustedCertificateGroupWithDefaults() *TrustedCertificateGroup {
	this := TrustedCertificateGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrustedCertificateGroup) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrustedCertificateGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TrustedCertificateGroup) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *TrustedCertificateGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TrustedCertificateGroup) SetName(v string) {
	o.Name = v
}

// GetUseJavaTrustStore returns the UseJavaTrustStore field value if set, zero value otherwise.
func (o *TrustedCertificateGroup) GetUseJavaTrustStore() bool {
	if o == nil || IsNil(o.UseJavaTrustStore) {
		var ret bool
		return ret
	}
	return *o.UseJavaTrustStore
}

// GetUseJavaTrustStoreOk returns a tuple with the UseJavaTrustStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetUseJavaTrustStoreOk() (*bool, bool) {
	if o == nil || IsNil(o.UseJavaTrustStore) {
		return nil, false
	}
	return o.UseJavaTrustStore, true
}

// HasUseJavaTrustStore returns a boolean if a field has been set.
func (o *TrustedCertificateGroup) HasUseJavaTrustStore() bool {
	if o != nil && !IsNil(o.UseJavaTrustStore) {
		return true
	}

	return false
}

// SetUseJavaTrustStore gets a reference to the given bool and assigns it to the UseJavaTrustStore field.
func (o *TrustedCertificateGroup) SetUseJavaTrustStore(v bool) {
	o.UseJavaTrustStore = &v
}

// GetSystemGroup returns the SystemGroup field value if set, zero value otherwise.
func (o *TrustedCertificateGroup) GetSystemGroup() bool {
	if o == nil || IsNil(o.SystemGroup) {
		var ret bool
		return ret
	}
	return *o.SystemGroup
}

// GetSystemGroupOk returns a tuple with the SystemGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetSystemGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.SystemGroup) {
		return nil, false
	}
	return o.SystemGroup, true
}

// HasSystemGroup returns a boolean if a field has been set.
func (o *TrustedCertificateGroup) HasSystemGroup() bool {
	if o != nil && !IsNil(o.SystemGroup) {
		return true
	}

	return false
}

// SetSystemGroup gets a reference to the given bool and assigns it to the SystemGroup field.
func (o *TrustedCertificateGroup) SetSystemGroup(v bool) {
	o.SystemGroup = &v
}

// GetIgnoreAllCertificateErrors returns the IgnoreAllCertificateErrors field value if set, zero value otherwise.
func (o *TrustedCertificateGroup) GetIgnoreAllCertificateErrors() bool {
	if o == nil || IsNil(o.IgnoreAllCertificateErrors) {
		var ret bool
		return ret
	}
	return *o.IgnoreAllCertificateErrors
}

// GetIgnoreAllCertificateErrorsOk returns a tuple with the IgnoreAllCertificateErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetIgnoreAllCertificateErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreAllCertificateErrors) {
		return nil, false
	}
	return o.IgnoreAllCertificateErrors, true
}

// HasIgnoreAllCertificateErrors returns a boolean if a field has been set.
func (o *TrustedCertificateGroup) HasIgnoreAllCertificateErrors() bool {
	if o != nil && !IsNil(o.IgnoreAllCertificateErrors) {
		return true
	}

	return false
}

// SetIgnoreAllCertificateErrors gets a reference to the given bool and assigns it to the IgnoreAllCertificateErrors field.
func (o *TrustedCertificateGroup) SetIgnoreAllCertificateErrors(v bool) {
	o.IgnoreAllCertificateErrors = &v
}

// GetSkipCertificateDateCheck returns the SkipCertificateDateCheck field value if set, zero value otherwise.
func (o *TrustedCertificateGroup) GetSkipCertificateDateCheck() bool {
	if o == nil || IsNil(o.SkipCertificateDateCheck) {
		var ret bool
		return ret
	}
	return *o.SkipCertificateDateCheck
}

// GetSkipCertificateDateCheckOk returns a tuple with the SkipCertificateDateCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetSkipCertificateDateCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipCertificateDateCheck) {
		return nil, false
	}
	return o.SkipCertificateDateCheck, true
}

// HasSkipCertificateDateCheck returns a boolean if a field has been set.
func (o *TrustedCertificateGroup) HasSkipCertificateDateCheck() bool {
	if o != nil && !IsNil(o.SkipCertificateDateCheck) {
		return true
	}

	return false
}

// SetSkipCertificateDateCheck gets a reference to the given bool and assigns it to the SkipCertificateDateCheck field.
func (o *TrustedCertificateGroup) SetSkipCertificateDateCheck(v bool) {
	o.SkipCertificateDateCheck = &v
}

// GetRevocationChecking returns the RevocationChecking field value if set, zero value otherwise.
func (o *TrustedCertificateGroup) GetRevocationChecking() RevocationChecking {
	if o == nil || IsNil(o.RevocationChecking) {
		var ret RevocationChecking
		return ret
	}
	return *o.RevocationChecking
}

// GetRevocationCheckingOk returns a tuple with the RevocationChecking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetRevocationCheckingOk() (*RevocationChecking, bool) {
	if o == nil || IsNil(o.RevocationChecking) {
		return nil, false
	}
	return o.RevocationChecking, true
}

// HasRevocationChecking returns a boolean if a field has been set.
func (o *TrustedCertificateGroup) HasRevocationChecking() bool {
	if o != nil && !IsNil(o.RevocationChecking) {
		return true
	}

	return false
}

// SetRevocationChecking gets a reference to the given RevocationChecking and assigns it to the RevocationChecking field.
func (o *TrustedCertificateGroup) SetRevocationChecking(v RevocationChecking) {
	o.RevocationChecking = &v
}

// GetCertIds returns the CertIds field value if set, zero value otherwise.
func (o *TrustedCertificateGroup) GetCertIds() []int64 {
	if o == nil || IsNil(o.CertIds) {
		var ret []int64
		return ret
	}
	return o.CertIds
}

// GetCertIdsOk returns a tuple with the CertIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateGroup) GetCertIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.CertIds) {
		return nil, false
	}
	return o.CertIds, true
}

// HasCertIds returns a boolean if a field has been set.
func (o *TrustedCertificateGroup) HasCertIds() bool {
	if o != nil && !IsNil(o.CertIds) {
		return true
	}

	return false
}

// SetCertIds gets a reference to the given []int64 and assigns it to the CertIds field.
func (o *TrustedCertificateGroup) SetCertIds(v []int64) {
	o.CertIds = v
}

func (o TrustedCertificateGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustedCertificateGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.UseJavaTrustStore) {
		toSerialize["useJavaTrustStore"] = o.UseJavaTrustStore
	}
	if !IsNil(o.SystemGroup) {
		toSerialize["systemGroup"] = o.SystemGroup
	}
	if !IsNil(o.IgnoreAllCertificateErrors) {
		toSerialize["ignoreAllCertificateErrors"] = o.IgnoreAllCertificateErrors
	}
	if !IsNil(o.SkipCertificateDateCheck) {
		toSerialize["skipCertificateDateCheck"] = o.SkipCertificateDateCheck
	}
	if !IsNil(o.RevocationChecking) {
		toSerialize["revocationChecking"] = o.RevocationChecking
	}
	if !IsNil(o.CertIds) {
		toSerialize["certIds"] = o.CertIds
	}
	return toSerialize, nil
}

type NullableTrustedCertificateGroup struct {
	value *TrustedCertificateGroup
	isSet bool
}

func (v NullableTrustedCertificateGroup) Get() *TrustedCertificateGroup {
	return v.value
}

func (v *NullableTrustedCertificateGroup) Set(val *TrustedCertificateGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedCertificateGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedCertificateGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedCertificateGroup(val *TrustedCertificateGroup) *NullableTrustedCertificateGroup {
	return &NullableTrustedCertificateGroup{value: val, isSet: true}
}

func (v NullableTrustedCertificateGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedCertificateGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
