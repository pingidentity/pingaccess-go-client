/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OAuthKeyManagement An OAuth key management configuration.
type OAuthKeyManagement struct {
	// This field is true if key rollover is enabled. When false, PingAccess will not rollover keys at the configured interval.
	KeyRollEnabled *bool `json:"keyRollEnabled,omitempty"`
	// The interval (in hours) at which PingAccess will roll the keys. Key rollover updates keys at regular intervals to ensure the security of encrypted OAuth access tokens and encrypted OIDC id_tokens.
	KeyRollPeriodInHours *int64 `json:"keyRollPeriodInHours,omitempty"`
	// The signing algorithm used when creating tokens for private key JWT OAuth client authentication. When set to null or empty, the algorithm will be selected from the OpenID Provider metadata.
	SigningAlgorithm *string `json:"signingAlgorithm,omitempty"`
}

// NewOAuthKeyManagement instantiates a new OAuthKeyManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthKeyManagement() *OAuthKeyManagement {
	this := OAuthKeyManagement{}
	return &this
}

// NewOAuthKeyManagementWithDefaults instantiates a new OAuthKeyManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthKeyManagementWithDefaults() *OAuthKeyManagement {
	this := OAuthKeyManagement{}
	return &this
}

// GetKeyRollEnabled returns the KeyRollEnabled field value if set, zero value otherwise.
func (o *OAuthKeyManagement) GetKeyRollEnabled() bool {
	if o == nil || isNil(o.KeyRollEnabled) {
		var ret bool
		return ret
	}
	return *o.KeyRollEnabled
}

// GetKeyRollEnabledOk returns a tuple with the KeyRollEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthKeyManagement) GetKeyRollEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.KeyRollEnabled) {
    return nil, false
	}
	return o.KeyRollEnabled, true
}

// HasKeyRollEnabled returns a boolean if a field has been set.
func (o *OAuthKeyManagement) HasKeyRollEnabled() bool {
	if o != nil && !isNil(o.KeyRollEnabled) {
		return true
	}

	return false
}

// SetKeyRollEnabled gets a reference to the given bool and assigns it to the KeyRollEnabled field.
func (o *OAuthKeyManagement) SetKeyRollEnabled(v bool) {
	o.KeyRollEnabled = &v
}

// GetKeyRollPeriodInHours returns the KeyRollPeriodInHours field value if set, zero value otherwise.
func (o *OAuthKeyManagement) GetKeyRollPeriodInHours() int64 {
	if o == nil || isNil(o.KeyRollPeriodInHours) {
		var ret int64
		return ret
	}
	return *o.KeyRollPeriodInHours
}

// GetKeyRollPeriodInHoursOk returns a tuple with the KeyRollPeriodInHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthKeyManagement) GetKeyRollPeriodInHoursOk() (*int64, bool) {
	if o == nil || isNil(o.KeyRollPeriodInHours) {
    return nil, false
	}
	return o.KeyRollPeriodInHours, true
}

// HasKeyRollPeriodInHours returns a boolean if a field has been set.
func (o *OAuthKeyManagement) HasKeyRollPeriodInHours() bool {
	if o != nil && !isNil(o.KeyRollPeriodInHours) {
		return true
	}

	return false
}

// SetKeyRollPeriodInHours gets a reference to the given int64 and assigns it to the KeyRollPeriodInHours field.
func (o *OAuthKeyManagement) SetKeyRollPeriodInHours(v int64) {
	o.KeyRollPeriodInHours = &v
}

// GetSigningAlgorithm returns the SigningAlgorithm field value if set, zero value otherwise.
func (o *OAuthKeyManagement) GetSigningAlgorithm() string {
	if o == nil || isNil(o.SigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.SigningAlgorithm
}

// GetSigningAlgorithmOk returns a tuple with the SigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthKeyManagement) GetSigningAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.SigningAlgorithm) {
    return nil, false
	}
	return o.SigningAlgorithm, true
}

// HasSigningAlgorithm returns a boolean if a field has been set.
func (o *OAuthKeyManagement) HasSigningAlgorithm() bool {
	if o != nil && !isNil(o.SigningAlgorithm) {
		return true
	}

	return false
}

// SetSigningAlgorithm gets a reference to the given string and assigns it to the SigningAlgorithm field.
func (o *OAuthKeyManagement) SetSigningAlgorithm(v string) {
	o.SigningAlgorithm = &v
}

func (o OAuthKeyManagement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.KeyRollEnabled) {
		toSerialize["keyRollEnabled"] = o.KeyRollEnabled
	}
	if !isNil(o.KeyRollPeriodInHours) {
		toSerialize["keyRollPeriodInHours"] = o.KeyRollPeriodInHours
	}
	if !isNil(o.SigningAlgorithm) {
		toSerialize["signingAlgorithm"] = o.SigningAlgorithm
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthKeyManagement struct {
	value *OAuthKeyManagement
	isSet bool
}

func (v NullableOAuthKeyManagement) Get() *OAuthKeyManagement {
	return v.value
}

func (v *NullableOAuthKeyManagement) Set(val *OAuthKeyManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthKeyManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthKeyManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthKeyManagement(val *OAuthKeyManagement) *NullableOAuthKeyManagement {
	return &NullableOAuthKeyManagement{value: val, isSet: true}
}

func (v NullableOAuthKeyManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthKeyManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


