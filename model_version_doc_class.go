/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the VersionDocClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionDocClass{}

// VersionDocClass struct for VersionDocClass
type VersionDocClass struct {
	// The version of PingAccess.
	Version string `json:"version"`
}

// NewVersionDocClass instantiates a new VersionDocClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionDocClass(version string) *VersionDocClass {
	this := VersionDocClass{}
	this.Version = version
	return &this
}

// NewVersionDocClassWithDefaults instantiates a new VersionDocClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionDocClassWithDefaults() *VersionDocClass {
	this := VersionDocClass{}
	return &this
}

// GetVersion returns the Version field value
func (o *VersionDocClass) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VersionDocClass) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VersionDocClass) SetVersion(v string) {
	o.Version = v
}

func (o VersionDocClass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionDocClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableVersionDocClass struct {
	value *VersionDocClass
	isSet bool
}

func (v NullableVersionDocClass) Get() *VersionDocClass {
	return v.value
}

func (v *NullableVersionDocClass) Set(val *VersionDocClass) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionDocClass) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionDocClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionDocClass(val *VersionDocClass) *NullableVersionDocClass {
	return &NullableVersionDocClass{value: val, isSet: true}
}

func (v NullableVersionDocClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionDocClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
