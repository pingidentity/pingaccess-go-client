/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VersionDocClass struct for VersionDocClass
type VersionDocClass struct {
	Version string `json:"version"`
}

// NewVersionDocClass instantiates a new VersionDocClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionDocClass(version string) *VersionDocClass {
	this := VersionDocClass{}
	this.Version = version
	return &this
}

// NewVersionDocClassWithDefaults instantiates a new VersionDocClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionDocClassWithDefaults() *VersionDocClass {
	this := VersionDocClass{}
	return &this
}

// GetVersion returns the Version field value
func (o *VersionDocClass) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VersionDocClass) GetVersionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VersionDocClass) SetVersion(v string) {
	o.Version = v
}

func (o VersionDocClass) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableVersionDocClass struct {
	value *VersionDocClass
	isSet bool
}

func (v NullableVersionDocClass) Get() *VersionDocClass {
	return v.value
}

func (v *NullableVersionDocClass) Set(val *VersionDocClass) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionDocClass) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionDocClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionDocClass(val *VersionDocClass) *NullableVersionDocClass {
	return &NullableVersionDocClass{value: val, isSet: true}
}

func (v NullableVersionDocClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionDocClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


