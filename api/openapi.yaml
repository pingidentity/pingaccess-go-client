openapi: 3.0.1
info:
  contact:
    name: Ping Identity
    url: https://www.pingidentity.com
  description: The PingAccess Administrative API is a REST-based interface that provides
    a programmatic way to make configuration changes to PingAccess.
  title: PingAccess Administrative API
  version: 7.1.3.0
servers:
- url: /
paths:
  /accessTokenValidators:
    get:
      description: Get all Access Token Validators
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Access Token Validators per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Access Token Validator with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Access Token Validator by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Access Token Validator attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenValidators'
          description: Success
    post:
      description: Create an Access Token Validator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenValidator'
        description: Access Token Validator to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenValidator'
          description: Success
  /accessTokenValidators/descriptors:
    get:
      description: Get descriptors for all Access Token Validators
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /accessTokenValidators/{id}:
    delete:
      description: Delete a Access Token Validator
      parameters:
      - description: ID of Access Token Validator to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Access Token Validator
      parameters:
      - description: ID of Access Token Validator to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenValidator'
          description: Success
    put:
      description: Update an Access Token Validator
      parameters:
      - description: ID of Access Token Validator to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenValidator'
        description: Access Token Validator to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenValidator'
          description: Success
  /acme/servers:
    get:
      description: Get all ACME Servers
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of ACME Servers per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for ACME Server with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific ACME Server by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of ACME Server attributes (keys) to be
          used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeServers'
          description: Success
    post:
      description: Add an ACME Server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcmeServer'
        description: ACME Server to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeServer'
          description: Success
  /acme/servers/default:
    get:
      description: Get the default ACME Server
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Success
    put:
      description: Update the default ACME Server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
        description: ACME Server to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Success
  /acme/servers/{acmeServerId}:
    delete:
      description: Delete an ACME Server
      parameters:
      - description: ID of ACME Server to delete
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeServer'
          description: Success
    get:
      description: Get an ACME Server
      parameters:
      - description: ID of ACME Server to get
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeServer'
          description: Success
  /acme/servers/{acmeServerId}/accounts:
    get:
      description: Get all ACME Accounts
      parameters:
      - description: ID of ACME Server that holds accounts
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of ACME Accounts per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: A comma separated list of ACME Account attributes (keys) to be
          used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeAccount'
          description: Success
    post:
      description: Add an ACME Account
      parameters:
      - description: ACME Server to add account to
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcmeAccount'
        description: ACME Account to add
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeAccount'
          description: Success
  /acme/servers/{acmeServerId}/accounts/{acmeAccountId}:
    delete:
      description: Delete an ACME Account
      parameters:
      - description: ID of ACME Server that holds account
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of ACME Account to delete
        explode: false
        in: path
        name: acmeAccountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeAccount'
          description: Success
    get:
      description: Get an ACME Account
      parameters:
      - description: ID of ACME Server that holds account
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of ACME Account to get
        explode: false
        in: path
        name: acmeAccountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeAccount'
          description: Success
  /acme/servers/{acmeServerId}/accounts/{acmeAccountId}/certificateRequests:
    get:
      description: Get all ACME Certificate Requests
      parameters:
      - description: ID of the ACME Server
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the ACME Account
        explode: false
        in: path
        name: acmeAccountId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the Key Pair
        explode: true
        in: query
        name: keyPairId
        required: false
        schema:
          type: string
        style: form
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of ACME Certificate Requests per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: A comma separated list of ACME Certificate Request attributes
          (keys) to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeCertificateRequest'
          description: Success
    post:
      description: Initiate the ACME protocol
      parameters:
      - description: ACME Server that the account belongs to
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      - description: ACME Account to add certificate to
        explode: false
        in: path
        name: acmeAccountId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcmeCertificateRequest'
        description: ACME Certificate Request data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeCertificateRequest'
          description: Success
  /acme/servers/{acmeServerId}/accounts/{acmeAccountId}/certificateRequests/{acmeCertificateRequestId}:
    delete:
      description: Delete an ACME Certificate Request
      parameters:
      - description: ID of ACME Server that holds account
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of an ACME Account
        explode: false
        in: path
        name: acmeAccountId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of ACME Certificate Request to delete
        explode: false
        in: path
        name: acmeCertificateRequestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeCertificateRequest'
          description: Success
    get:
      description: Get an ACME Certificate Request
      parameters:
      - description: ID of ACME Server that holds account
        explode: false
        in: path
        name: acmeServerId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the ACME Account
        explode: false
        in: path
        name: acmeAccountId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of ACME Certificate Request to get
        explode: false
        in: path
        name: acmeCertificateRequestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeCertificateRequest'
          description: Success
  /adminConfig:
    delete:
      description: Resets the Admin Config to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the Admin Config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminConfiguration'
          description: Success
    put:
      description: Update the Admin Config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminConfiguration'
        description: Updated admin configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminConfiguration'
          description: Success
  /adminConfig/replicaAdmins:
    get:
      description: Get list of ReplicaAdmins
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicaAdmins'
          description: Success
    post:
      description: Add a ReplicaAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicaAdmin'
        description: AdminReplica to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicaAdmin'
          description: Success
  /adminConfig/replicaAdmins/{id}:
    delete:
      description: Delete a ReplicaAdmin
      parameters:
      - description: ID of the replicaAdmin to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a ReplicaAdmin
      parameters:
      - description: ID of replicaAdmin to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicaAdmin'
          description: Success
    put:
      description: Update a ReplicaAdmin
      parameters:
      - description: ID of ReplicaAdmin to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicaAdmin'
        description: ReplicaAdmin to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicaAdmin'
          description: Success
  /adminConfig/replicaAdmins/{id}/config:
    post:
      description: Get configuration file for a given ReplicaAdmin
      parameters:
      - description: ID of replicaAdmin to get configuration for
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
  /adminSessionInfo:
    delete:
      description: Invalidate the Admin session information
      responses:
        "200":
          description: Success
    get:
      description: Return the Admin session information
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
          description: Success
  /adminSessionInfo/checkOnly:
    get:
      description: Return the Admin session information without affecting session
        expiration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
          description: Success
  /agents:
    get:
      description: Get all Agents
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Agents per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Agents with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get Agents by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Agent attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agents'
          description: Success
    post:
      description: Add an Agent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        description: Agent to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: Success
  /agents/certificates:
    get:
      description: Get all Agent Certificates
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Agent Certificates per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Agent Certificates with alias matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get Agent Certificates by alias
        explode: true
        in: query
        name: alias
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Agent Certificate attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentCertificates'
          description: Success
  /agents/certificates/{id}:
    get:
      description: Get an Agent Certificate
      parameters:
      - description: ID of Certificate to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentCertificate'
          description: Success
  /agents/{agentId}/config/{sharedSecretId}:
    get:
      description: Get a configuration file for an Agent
      parameters:
      - description: ID of Agent
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of Shared Secret
        explode: false
        in: path
        name: sharedSecretId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
  /agents/{id}:
    delete:
      description: Delete an Agent
      parameters:
      - description: ID of the Agent to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Agent
      parameters:
      - description: ID of Agent to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: Success
    put:
      description: Update an Agent
      parameters:
      - description: ID of Agent
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        description: Agent to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: Success
  /applications:
    get:
      description: Get all Applications
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Applications with Site
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Applications per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Applications with Agent
        explode: true
        in: query
        name: agentId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Applications with Sideband Client
        explode: true
        in: query
        name: sidebandClientId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Applications with Virtual Host
        explode: true
        in: query
        name: virtualHostId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Applications with Rule attached to an Application
          or one of its Resources
        explode: true
        in: query
        name: ruleId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Applications with Rule Set attached to an Application
          or one of its Resources
        explode: true
        in: query
        name: rulesetId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Applications with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get an Application by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Application attributes (keys) to be
          used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applications'
          description: Success
    post:
      description: Add an Application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        description: Application to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Success
  /applications/reserved:
    delete:
      description: Resets the Reserved Application configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get Reserved Application configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservedApplication'
          description: Success
    put:
      description: Update Reserved Application configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservedApplication'
        description: Reserved Application configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservedApplication'
          description: Success
  /applications/resources:
    get:
      description: Get all Resources
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Resources per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Get Resources with Rule
        explode: true
        in: query
        name: ruleId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Get Resources with Rule Set
        explode: true
        in: query
        name: rulesetId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Get Resources by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Search for Resources with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Resource attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resources'
          description: Success
  /applications/resources/methods:
    get:
      description: Get Application Resource Methods
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Methods'
          description: Success
  /applications/resources/responseGenerators/descriptors:
    get:
      description: Get descriptors for all Application Resource Response Generators
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /applications/resources/responseGenerators/descriptors/{responseGeneratorType}:
    get:
      description: Get descriptor for a Response Generator type
      parameters:
      - description: Response Generator descriptor to retrieve
        explode: false
        in: path
        name: responseGeneratorType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /applications/{applicationId}/resources/{resourceId}:
    delete:
      description: Delete an Application Resource
      parameters:
      - description: ID of Application
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the Resource to delete
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Application Resource
      parameters:
      - description: ID of Application
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the Resource to get
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Success
    put:
      description: Update an Application Resource
      parameters:
      - description: ID of Application
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of Resource to update
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        description: Resource to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Success
  /applications/{id}:
    delete:
      description: Delete an Application
      parameters:
      - description: ID of Application to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Application
      parameters:
      - description: ID of Application to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Success
    put:
      description: Update an Application
      parameters:
      - description: ID of Application to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        description: Application to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Success
  /applications/{id}/resourceMatchingEvaluationOrder:
    get:
      description: Get the resource path ordering for an Application
      parameters:
      - description: ID of Application to compute resource ordering for
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMatchingEvaluationOrder'
          description: Success
  /applications/{id}/resources:
    get:
      description: Get Resources for an Application
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Resources per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ID of Application to get Resources for
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Get a Resource by name and application Id
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Search for Resources with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Resource attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resources'
          description: Success
    post:
      description: Add Resource to an Application
      parameters:
      - description: ID of Application to add Resource to
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        description: Resource to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Success
  /applications/{id}/resources/autoOrder:
    get:
      description: "Computes an automatic, intelligent resource ordering for an Application."
      parameters:
      - description: ID of Application to compute resource ordering for
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOrder'
          description: Success
  /auth/basic:
    delete:
      description: Resets the HTTP Basic Authentication configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the HTTP Basic Authentication configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicConfig'
          description: Success
    put:
      description: Update the Basic Authentication configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAuthConfig'
        description: Basic configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuthConfig'
          description: Success
  /auth/oauth:
    delete:
      description: Resets the OAuth Authentication configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the OAuth Authentication configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthConfig'
          description: Success
    put:
      description: Update the OAuth Authentication configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthConfig'
        description: OAuth configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthConfig'
          description: Success
  /auth/oidc:
    delete:
      description: Resets the OIDC Authentication configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the OIDC Authentication configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OidcConfig'
          description: Success
    put:
      description: Update the OIDC Authentication configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OidcConfig'
        description: OIDC configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OidcConfig'
          description: Success
  /auth/oidc/scopes:
    get:
      description: Get the scopes supported by the current Admin OIDC Provider
      parameters:
      - description: ID of a specific client to retrieve supported scopes for
        explode: true
        in: query
        name: clientId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedScopes'
          description: Success
  /auth/tokenProvider:
    delete:
      description: Resets the Admin Token Provider configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the Admin Token Provider configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTokenProvider'
          description: Success
    put:
      description: Update the Admin Token Provider configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminTokenProvider'
        description: Admin Token Provider configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTokenProvider'
          description: Success
  /auth/tokenProvider/metadata:
    get:
      description: Get the Admin Token Provider metadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCProviderMetadata'
          description: Success
  /auth/webSession:
    delete:
      description: Resets the Admin Web Session configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the admin web session configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminBasicWebSession'
          description: Success
    put:
      description: Update the admin web session configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminBasicWebSession'
        description: admin web session configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminBasicWebSession'
          description: Success
  /authTokenManagement:
    delete:
      description: Resets the Auth Token Management configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the Auth Token Management configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenManagement'
          description: Success
    put:
      description: Update the Auth Token Management configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenManagement'
        description: AuthTokenManagement configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenManagement'
          description: Success
  /authTokenManagement/keySet:
    get:
      description: Get the Auth Token key set configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Success
    put:
      description: Update the AuthToken key set configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySet'
        description: AuthToken key set configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Success
  /authenticationChallengePolicies:
    get:
      description: Get all Authentication Challenge Policies
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Authentication Challenge Policies per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for an Authentication Challenge Policy with name matching
          filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Authentication Challenge Policy by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Authentication Challenge Policy attributes
          (keys) to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationChallengePolicies'
          description: Success
    post:
      description: Create an Authentication Challenge Policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationChallengePolicy'
        description: Authentication Challenge Policy to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationChallengePolicy'
          description: Success
  /authenticationChallengePolicies/requestMatchers/descriptors:
    get:
      description: Get the descriptors for all the Authentication Challenge Policy
        Request Matchers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /authenticationChallengePolicies/requestMatchers/descriptors/{requestMatcherType}:
    get:
      description: Get the descriptor for an Authentication Challenge Policy Request
        Matcher type
      parameters:
      - description: Request Matcher descriptor to retrieve
        explode: false
        in: path
        name: requestMatcherType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /authenticationChallengePolicies/responseFilters/descriptors:
    get:
      description: Get the descriptors for all the Authentication Challenge Policy
        Response Filtersr
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /authenticationChallengePolicies/responseFilters/descriptors/{responseFilterType}:
    get:
      description: Get the descriptor for an Authentication Challenge Policy Response
        Filter type
      parameters:
      - description: Response Filter descriptor to retrieve
        explode: false
        in: path
        name: responseFilterType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /authenticationChallengePolicies/responseGenerators/descriptors:
    get:
      description: Get the descriptors for all the Authentication Challenge Policy
        Response Generators
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /authenticationChallengePolicies/responseGenerators/descriptors/{responseGeneratorType}:
    get:
      description: Get the descriptor for an Authentication Challenge Policy Response
        Generator type
      parameters:
      - description: Response Generator descriptor to retrieve
        explode: false
        in: path
        name: responseGeneratorType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /authenticationChallengePolicies/{id}:
    delete:
      description: Delete an Authentication Challenge Policy
      parameters:
      - description: ID of Authentication Challenge Policy to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Authentication Challenge Policy
      parameters:
      - description: ID of Authentication Challenge Policy to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationChallengePolicy'
          description: Success
    put:
      description: Update an Authentication Challenge Policy
      parameters:
      - description: ID of the Authentication Challenge Policy to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationChallengePolicy'
        description: Authentication Challenge Policy to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationChallengePolicy'
          description: Success
  /authnReqLists:
    get:
      description: Get all Authentication Requirement Lists
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Authentication Requirements per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Authentication Requirements with name matching filter
          text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get specific Authentication Requirements by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Authentication Requirements attributes
          (keys) to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnReqLists'
          description: Success
    post:
      description: Add an Authentication Requirement List
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthnReqList'
        description: Authentication Requirement List to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnReqList'
          description: Success
  /authnReqLists/{id}:
    delete:
      description: Delete an Authentication Requirement List
      parameters:
      - description: ID of the Authentication Requirement List to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Authentication Requirement List
      parameters:
      - description: ID of Authentication Requirement List to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnReqList'
          description: Success
    put:
      description: Update an Authentication Requirement List
      parameters:
      - description: ID of Authentication Requirement List to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthnReqList'
        description: Authentication Requirement List to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnReqList'
          description: Success
  /backup:
    get:
      description: Create a local database backup
      responses:
        "200":
          description: Success
  /certificates:
    get:
      description: Get all Certificates
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Trusted Certificates per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Trusted Certificates with alias matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Trusted Certificate by alias
        explode: true
        in: query
        name: alias
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Trusted Certificate attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCerts'
          description: Success
    post:
      description: Import a Certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/X509FileImportDoc'
        description: Certificate to import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCert'
          description: Success
  /certificates/{id}:
    delete:
      description: Delete a Certificate
      parameters:
      - description: ID of the Certificate to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Certificate
      parameters:
      - description: ID of Certificate to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCert'
          description: Success
    put:
      description: Update a Certificate
      parameters:
      - description: ID of Certificate to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/X509FileImportDoc'
        description: Certificate to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCert'
          description: Success
  /certificates/{id}/file:
    get:
      description: Export a Certificate
      parameters:
      - description: ID of the Certificate to export
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
  /config/export:
    get:
      description: "Export a JSON backup. This endpoint is not suitable for configurations\
        \ that take longer than 30 seconds to export. For those configurations, use\
        \ the \"/config/export/workflows\" endpoint instead."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportData'
          description: Success
  /config/export/workflows:
    get:
      description: Get the status of pending Exports
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStatuses'
          description: Success
    post:
      description: Start a JSON backup of the entire system for export
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStatus'
          description: Success
  /config/export/workflows/{id}:
    get:
      description: Check the status of an Export
      parameters:
      - description: Id of Export to poll
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStatus'
          description: Success
  /config/export/workflows/{id}/data:
    get:
      description: Export a JSON backup of the entire system
      parameters:
      - description: ID of Export to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportData'
          description: Success
  /config/import:
    post:
      description: "Import a JSON backup. This endpoint is not suitable for configurations\
        \ that take longer than 30 seconds to import. For those configurations, use\
        \ the \"/config/import/workflows\" endpoint instead."
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: JSON backup file to import
        required: true
      responses:
        "200":
          description: Success
  /config/import/workflows:
    get:
      description: Get the status of pending imports
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStatuses'
          description: Success
    post:
      description: Start an Import of a JSON backup.
      parameters:
      - description: "When set to true, stops the import as soon as any validation\
          \ errors are encountered. When false,  import will continue to validate\
          \ configuration after the first failure to identify all validation errors.\
          \ If any validation errors are present PingAccess will revert back to the\
          \ state prior to import attempt."
        explode: true
        in: query
        name: failFast
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportData'
        description: JSON backup file to import
        required: true
      responses:
        "200":
          description: Success
  /config/import/workflows/{id}:
    get:
      description: Check the status of an Import
      parameters:
      - description: Id of Import to poll
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStatus'
          description: Success
  /defaults/entities/application:
    delete:
      description: Resets the Application Defaults to their default values
      responses:
        "200":
          description: Success
    get:
      description: Get the default application settings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDefaults'
          description: Success
    put:
      description: Update the default application settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationDefaults'
        description: Application Defaults
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDefaults'
          description: Success
  /engineListeners:
    get:
      description: Get all Engine Listeners
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Engine Listeners per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Engine Listeners with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get an Engine Listener by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Engine Listener attributes (keys) to
          be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineListeners'
          description: Success
    post:
      description: Create an Engine Listener
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EngineListener'
        description: Engine Listener to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineListener'
          description: Success
  /engineListeners/{id}:
    delete:
      description: Delete an Engine Listener
      parameters:
      - description: ID of the Engine Listener to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Engine Listener
      parameters:
      - description: ID of Engine Listener to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineListener'
          description: Success
    put:
      description: Update an Engine Listener
      parameters:
      - description: ID of Engine Listener to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EngineListener'
        description: Engine Listener to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineListener'
          description: Success
  /engines:
    get:
      description: Get all Engines
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Engines per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Engines with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Engines by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Engine attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engines'
          description: Success
    post:
      description: Add an Engine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Engine'
        description: Engine to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engine'
          description: Success
  /engines/certificates:
    get:
      description: Get all Engine Certificates
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Engine Certificates per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Engine Certificates with alias matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get Engine Certificates by alias
        explode: true
        in: query
        name: alias
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Engine Certificate attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineCertificates'
          description: Success
  /engines/certificates/{id}:
    get:
      description: Get an Engine Certificate
      parameters:
      - description: ID of Certificate to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineCertificate'
          description: Success
  /engines/registration/token:
    post:
      description: Get a JWT to use for engine self-registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EngineRegistrationToken'
        description: The required data to generate an engine self-registration token
        required: true
      responses:
        "200":
          description: Success
  /engines/status:
    get:
      description: Get health status of all Engines
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineHealthStatus'
          description: Success
  /engines/{id}:
    delete:
      description: Delete an Engine
      parameters:
      - description: ID of the engine to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Engine
      parameters:
      - description: ID of engine to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engine'
          description: Success
    put:
      description: Update an Engine
      parameters:
      - description: ID of engine to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Engine'
        description: Engine to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engine'
          description: Success
  /engines/{id}/config:
    post:
      description: Get configuration file for an Engine
      parameters:
      - description: ID of engine to get configuration for
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
  /environment:
    delete:
      description: Resets the Environment configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the Environment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: Success
    put:
      description: Update the Environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
        description: Environment configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: Success
  /globalUnprotectedResources:
    get:
      description: Get all Global Unprotected Resources
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Global Unprotected Resources per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Global Unprotected Resources with name matching filter
          text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get Global Unprotected Resources by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Global Unprotected Resource attributes
          (keys) to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalUnprotectedResources'
          description: Success
    post:
      description: Add a Global Unprotected Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalUnprotectedResource'
        description: Global Unprotected Resource to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalUnprotectedResource'
          description: Success
  /globalUnprotectedResources/{id}:
    delete:
      description: Delete a Global Unprotected Resource
      parameters:
      - description: ID of Global Unprotected Resource to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Global Unprotected Resource
      parameters:
      - description: ID of Global Unprotected Resource to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalUnprotectedResource'
          description: Success
    put:
      description: Update a Global Unprotected Resource
      parameters:
      - description: ID of Global Unprotected Resource to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalUnprotectedResource'
        description: Global Unprotected Resource to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalUnprotectedResource'
          description: Success
  /highAvailability/availabilityProfiles:
    get:
      description: Get all Availability Profiles
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Availability Profiles per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Availability Profile with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Availability Profile by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Availability Profile attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityProfiles'
          description: Success
    post:
      description: Create an Availability Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityProfile'
        description: Availability Profile to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityProfile'
          description: Success
  /highAvailability/availabilityProfiles/descriptors:
    get:
      description: Get descriptors for all Availability Profiles
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /highAvailability/availabilityProfiles/descriptors/{availabilityProfileType}:
    get:
      description: Get a descriptor for an Availability Profile
      parameters:
      - description: Availability Profile descriptor to retrieve
        explode: false
        in: path
        name: availabilityProfileType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /highAvailability/availabilityProfiles/{id}:
    delete:
      description: Delete an Availability Profile
      parameters:
      - description: ID of the Availability Profile to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Availability Profile
      parameters:
      - description: ID of Availability Profile to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityProfile'
          description: Success
    put:
      description: Update an Availability Profile
      parameters:
      - description: ID of Availability Profile to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityProfile'
        description: Availability Profile to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityProfile'
          description: Success
  /highAvailability/loadBalancingStrategies:
    get:
      description: Get all Load Balancing Strategies
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Load Balancing Strategies per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Load Balancing Strategies with name matching filter
          text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Load Balancing Strategy by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Load Balancing Strategy attributes
          (keys) to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancingStrategies'
          description: Success
    post:
      description: Create a Load Balancing Strategy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancingStrategy'
        description: Load Balancing Strategy to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancingStrategy'
          description: Success
  /highAvailability/loadBalancingStrategies/descriptors:
    get:
      description: Get descriptors for all Load Balancing Strategies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /highAvailability/loadBalancingStrategies/descriptors/{loadBalancingStrategyType}:
    get:
      description: Get a descriptor for a Load Balancing Strategy
      parameters:
      - description: Load Balancing Strategy descriptor to retrieve
        explode: false
        in: path
        name: loadBalancingStrategyType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /highAvailability/loadBalancingStrategies/{id}:
    delete:
      description: Delete a Load Balancing Strategy
      parameters:
      - description: ID of the load balancing strategy to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Load Balancing Strategy
      parameters:
      - description: ID of Load Balancing Strategy to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancingStrategy'
          description: Success
    put:
      description: Update a Load Balancing Strategy
      parameters:
      - description: ID of Load Balancing Strategy to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancingStrategy'
        description: Load Balancing Strategy to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancingStrategy'
          description: Success
  /hsmProviders:
    get:
      description: Get all HSM Providers
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of HSM Providers per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for HSM Provider with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific HSM Provider by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of HSM Provider attributes (keys) to be
          used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HsmProvider'
          description: Success
    post:
      description: Create an HSM Provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HsmProvider'
        description: HSM Provider to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HsmProvider'
          description: Success
  /hsmProviders/descriptors:
    get:
      description: Get descriptors for all HSM Providers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /hsmProviders/{id}:
    delete:
      description: Delete an HSM Provider
      parameters:
      - description: ID of HSM Provider to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an HSM Provider
      parameters:
      - description: ID of HSM Provider to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HsmProvider'
          description: Success
    put:
      description: Update an HSM Provider
      parameters:
      - description: ID of HSM Provider to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HsmProvider'
        description: HSM Provider to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HsmProvider'
          description: Success
  /httpConfig/monitoring:
    delete:
      description: Resets the HTTP monitoring auditLevel to default value
      responses:
        "200":
          description: Success
    get:
      description: Get the HTTP monitoring auditLevel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpMonitoring'
          description: Success
    put:
      description: Update the HTTP monitoring auditLevel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpMonitoring'
        description: Http Monitoring
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpMonitoring'
          description: Success
  /httpConfig/request/hostSource:
    delete:
      description: Resets the HTTP request Host Source type to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the HTTP request Host Source type
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMultiValueSource'
          description: Success
    put:
      description: Update the HTTP request Host Source type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostMultiValueSource'
        description: Host source type to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMultiValueSource'
          description: Success
  /httpConfig/request/ipSource:
    delete:
      description: Resets the HTTP request IP Source type to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the HTTP request IP Source type
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IpMultiValueSource'
          description: Success
    put:
      description: Update the HTTP request IP Source type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IpMultiValueSource'
        description: IP source type to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IpMultiValueSource'
          description: Success
  /httpConfig/request/protocolSource:
    delete:
      description: Resets the HTTP request Protocol Source type to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the HTTP request Protocol Source type
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolSource'
          description: Success
    put:
      description: Update the HTTP request Protocol Source type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolSource'
        description: Protocol source type to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolSource'
          description: Success
  /httpsListeners:
    get:
      description: Get all HTTPS Listeners
      parameters:
      - description: A comma separated list of HTTPS Listeners attributes (keys) to
          be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpsListeners'
          description: Success
  /httpsListeners/{id}:
    get:
      description: Get an HTTPS Listener
      parameters:
      - description: ID of HttpsListener to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpsListener'
          description: Success
    put:
      description: Update an HTTPS Listener
      parameters:
      - description: ID of HttpsListener to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpsListener'
        description: HttpsListener to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpsListener'
          description: Success
  /identityMappings:
    get:
      description: Get all Identity Mappings
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Identity Mappings per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Identity Mapping with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Identity Mapping by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Identity Mapping attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityMappings'
          description: Success
    post:
      description: Create an Identity Mapping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMapping'
        description: IdentityMapping to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityMapping'
          description: Success
  /identityMappings/descriptors:
    get:
      description: Get descriptors for all supported Identity Mapping types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /identityMappings/descriptors/{identityMappingType}:
    get:
      description: Get descriptor for an Identity Mapping type
      parameters:
      - description: Identity Mapping descriptor to retrieve
        explode: false
        in: path
        name: identityMappingType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /identityMappings/{id}:
    delete:
      description: Delete an Identity Mapping
      parameters:
      - description: ID of IdentityMapping to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get an Identity Mapping
      parameters:
      - description: ID of identityMapping to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityMapping'
          description: Success
    put:
      description: Update an Identity Mapping
      parameters:
      - description: ID of IdentityMapping to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMapping'
        description: IdentityMapping to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityMapping'
          description: Success
  /keyPairs:
    get:
      description: Get all Key Pairs
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Key Pairs per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Key Pairs with alias matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Key Pair by alias
        explode: true
        in: query
        name: alias
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Key Pair attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairs'
          description: Success
  /keyPairs/generate:
    post:
      description: Generate a Key Pair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewKeyPairConfig'
        description: Configuration for the new Key Pair
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPair'
          description: Success
  /keyPairs/import:
    post:
      description: Import a Key Pair from either a PKCS12 or PEM file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PKCS12FileImportDoc'
        description: Key Pair to import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPair'
          description: Success
  /keyPairs/keyAlgorithms:
    get:
      description: Get the key algorithms supported by Key Pair generation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAlgorithms'
          description: Success
  /keyPairs/subjectAlternativeTypes:
    get:
      description: Get the valid General Names for creating Subject Alternative Names
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanTypes'
          description: Success
  /keyPairs/{id}:
    delete:
      description: Delete a Key Pair
      parameters:
      - description: ID of the Key Pair to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Key Pair
      parameters:
      - description: ID of Key Pair to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPair'
          description: Success
    patch:
      description: Update the chainCertificates of a Key Pair
      parameters:
      - description: ID of Key Pair to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChainCertificatesDoc'
        description: A list of base64-encoded Chain Certificates
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPair'
          description: Success
    put:
      description: Update a Key Pair
      parameters:
      - description: ID of Key Pair to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PKCS12FileImportDoc'
        description: PKCS12 file containing the Key Pair
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPair'
          description: Success
  /keyPairs/{id}/certificate:
    get:
      description: Export only the Certificate from a Key Pair
      parameters:
      - description: ID of the Key Pair Certificate to export
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
  /keyPairs/{id}/csr:
    get:
      description: Generate a Certificate Signing Request for a Key Pair
      parameters:
      - description: ID of the Key Pair to sign
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    post:
      description: Import a Certificate Signing Request response
      parameters:
      - description: ID of the Key Pair to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSRResponseImportDoc'
        description: The Certificate Signing Request (CSR) response
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPair'
          description: Success
    put:
      description: Import a Certificate Signing Request response
      parameters:
      - description: ID of the Key Pair to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSRResponseImportDoc'
        description: The Certificate Signing Request (CSR) response
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPair'
          description: Success
  /keyPairs/{id}/pem:
    post:
      description: Export a Key Pair in the PEM file format
      parameters:
      - description: ID of the Key Pair to export
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportParameters'
        description: Parameters for the export
        required: true
      responses:
        "200":
          description: Success
  /keyPairs/{id}/pkcs12:
    post:
      description: Export a Key Pair in the PKCS12 file format
      parameters:
      - description: ID of the Key Pair to export
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportParameters'
        description: Parameters for the export
        required: true
      responses:
        "200":
          description: Success
  /keyPairs/{keyPairId}/chainCertificates/{chainCertificateId}:
    delete:
      description: Delete a Chain Certificate
      parameters:
      - description: ID of Key Pair
        explode: false
        in: path
        name: keyPairId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the Chain Certificate to delete
        explode: false
        in: path
        name: chainCertificateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
  /license:
    get:
      description: Get the License File
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
          description: Success
    post:
      description: Import a License
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseImportDoc'
        description: License to import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
          description: Success
    put:
      description: Import a License
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseImportDoc'
        description: License to import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
          description: Success
  /oauth/authServer:
    delete:
      description: Resets the OpenID Connect Provider configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get Authorization Server configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
          description: Success
    put:
      description: Update OAuth 2.0 Authorization Server configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServer'
        description: OAuth 2.0 Authorization Server configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
          description: Success
  /oauthKeyManagement:
    delete:
      description: Resets the OAuth Key Management configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the OAuth Key Management configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthKeyManagement'
          description: Success
    put:
      description: Update the OAuth Key Management configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthKeyManagement'
        description: OAuth Key Management configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthKeyManagement'
          description: Success
  /oauthKeyManagement/keySet:
    get:
      description: Get the OAuth key set configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Success
    put:
      description: Update the OAuth key set configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySet'
        description: OAuth key set configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Success
  /oidc/provider:
    delete:
      description: Resets the OpenID Connect Provider configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the OpenID Connect Provider configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCProvider'
          description: Success
    put:
      description: Update the OpenID Connect Provider configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OIDCProvider'
        description: OpenID Connect Provider configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCProvider'
          description: Success
  /oidc/provider/descriptors:
    get:
      description: Get descriptors for all OIDC Provider plugins
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /oidc/provider/descriptors/{pluginType}:
    get:
      description: Get a descriptor for a OIDC Provider plugin
      parameters:
      - description: OIDC Provider plugin descriptor to retrieve
        explode: false
        in: path
        name: pluginType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /oidc/provider/metadata:
    get:
      description: Get the OpenID Connect Provider's metadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCProviderMetadata'
          description: Success
  /pingfederate:
    delete:
      description: Resets the PingFederate configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the PingFederate configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateRuntime'
          description: Success
    put:
      description: Update the PingFederate configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingFederateRuntime'
        description: PingFederate configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateRuntime'
          description: Success
  /pingfederate/accessTokens:
    delete:
      description: Resets the PingAccess OAuth Client configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the PingAccess OAuth Client configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateAccessToken'
          description: Success
    put:
      description: Update the PingFederate OAuth Client configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingFederateAccessToken'
        description: PingFederate OAuth Client configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateAccessToken'
          description: Success
  /pingfederate/admin:
    delete:
      description: Resets the PingFederate Admin configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the PingFederate Admin configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateAdmin'
          description: Success
    put:
      description: Update the PingFederate Admin configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingFederateAdmin'
        description: PingFederate Admin configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateAdmin'
          description: Success
  /pingfederate/metadata:
    get:
      description: Get the PingFederate metadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCProviderMetadata'
          description: Success
  /pingfederate/runtime:
    delete:
      description: Resets the PingFederate configuration
      responses:
        "200":
          description: Success
    get:
      description: Get the PingFederate configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateMetadataRuntime'
          description: Success
    put:
      description: Update the PingFederate configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingFederateMetadataRuntime'
        description: PingFederate configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingFederateMetadataRuntime'
          description: Success
  /pingfederate/runtime/metadata:
    get:
      description: Get the PingFederate Runtime metadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCProviderMetadata'
          description: Success
  /pingone/customers:
    delete:
      description: Resets the PingOne For Customers configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the PingOne For Customers configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOne4C'
          description: Success
    put:
      description: Update the PingOne For Customers configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingOne4C'
        description: PingOne For Customers configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOne4C'
          description: Success
  /pingone/customers/metadata:
    get:
      description: Get the PingOne for Customers metadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCProviderMetadata'
          description: Success
  /proxies:
    get:
      description: Get all Proxies
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Proxies per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Proxies with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Proxy by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Proxy attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpClientProxy'
          description: Success
    post:
      description: Create a Proxy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpClientProxy'
        description: Proxy to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpClientProxy'
          description: Success
  /proxies/{id}:
    delete:
      description: Delete a Proxy
      parameters:
      - description: ID of Proxy to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Proxy
      parameters:
      - description: ID of Proxy to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpClientProxy'
          description: Success
    put:
      description: Update a Proxy
      parameters:
      - description: ID of Proxy to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpClientProxy'
        description: Proxy to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpClientProxy'
          description: Success
  /redirects:
    get:
      description: Get all Redirects
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Redirects per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Search for Redirects by source with host, port or both matching\
          \ filter text"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Search for a Redirect by a source host, port or both"
        explode: true
        in: query
        name: source
        required: false
        schema:
          type: string
        style: form
      - description: "Search for a Redirect by a target host, port or both"
        explode: true
        in: query
        name: target
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Redirect attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirects'
          description: Success
    post:
      description: Add a Redirect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Redirect'
        description: Redirect to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirect'
          description: Success
  /redirects/{id}:
    delete:
      description: Delete a Redirect
      parameters:
      - description: ID of Redirect to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Redirect
      parameters:
      - description: ID of Redirect to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirect'
          description: Success
    put:
      description: Update a Redirect
      parameters:
      - description: ID of Redirect to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Redirect'
        description: Redirect to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirect'
          description: Success
  /rejectionHandlers:
    get:
      description: Get all Rejection Handlers
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Rejection Handlers per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Rejection Handlers with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Rejection Handler by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Rejection Handler attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RejectionHandlers'
          description: Success
    post:
      description: Create a Rejection Handler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectionHandler'
        description: Rejection Handler to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RejectionHandler'
          description: Success
  /rejectionHandlers/descriptors:
    get:
      description: Get descriptors for all supported Rejection Handler types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /rejectionHandlers/descriptors/{rejectionHandlerType}:
    get:
      description: Get descriptor for a Rejection Handler type
      parameters:
      - description: Rejection Handler descriptor to retrieve
        explode: false
        in: path
        name: rejectionHandlerType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /rejectionHandlers/{id}:
    delete:
      description: Delete a Rejection Handler
      parameters:
      - description: ID of Rejection Handler to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Rejection Handler
      parameters:
      - description: ID of Rejection Handler to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RejectionHandler'
          description: Success
    put:
      description: Update a Rejection Handler
      parameters:
      - description: ID of Rejection Handler to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectionHandler'
        description: Rejection Handler to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RejectionHandler'
          description: Success
  /rules:
    get:
      description: Get all Rules
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Rules per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Rules with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Rule by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Rule attributes (keys) to be used to
          sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rules'
          description: Success
    post:
      description: Add a Rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
        description: Rule to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: Success
  /rules/descriptors:
    get:
      description: Get descriptors for all supported Rule types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDescriptors'
          description: Success
  /rules/descriptors/{ruleType}:
    get:
      description: Get descriptor for a Rule type
      parameters:
      - description: Rule descriptor to retrieve
        explode: false
        in: path
        name: ruleType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDescriptor'
          description: Success
  /rules/{id}:
    delete:
      description: Delete a Rule
      parameters:
      - description: ID of Rule to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Rule
      parameters:
      - description: ID of Rule to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: Success
    put:
      description: Update a Rule
      parameters:
      - description: ID of Rule to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
        description: Rule to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: Success
  /rulesets:
    get:
      description: Get all Rule Sets
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Rule Sets per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Rule Set with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Rule Set by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Rule Set attributes (keys) to be used
          to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSets'
          description: Success
    post:
      description: Add a Rule Set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleSet'
        description: Rule Set to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
          description: Success
  /rulesets/elementTypes:
    get:
      description: Get all Rule Set Element Types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSetElementTypes'
          description: Success
  /rulesets/successCriteria:
    get:
      description: Get all Success Criteria
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSetSuccessCriteria'
          description: Success
  /rulesets/{id}:
    delete:
      description: Delete a Rule Set
      parameters:
      - description: ID of Rule Set to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Rule Set
      parameters:
      - description: ID of Rule Set to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
          description: Success
    put:
      description: Update a Rule Set
      parameters:
      - description: ID of Rule Set to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleSet'
        description: Rule Set to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
          description: Success
  /sharedSecrets:
    get:
      description: Get all Shared Secrets
      parameters:
      - description: A comma separated list of Shared Secret attributes (keys) to
          be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedSecrets'
          description: Success
    post:
      description: Create a Shared Secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedSecret'
        description: Shared Secret to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedSecret'
          description: Success
  /sharedSecrets/{id}:
    delete:
      description: Delete a Shared Secret
      parameters:
      - description: ID of the Shared Secret to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Shared Secret
      parameters:
      - description: ID of the Shared Secret
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedSecret'
          description: Success
  /sidebandClients:
    get:
      description: Get all Sideband Clients
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Sideband Clients per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for an Sideband Clients with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a specific Sideband Clients by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Sideband Client attributes (keys) to
          be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SidebandClients'
          description: Success
    post:
      description: Create a Sideband Client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SidebandClient'
        description: Sideband Client to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SidebandClient'
          description: Success
  /sidebandClients/{id}:
    delete:
      description: Delete a Sideband Client
      parameters:
      - description: ID of Sideband Client to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Sideband Client
      parameters:
      - description: ID of Sideband client to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SidebandClient'
          description: Success
    put:
      description: Update a Sideband Client
      parameters:
      - description: ID of the Sideband Client to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SidebandClient'
        description: Sideband Client to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SidebandClient'
          description: Success
  /siteAuthenticators:
    get:
      description: Get all Site Authenticators
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Site Authenticators per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Site Authenticators with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Site Authenticator by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Site Authenticator attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteAuthenticators'
          description: Success
    post:
      description: Create a Site Authenticator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteAuthenticator'
        description: Site Authenticator to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteAuthenticator'
          description: Success
  /siteAuthenticators/descriptors:
    get:
      description: Get descriptors for all supported Site Authenticator types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptors'
          description: Success
  /siteAuthenticators/descriptors/{siteAuthenticatorType}:
    get:
      description: Get descriptor for a Site Authenticator type
      parameters:
      - description: Site Authenticator descriptor to retrieve
        explode: false
        in: path
        name: siteAuthenticatorType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptor'
          description: Success
  /siteAuthenticators/{id}:
    delete:
      description: Delete a Site Authenticator
      parameters:
      - description: ID of Site Authenticator to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Site Authenticator
      parameters:
      - description: ID of Site Authenticator to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteAuthenticator'
          description: Success
    put:
      description: Update a Site Authenticator
      parameters:
      - description: ID of Site Authenticator to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteAuthenticator'
        description: Site Authenticator to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteAuthenticator'
          description: Success
  /sites:
    get:
      description: Get all Sites
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Sites per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Sites with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Site by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Site attributes (keys) to be used to
          sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sites'
          description: Success
    post:
      description: Create a Site
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
        description: Site to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: Success
  /sites/{id}:
    delete:
      description: Delete a Site
      parameters:
      - description: ID of Site to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Site
      parameters:
      - description: ID of Site to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: Success
    put:
      description: Update a Site
      parameters:
      - description: ID of Site to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
        description: Site to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: Success
  /thirdPartyServices:
    get:
      description: Get all Third-Party Services
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Third-Party Services per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Third-Party Services with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Third-Party Service by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Third-Party Service attributes (keys)
          to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThirdPartyServices'
          description: Success
    post:
      description: Create a Third-Party Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThirdPartyService'
        description: Third-party service to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThirdPartyService'
          description: Success
  /thirdPartyServices/{id}:
    delete:
      description: Delete a Third-Party Service
      parameters:
      - description: ID of Third-Party Service to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Third-Party Service
      parameters:
      - description: ID of Third-Party Service to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThirdPartyService'
          description: Success
    put:
      description: Update a Third-Party Service
      parameters:
      - description: ID of Third-Party Service to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThirdPartyService'
        description: Third-Party Service to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThirdPartyService'
          description: Success
  /tokenProvider/settings:
    delete:
      description: Resets the Token Provider settings to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the Token Provider settings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProviderSetting'
          description: Success
    put:
      description: Update the Token Provider setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenProviderSetting'
        description: Token Provider Setting
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProviderSetting'
          description: Success
  /trustedCertificateGroups:
    get:
      description: Get all Trusted Certificate Groups
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Trusted Certificate Groups per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Trusted Certificate Groups with name matching filter
          text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Trusted Certificate Group by name (case-sensitive)
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Trusted Certificate Group attributes
          (keys) to be used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateGroups'
          description: Success
    post:
      description: Create a Trusted Certificate Group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustedCertificateGroup'
        description: Trusted Certificate Group to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateGroup'
          description: Success
  /trustedCertificateGroups/{id}:
    delete:
      description: Delete a Trusted Certificate Group
      parameters:
      - description: ID of the Trusted Certificate Group to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Trusted Certificate Group
      parameters:
      - description: ID of TrustedCertificateGroup to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateGroup'
          description: Success
    put:
      description: Update a TrustedCertificateGroup
      parameters:
      - description: ID of TrustedCertificateGroup to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustedCertificateGroup'
        description: TrustedCertificateGroup to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateGroup'
          description: Success
  /unknownResources/settings:
    delete:
      description: Resets the global settings for unknown resources to default values
      responses:
        "200":
          description: Success
    get:
      description: Retrieves the global settings for unknown resources
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownResourceSettings'
          description: Success
    put:
      description: Updates the global settings for unknown resources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnknownResourceSettings'
        description: The new settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownResourceSettings'
          description: Success
  /users:
    get:
      description: Get all Users
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Users per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Users with username matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get Users by username
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of User attributes (keys) to be used to
          sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          description: Success
  /users/{id}:
    get:
      description: 'Get a User '
      parameters:
      - description: ID of User to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
    put:
      description: Update a User
      parameters:
      - description: ID of User
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
  /users/{id}/password:
    put:
      description: Update a User's Password
      parameters:
      - description: ID of User
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPassword'
        description: User password to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPassword'
          description: Success
  /version:
    get:
      description: Get the PingAccess version number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionDocClass'
          description: Success
  /virtualhosts:
    get:
      description: Get all Virtual Hosts
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Virtual Hosts per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Virtual Hosts with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Get a Virtual Host by hostname, port or both"
        explode: true
        in: query
        name: virtualHost
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Virtual Host attributes (keys) to be
          used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHosts'
          description: Success
    post:
      description: Create a Virtual Host
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualHost'
        description: Virtual Host to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHost'
          description: Success
  /virtualhosts/{id}:
    delete:
      description: Delete a Virtual Host
      parameters:
      - description: ID of Virtual Host to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a Virtual Host
      parameters:
      - description: ID of Virtual Host to locate
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHost'
          description: Success
    put:
      description: Update a Virtual Host
      parameters:
      - description: ID of Virtual Host to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualHost'
        description: Updated Virtual Host
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHost'
          description: Success
  /webSessionManagement:
    delete:
      description: Resets the Web Session Management configuration to default values
      responses:
        "200":
          description: Success
    get:
      description: Get the Web Session Management configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSessionManagement'
          description: Success
    put:
      description: Update the Web Session Management configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSessionManagement'
        description: WebSessionManagement configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSessionManagement'
          description: Success
  /webSessionManagement/cookieTypes:
    get:
      description: Get the valid OIDC Cookie Types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CookieTypes'
          description: Success
  /webSessionManagement/encryptionAlgorithms:
    get:
      description: Get the valid algorithms for Web Session Cookie Encryption
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithms'
          description: Success
  /webSessionManagement/keySet:
    get:
      description: Get the Web Session key set configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Success
    put:
      description: Update the WebSession key set configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySet'
        description: WebSession key set configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Success
  /webSessionManagement/oidcLoginTypes:
    get:
      description: Get the valid OIDC Login Types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OidcLoginTypes'
          description: Success
  /webSessionManagement/oidcScopes:
    get:
      description: Get the scopes supported by the current OIDC Provider
      parameters:
      - description: ID of a specific client to retrieve supported scopes for
        explode: true
        in: query
        name: clientId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedScopes'
          description: Success
  /webSessionManagement/requestPreservationTypes:
    get:
      description: Get the valid Request Preservation Types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPreservationTypes'
          description: Success
  /webSessionManagement/signingAlgorithms:
    get:
      description: Get the valid algorithms for Web Session Cookie Signing
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningAlgorithms'
          description: Success
  /webSessionManagement/webStorageTypes:
    get:
      description: Get the valid Web Storage Types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebStorageTypes'
          description: Success
  /webSessions:
    get:
      description: Get all WebSessions
      parameters:
      - description: Page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of Web Sessions per page
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search for Web Sessions with name matching filter text
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Get a Web Sessions by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Web Session attributes (keys) to be
          used to sort the results
        explode: true
        in: query
        name: sortKey
        required: false
        schema:
          type: string
        style: form
      - description: "Order of the sorted results (ASC for ascending, DESC for descending)"
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSessions'
          description: Success
    post:
      description: Create a WebSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSession'
        description: WebSession to add
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSession'
          description: Success
  /webSessions/{id}:
    delete:
      description: Delete a WebSession
      parameters:
      - description: ID of WebSession to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
    get:
      description: Get a WebSession
      parameters:
      - description: ID of WebSession to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSession'
          description: Success
    put:
      description: Update a WebSession
      parameters:
      - description: ID of WebSession to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSession'
        description: WebSession to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSession'
          description: Success
components:
  schemas:
    AccessTokenValidator:
      description: An access token validator.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
      properties:
        className:
          description: (sortable) The access token validator's class name.
          type: string
        id:
          description: "When creating a new AccessTokenValidator, this is the ID for\
            \ the AccessTokenValidator. If not specified, an ID will be automatically\
            \ assigned. When updating an existing AccessTokenValidator, this field\
            \ is ignored and the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The access token validator's name.
          type: string
        configuration:
          description: The access token validator's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    AccessTokenValidators:
      description: A collection of access token validators.
      example:
        items:
        - configuration: configuration
          name: name
          className: className
          id: 0
        - configuration: configuration
          name: name
          className: className
          id: 0
      properties:
        items:
          description: The actual list of access token validators.
          items:
            $ref: '#/components/schemas/AccessTokenValidator'
          type: array
      required:
      - items
      type: object
    AcmeAccount:
      description: An ACME Account associated with a CA.
      example:
        privateKey:
          encryptedValue: encryptedValue
          value: value
        keyAlgorithm: keyAlgorithm
        id: id
        publicKey:
          created: 2000-01-23T04:56:07.000+00:00
          jwk: "{}"
        acmeServerId: acmeServerId
        url: url
      properties:
        id:
          description: "When creating a new AcmeAccount, this is the ID for the AcmeAccount.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing AcmeAccount, this field is ignored and the ID is determined\
            \ by the path parameter."
          type: string
        url:
          description: The URL the CA uses to reference the account.
          type: string
        keyAlgorithm:
          description: The key algorithm used to generate a key.
          type: string
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        privateKey:
          $ref: '#/components/schemas/HiddenField'
        acmeServerId:
          description: The associated ACME Server.
          type: string
      type: object
    AcmeCertState:
      enum:
      - PENDING
      - READY
      - PROCESSING
      - VALID
      - INVALID
      - UNKNOWN
      type: string
    AcmeCertStatus:
      description: The status of a certificate.
      example:
        state: null
        problems:
          key:
            detail: detail
            type: type
      properties:
        state:
          $ref: '#/components/schemas/AcmeCertState'
        problems:
          additionalProperties:
            $ref: '#/components/schemas/ProblemDocument'
          description: A map of problem documents for requested domains. The key is
            the domain and the value is a ProblemDocumentView.
          type: object
      required:
      - state
      type: object
    AcmeCertificateRequest:
      description: A reference to a Key Pair to be signed by the ACME protocol.
      example:
        acmeAccountId: acmeAccountId
        acmeCertStatus:
          state: null
          problems:
            key:
              detail: detail
              type: type
        id: id
        keyPairId: 0
        acmeServerId: acmeServerId
        url: url
      properties:
        id:
          description: "When creating a new AcmeCertificateRequest, this is the ID\
            \ for the AcmeCertificateRequest. If not specified, an ID will be automatically\
            \ assigned. When updating an existing AcmeCertificateRequest, this field\
            \ is ignored and the ID is determined by the path parameter."
          type: string
        keyPairId:
          description: The ID of the Key Pair for which a signed certificate will
            be requested.
          format: int32
          type: integer
        acmeCertStatus:
          $ref: '#/components/schemas/AcmeCertStatus'
        url:
          description: The URL at the ACME server for the associated ACME order.
          type: string
        acmeServerId:
          description: The ID of the ACME Server to be used for the ACME protocol.
            This is read-only.
          type: string
        acmeAccountId:
          description: The ID of the ACME Account to be used for the ACME protocol.
            This is read-only.
          type: string
      required:
      - keyPairId
      type: object
    AcmeServer:
      description: An ACME server.
      example:
        name: name
        id: id
        acmeAccounts:
        - location: location
          id: id
        - location: location
          id: id
        url: url
      properties:
        id:
          description: "When creating a new AcmeServer, this is the ID for the AcmeServer.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing AcmeServer, this field is ignored and the ID is determined\
            \ by the path parameter."
          type: string
        name:
          description: (sortable) A user-friendly name for the ACME server.
          type: string
        url:
          description: The URL of the ACME directory resource on the ACME server.
          type: string
        acmeAccounts:
          description: An array of references to accounts. This array is read-only.
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - name
      - url
      type: object
    AcmeServers:
      description: A collection of ACME servers.
      example:
        items:
        - name: name
          id: id
          acmeAccounts:
          - location: location
            id: id
          - location: location
            id: id
          url: url
        - name: name
          id: id
          acmeAccounts:
          - location: location
            id: id
          - location: location
            id: id
          url: url
      properties:
        items:
          description: An array of ACME servers.
          items:
            $ref: '#/components/schemas/AcmeServer'
          type: array
      required:
      - items
      type: object
    AdminAccessControlDirective:
      enum:
      - DENY_POLICY_CONFIGURATION
      - DENY_APPLICATION_CREATION
      - DENY_API_APPLICATION_CREATION
      - DENY_AUTH_REQ_CREATION
      - DENY_PING_FEDERATE_CONFIGURATION
      - DENY_THIRD_PARTY_OAUTH_CONFIGURATION
      - DENY_XPOST_WEBSESSION_CONFIGURATION
      - DENY_POST_WEBSESSION_CONFIGURATION
      - REQUIRE_AAD_TOKEN_PROVIDER_ISSUER
      - DENY_API_AUTHENTICATION_CONFIGURATION
      - DENY_CUSTOM_SITE_AUTHENTICATOR_CREATION
      - DENY_CUSTOM_LOAD_BALANCING_STRATEGY_CREATION
      - DENY_CUSTOM_AVAILABILITY_PROFILE_CREATION
      - DENY_CUSTOM_IDENTITY_MAPPING_CREATION
      - DENY_ADMIN_AUTHENTICATION_CONFIGURATION
      - DENY_ENVIRONMENT_CONFIGURATION
      - DENY_USERS_CONFIGURATION
      - DENY_WRITE_ACCESS
      - DENY_BULK_CONFIG_ACCESS
      type: string
    AdminBasicWebSession:
      description: An admin basic web session.
      example:
        cookieDomain: cookieDomain
        audience: audience
        sessionTimeoutInMinutes: 1
        expirationWarningInMinutes: 6
        idleTimeoutInMinutes: 5
        sessionPollIntervalInSeconds: 0
        cookieType: null
      properties:
        sessionPollIntervalInSeconds:
          description: The interval between UI polling for session validity.
          format: int32
          type: integer
        expirationWarningInMinutes:
          description: The time to have the UI display a warning before the session
            expires.
          format: int32
          type: integer
        sessionTimeoutInMinutes:
          description: "The length of time you want the PA Admin Token to remain active.\
            \ Once the PA Admin Token expires, an authenticated user must re-authenticate."
          format: int32
          type: integer
        audience:
          description: Enter a unique identifier between 1 and 32 characters that
            defines who the PA Admin Token is applicable to.
          type: string
        idleTimeoutInMinutes:
          description: The length of time you want the PingAccess Admin Token to remain
            active when no activity is detected.
          format: int32
          type: integer
        cookieType:
          $ref: '#/components/schemas/WebSessionCookieType'
        cookieDomain:
          description: "The domain where the cookie is stored--for example, corp.yourcompany.com."
          type: string
      required:
      - audience
      - cookieType
      - expirationWarningInMinutes
      - idleTimeoutInMinutes
      - sessionPollIntervalInSeconds
      - sessionTimeoutInMinutes
      type: object
    AdminConfiguration:
      description: An admin configuration.
      example:
        httpProxyId: 0
        httpsProxyId: 6
        hostPort: hostPort
      properties:
        hostPort:
          description: The primary host and port of the administrative console.
          type: string
        httpProxyId:
          description: The ID of the proxy to use for HTTP requests or zero if none.
          format: int32
          type: integer
        httpsProxyId:
          description: The ID of the proxy to use for HTTPS requests or zero if none.
          format: int32
          type: integer
      required:
      - hostPort
      type: object
    AdminTokenProvider:
      description: An Admin Token Provider.
      example:
        trustedCertificateGroupId: 0
        sslProtocols:
        - sslProtocols
        - sslProtocols
        sslCiphers:
        - sslCiphers
        - sslCiphers
        description: description
        useProxy: true
        issuer: issuer
      properties:
        description:
          description: The description of the Admin Token Provider.
          type: string
        issuer:
          description: The issuer url of the Admin Token Provider.
          type: string
        trustedCertificateGroupId:
          description: The group of certificates to use when authenticating to the
            Admin Token Provider.
          format: int32
          type: integer
        useProxy:
          description: True if a proxy should be used for HTTPS requests.
          type: boolean
        sslProtocols:
          description: Array of SSL protocolsto use for HTTPS requests. Empty to use
            all available protocols.
          items:
            type: string
          type: array
        sslCiphers:
          description: Array of SSL ciphers to use for HTTPS requests. Empty to use
            all available ciphers.
          items:
            type: string
          type: array
      required:
      - issuer
      - sslCiphers
      - sslProtocols
      type: object
    AdminWebSessionOidcConfiguration:
      description: An admin web session OIDC configuration.
      example:
        enableRefreshUser: true
        refreshUserInfoClaimsInterval: 6
        pfsessionStateCacheInSeconds: 1
        clientCredentials:
          clientId: clientId
          credentialsType: null
          clientSecret:
            encryptedValue: encryptedValue
            value: value
          keyPairId: 0
        pkceChallengeType: null
        oidcLoginType: null
        scopes:
        - scopes
        - scopes
        validateSessionIsAlive: true
        sendRequestedUrlToProvider: true
        cacheUserAttributes: true
      properties:
        refreshUserInfoClaimsInterval:
          description: Specify the maximum number of seconds to cache user attribute
            information when the Refresh User is enabled.
          format: int32
          type: integer
        sendRequestedUrlToProvider:
          description: Specify if you want to send the requested URL as part of the
            authentication request to the OpenID Connect Provider.
          type: boolean
        validateSessionIsAlive:
          description: Specify if PingAccess should validate sessions with the configured
            PingFederate instance during request processing.
          type: boolean
        clientCredentials:
          $ref: '#/components/schemas/OAuthClientCredentials'
        oidcLoginType:
          $ref: '#/components/schemas/OidcLoginType'
        pkceChallengeType:
          $ref: '#/components/schemas/PkceChallengeType'
        cacheUserAttributes:
          description: "Specify if PingAccess should cache user attribute information\
            \ for use in policy decisions. When disabled, this data is encoded and\
            \ stored in the session cookie."
          type: boolean
        enableRefreshUser:
          description: Specify if you want to have PingAccess periodically refresh
            user data from PingFederate for use in policy decisions.
          type: boolean
        scopes:
          description: The list of scopes. The openid scope is implied and does not
            need to be specified in this list.
          items:
            type: string
          type: array
        pfsessionStateCacheInSeconds:
          description: Specify the number of seconds to cache PingFederate Session
            State information.
          format: int32
          type: integer
      required:
      - clientCredentials
      type: object
    Agent:
      description: An agent.
      example:
        selectedCertificateId: 2
        ipSource:
          fallbackToLastHopIp: true
          headerNameList:
          - headerNameList
          - headerNameList
          listValueLocation: null
        description: description
        certificateHash:
          hexValue: hexValue
          algorithm: null
        sharedSecretIds:
        - 1
        - 1
        hostname: hostname
        maxRetries: 5
        port: 6
        failoverHosts:
        - failoverHosts
        - failoverHosts
        overrideIpSource: true
        name: name
        unknownResourceMode: null
        id: 0
        failedRetryTimeout: 5
      properties:
        id:
          description: "When creating a new Agent, this is the ID for the Agent. If\
            \ not specified, an ID will be automatically assigned. When updating an\
            \ existing Agent, this field is ignored and the ID is determined by the\
            \ path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the agent.
          type: string
        description:
          description: (sortable) A description of the agent.
          type: string
        hostname:
          description: (sortable) The hostname where the agent is listening.
          type: string
        port:
          description: (sortable) The port the agent is listening on.
          format: int32
          type: integer
        sharedSecretIds:
          description: An array of shared secret ids associated with this agent.
          items:
            format: int32
            type: integer
          type: array
        overrideIpSource:
          description: (sortable) Indicates whether the default IP source is overridden
            for this agent.
          type: boolean
        ipSource:
          $ref: '#/components/schemas/IpMultiValueSource'
        failoverHosts:
          description: A list of hostname:port strings for the backup PingAccess policy
            servers.
          items:
            type: string
          type: array
        failedRetryTimeout:
          description: The number of seconds to wait before an agent should retry
            an unavailable policy server.
          format: int32
          type: integer
        maxRetries:
          description: The max number of times an agent request will be attempted
            before failing over to a backup policy server and marking the current
            policy server as unavailable.
          format: int32
          type: integer
        unknownResourceMode:
          $ref: '#/components/schemas/UnknownResourceMode'
        selectedCertificateId:
          description: The ID of the certificate the agent will use to contact PingAccess
            via SSL/TLS.
          format: int32
          type: integer
        certificateHash:
          $ref: '#/components/schemas/Hash'
      required:
      - hostname
      - name
      - port
      - sharedSecretIds
      type: object
    AgentCertificate:
      description: An agent certificate.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        serialNumber: serialNumber
        issuerDn: issuerDn
        subjectAlternativeNames:
        - name: null
          value: value
        - name: null
          value: value
        chainCertificate: true
        sha256sum: sha256sum
        validFrom: 2000-01-23T04:56:07.000+00:00
        signatureAlgorithm: signatureAlgorithm
        sha1sum: sha1sum
        md5sum: md5sum
        trustedCertificate: true
        alias: alias
        keyPair: true
        id: 0
        subjectCn: subjectCn
        subjectDn: subjectDn
        status: null
      properties:
        id:
          description: The id for the agent certificate.
          format: int32
          type: integer
        serialNumber:
          description: (sortable) The Serial Number for the agent certificate.
          type: string
        alias:
          description: (sortable) The alias for the agent certificate.
          type: string
        subjectDn:
          description: (sortable) The Subject DN for the agent certificate.
          type: string
        subjectCn:
          description: (sortable) The common name (CN) identifying the certificate.
          type: string
        issuerDn:
          description: (sortable) The issuer DN for the agent certificate.
          type: string
        validFrom:
          description: "(sortable) The date at which the agent certificate is valid\
            \ from as the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        expires:
          description: "(sortable) The date at which the agent certificate expires\
            \ as the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        signatureAlgorithm:
          description: (sortable) The Signature Algorithm used by the agent certificate.
          type: string
        status:
          $ref: '#/components/schemas/CertStatus'
        sha1sum:
          description: The SHA1 checksum of the agent certificate.
          type: string
        md5sum:
          description: The MD5 checksum of the agent certificate. The value will be
            set to "" when in FIPS mode.
          type: string
        sha256sum:
          description: The SHA256 checksum of the agent certificate.
          type: string
        subjectAlternativeNames:
          description: A collection of subject alternative names for the agent certificate.
          items:
            $ref: '#/components/schemas/GeneralName'
          type: array
        keyPair:
          description: A flag indicating whether the agent certificate is a key pair.
          type: boolean
        chainCertificate:
          description: A flag indicating whether the agent certificate is a chain
            certificate.
          type: boolean
        trustedCertificate:
          description: A flag indicating whether the agent certificate is a trusted
            certificate.
          type: boolean
      required:
      - alias
      - chainCertificate
      - issuerDn
      - keyPair
      - md5sum
      - serialNumber
      - sha1sum
      - sha256sum
      - signatureAlgorithm
      - status
      - subjectDn
      - trustedCertificate
      type: object
    AgentCertificates:
      description: A collection of agent certificates.
      example:
        items:
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          chainCertificate: true
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          trustedCertificate: true
          alias: alias
          keyPair: true
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          chainCertificate: true
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          trustedCertificate: true
          alias: alias
          keyPair: true
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
      properties:
        items:
          description: The actual list of agent certificates.
          items:
            $ref: '#/components/schemas/AgentCertificate'
          type: array
      required:
      - items
      type: object
    Agents:
      description: A collection of agents.
      example:
        items:
        - selectedCertificateId: 2
          ipSource:
            fallbackToLastHopIp: true
            headerNameList:
            - headerNameList
            - headerNameList
            listValueLocation: null
          description: description
          certificateHash:
            hexValue: hexValue
            algorithm: null
          sharedSecretIds:
          - 1
          - 1
          hostname: hostname
          maxRetries: 5
          port: 6
          failoverHosts:
          - failoverHosts
          - failoverHosts
          overrideIpSource: true
          name: name
          unknownResourceMode: null
          id: 0
          failedRetryTimeout: 5
        - selectedCertificateId: 2
          ipSource:
            fallbackToLastHopIp: true
            headerNameList:
            - headerNameList
            - headerNameList
            listValueLocation: null
          description: description
          certificateHash:
            hexValue: hexValue
            algorithm: null
          sharedSecretIds:
          - 1
          - 1
          hostname: hostname
          maxRetries: 5
          port: 6
          failoverHosts:
          - failoverHosts
          - failoverHosts
          overrideIpSource: true
          name: name
          unknownResourceMode: null
          id: 0
          failedRetryTimeout: 5
      properties:
        items:
          description: The actual list of agents.
          items:
            $ref: '#/components/schemas/Agent'
          type: array
      required:
      - items
      type: object
    Algorithm:
      description: An algorithm.
      example:
        name: name
        description: description
      properties:
        name:
          description: The name of the algorithm.
          type: string
        description:
          description: The description of the algorithm.
          type: string
      required:
      - description
      - name
      type: object
    Algorithms:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Algorithm'
          type: array
      required:
      - items
      type: object
    ApiError:
      description: An API error used by the PingAccess Administrative UI.
      example:
        form:
          key:
          - form
          - form
        flash:
        - flash
        - flash
      properties:
        flash:
          description: The flash message displayed in the UI.
          items:
            type: string
          type: array
        form:
          additionalProperties:
            items:
              type: string
            type: array
          description: The specific errors related to the current form.
          type: object
      required:
      - flash
      - form
      type: object
    Application:
      description: An application.
      example:
        applicationType: null
        agentId: 9
        virtualHostIds:
        - 3
        - 3
        spaSupportEnabled: true
        webSessionId: 2
        destination: null
        description: description
        allowEmptyPathSegments: true
        agentCacheInvalidatedExpiration: 1
        enabled: true
        agentCacheInvalidatedResponseDuration: 6
        issuer: issuer
        defaultAuthType: null
        id: 0
        fallbackPostEncoding: fallbackPostEncoding
        manualOrderingEnabled: true
        policy:
          key:
          - id: 7
            type: null
          - id: 7
            type: null
        authenticationChallengePolicyId: authenticationChallengePolicyId
        resourceOrder:
        - 5
        - 5
        requireHTTPS: true
        contextRoot: contextRoot
        identityMappingIds:
          key: 2
        name: name
        siteId: 7
        realm: realm
        lastModified: 5
        sidebandClientId: sidebandClientId
        accessValidatorId: 4
        caseSensitivePath: true
      properties:
        id:
          description: "When creating a new Application, this is the ID for the Application.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing Application, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        enabled:
          description: (sortable) True if the application is enabled.
          type: boolean
        agentCacheInvalidatedResponseDuration:
          description: (DEPRECATED - to be removed in a future release; this field
            is no longer used when processing requests for an application.)
          format: int32
          type: integer
        agentCacheInvalidatedExpiration:
          description: (DEPRECATED - to be removed in a future release; this field
            is no longer used when processing requests for an application.)
          format: int64
          type: integer
        lastModified:
          description: "The last modified time of the configuration for this application,\
            \ its resources and associated policy, as the number of milliseconds since\
            \ January 1, 1970, 00:00:00 GMT. This field is read-only."
          format: int64
          type: integer
        requireHTTPS:
          description: (sortable) True if the application requires HTTPS connections.
          type: boolean
        name:
          description: (sortable) The application name.
          type: string
        description:
          description: (sortable) A description of the application.
          type: string
        manualOrderingEnabled:
          description: "Enable explicit, manual ordering of application resources\
            \ and permit regex path patterns."
          type: boolean
        resourceOrder:
          description: The explicit resource order defined when manual ordering is
            enabled. Each existing resource ID must be represented. (Required when
            'manualOrderingEnabled' is true.)
          items:
            format: int32
            type: integer
          type: array
        applicationType:
          $ref: '#/components/schemas/ApplicationType'
        defaultAuthType:
          $ref: '#/components/schemas/DefaultAuthType'
        spaSupportEnabled:
          description: Enable SPA support.
          type: boolean
        fallbackPostEncoding:
          description: (sortable) Specify the name of an encoding to use when preserving
            POST parameters and the parameters are found to not be UTF-8 encoded.
          type: string
        destination:
          $ref: '#/components/schemas/Destination'
        contextRoot:
          description: (sortable) The context root of the application.
          type: string
        realm:
          description: (sortable) The OAuth realm associated with the application.
          type: string
        caseSensitivePath:
          description: (sortable) True if the path is case sensitive.
          type: boolean
        allowEmptyPathSegments:
          description: "When true, PingAccess will not remove empty path segments\
            \ from the request URL before matching a request against the resources\
            \ in this application. Defaults to false."
          type: boolean
        webSessionId:
          description: The ID of the web session associated with the application or
            zero if none.
          format: int32
          type: integer
        issuer:
          description: "Branded URL at the OpenID Connect provider to redirect unauthenticated\
            \ requests to. When specified, this overrides the global token provider's\
            \ issuer field."
          type: string
        siteId:
          description: The ID of the site associated with the application or zero
            if none.
          format: int32
          type: integer
        agentId:
          description: The ID of the agent associated with the application or zero
            if none.
          format: int32
          type: integer
        sidebandClientId:
          description: The ID of the sideband client associated with the application
            or null if none.
          type: string
        virtualHostIds:
          description: An array of virtual host IDs associated with the application.
          items:
            format: int32
            type: integer
          type: array
        identityMappingIds:
          additionalProperties:
            format: int32
            type: integer
          description: A map of Identity Mappings associated with the application.
            The key is 'Web' or 'API' and the value is an Identity Mapping ID.
          type: object
        accessValidatorId:
          description: "The ID of the access token validator for local token validation,\
            \ 1 if the application is protected remotely by an Authorization Server,\
            \ or zero if unprotected. Only applies to applications of type API."
          format: int32
          type: integer
        policy:
          additionalProperties:
            items:
              $ref: '#/components/schemas/PolicyItem'
            type: array
          description: A map of policy items associated with the application.  The
            key is 'Web' or 'API' and the value is a list of PolicyItems.
          type: object
        authenticationChallengePolicyId:
          description: The UUID of the authentication challenge policy associated
            with the application.
          type: string
      required:
      - agentId
      - authenticationChallengePolicyId
      - contextRoot
      - defaultAuthType
      - name
      - sidebandClientId
      - siteId
      - spaSupportEnabled
      - virtualHostIds
      type: object
    ApplicationDefaults:
      description: Default Application Settings for PingAccess.
      example:
        defaultAuthnChallengePolicyId: defaultAuthnChallengePolicyId
      properties:
        defaultAuthnChallengePolicyId:
          description: The ID of the Authentication Challenge Policy to be used by
            default on new Applications created in the PingAccess Admin UI.
          type: string
      type: object
    ApplicationType:
      enum:
      - Web
      - API
      - Dynamic
      type: string
    Applications:
      description: A collection of applications.
      example:
        items:
        - applicationType: null
          agentId: 9
          virtualHostIds:
          - 3
          - 3
          spaSupportEnabled: true
          webSessionId: 2
          destination: null
          description: description
          allowEmptyPathSegments: true
          agentCacheInvalidatedExpiration: 1
          enabled: true
          agentCacheInvalidatedResponseDuration: 6
          issuer: issuer
          defaultAuthType: null
          id: 0
          fallbackPostEncoding: fallbackPostEncoding
          manualOrderingEnabled: true
          policy:
            key:
            - id: 7
              type: null
            - id: 7
              type: null
          authenticationChallengePolicyId: authenticationChallengePolicyId
          resourceOrder:
          - 5
          - 5
          requireHTTPS: true
          contextRoot: contextRoot
          identityMappingIds:
            key: 2
          name: name
          siteId: 7
          realm: realm
          lastModified: 5
          sidebandClientId: sidebandClientId
          accessValidatorId: 4
          caseSensitivePath: true
        - applicationType: null
          agentId: 9
          virtualHostIds:
          - 3
          - 3
          spaSupportEnabled: true
          webSessionId: 2
          destination: null
          description: description
          allowEmptyPathSegments: true
          agentCacheInvalidatedExpiration: 1
          enabled: true
          agentCacheInvalidatedResponseDuration: 6
          issuer: issuer
          defaultAuthType: null
          id: 0
          fallbackPostEncoding: fallbackPostEncoding
          manualOrderingEnabled: true
          policy:
            key:
            - id: 7
              type: null
            - id: 7
              type: null
          authenticationChallengePolicyId: authenticationChallengePolicyId
          resourceOrder:
          - 5
          - 5
          requireHTTPS: true
          contextRoot: contextRoot
          identityMappingIds:
            key: 2
          name: name
          siteId: 7
          realm: realm
          lastModified: 5
          sidebandClientId: sidebandClientId
          accessValidatorId: 4
          caseSensitivePath: true
      properties:
        items:
          description: An array of applications.
          items:
            $ref: '#/components/schemas/Application'
          type: array
      required:
      - items
      type: object
    Attribute:
      description: A name-value pair of user attributes.
      example:
        attributeValue: attributeValue
        attributeName: attributeName
      properties:
        attributeName:
          description: The name of the user attribute.
          type: string
        attributeValue:
          description: The value of the user attribute.
          type: string
      required:
      - attributeName
      - attributeValue
      type: object
    AuditLevel:
      enum:
      - "ON"
      - "OFF"
      type: string
    AuthTokenManagement:
      description: An auth token management configuration.
      example:
        signingAlgorithm: signingAlgorithm
        keyRollEnabled: true
        issuer: issuer
        keyRollPeriodInHours: 0
      properties:
        keyRollEnabled:
          description: "This field is true if key rollover is enabled. When false,\
            \ PingAccess will not rollover keys at the configured interval."
          type: boolean
        keyRollPeriodInHours:
          description: The interval (in hours) at which PingAccess will roll the keys.
            Key rollover updates keys at regular intervals to ensure the security
            of signed auth tokens.
          format: int64
          type: integer
        issuer:
          description: The issuer value to include in auth tokens. PingAccess inserts
            this value as the iss claim within the auth tokens.
          type: string
        signingAlgorithm:
          description: The signing algorithm used when creating signed auth tokens.
          type: string
      type: object
    AuthenticationChallengePolicies:
      description: A collection of authentication challenge policies.
      example:
        items:
        - system: true
          name: name
          description: description
          challengeResponseChain:
          - challengeResponse:
              filter:
                configuration: configuration
                className: className
              generator:
                configuration: configuration
                className: className
            requestMatcher:
              configuration: configuration
              className: className
          - challengeResponse:
              filter:
                configuration: configuration
                className: className
              generator:
                configuration: configuration
                className: className
            requestMatcher:
              configuration: configuration
              className: className
          id: id
          defaultChallengeResponse:
            filter:
              configuration: configuration
              className: className
            generator:
              configuration: configuration
              className: className
        - system: true
          name: name
          description: description
          challengeResponseChain:
          - challengeResponse:
              filter:
                configuration: configuration
                className: className
              generator:
                configuration: configuration
                className: className
            requestMatcher:
              configuration: configuration
              className: className
          - challengeResponse:
              filter:
                configuration: configuration
                className: className
              generator:
                configuration: configuration
                className: className
            requestMatcher:
              configuration: configuration
              className: className
          id: id
          defaultChallengeResponse:
            filter:
              configuration: configuration
              className: className
            generator:
              configuration: configuration
              className: className
      properties:
        items:
          description: The actual authentication challenge policies.
          items:
            $ref: '#/components/schemas/AuthenticationChallengePolicy'
          type: array
      required:
      - items
      type: object
    AuthenticationChallengePolicy:
      description: An authentication challenge policy.
      example:
        system: true
        name: name
        description: description
        challengeResponseChain:
        - challengeResponse:
            filter:
              configuration: configuration
              className: className
            generator:
              configuration: configuration
              className: className
          requestMatcher:
            configuration: configuration
            className: className
        - challengeResponse:
            filter:
              configuration: configuration
              className: className
            generator:
              configuration: configuration
              className: className
          requestMatcher:
            configuration: configuration
            className: className
        id: id
        defaultChallengeResponse:
          filter:
            configuration: configuration
            className: className
          generator:
            configuration: configuration
            className: className
      properties:
        id:
          description: "The UUID for the authentication challenge policy. If not specified\
            \ during creation, an ID will be automatically be assigned. When updating\
            \ an existing authentication challenge policy, this field is ignored and\
            \ the ID is determined from the URL path parameter."
          type: string
        name:
          description: (sortable) The name of this authentication challenge policy.
            The number of characters in the name is limited to 64.
          type: string
        description:
          description: (sortable) A description of the authentication challenge policy.
            The number of characters in the description is limited to 1000.
          type: string
        system:
          description: (sortable) This field is read-only and indicates this authentication
            challenge policy cannot be modified.
          type: boolean
        challengeResponseChain:
          description: "An array of challenge response mappings, ordered by the precedence\
            \ of each mapping. When no challengeResponseChain is needed for the policy,\
            \ this field must be set to an empty array."
          items:
            $ref: '#/components/schemas/ChallengeResponseMapping'
          type: array
        defaultChallengeResponse:
          $ref: '#/components/schemas/ChallengeResponse'
      required:
      - challengeResponseChain
      - defaultChallengeResponse
      - name
      type: object
    AuthenticationType:
      enum:
      - OAuth
      - Cookie
      - Basic
      type: string
    AuthnReqList:
      description: An authentication requirements list.
      example:
        name: name
        id: 0
        authnReqs:
        - authnReqs
        - authnReqs
      properties:
        id:
          description: "When creating a new AuthnReqList, this is the ID for the AuthnReqList.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing AuthnReqList, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the authentication requirements list.
          type: string
        authnReqs:
          description: "The ordered list of authentication requirements, or identifiers,\
            \ which define how PingFederate will authenticate a user during the OIDC\
            \ login flow."
          items:
            type: string
          type: array
      required:
      - authnReqs
      - name
      type: object
    AuthnReqLists:
      description: A collection of authentication requirements lists.
      example:
        items:
        - name: name
          id: 0
          authnReqs:
          - authnReqs
          - authnReqs
        - name: name
          id: 0
          authnReqs:
          - authnReqs
          - authnReqs
      properties:
        items:
          description: An array of authentication requirements lists.
          items:
            $ref: '#/components/schemas/AuthnReqList'
          type: array
      required:
      - items
      type: object
    AuthorizationServer:
      description: The third-party OAuth 2.0 Authorization Server configuration.
      example:
        trustedCertificateGroupId: 0
        auditLevel: null
        introspectionEndpoint: introspectionEndpoint
        description: description
        useProxy: true
        secure: true
        cacheTokens: true
        targets:
        - targets
        - targets
        tokenEndpoint: tokenEndpoint
        tokenTimeToLiveSeconds: 6
        subjectAttributeName: subjectAttributeName
        clientCredentials:
          clientId: clientId
          credentialsType: null
          clientSecret:
            encryptedValue: encryptedValue
            value: value
          keyPairId: 0
        sendAudience: true
      properties:
        description:
          description: The description of the third-party OAuth 2.0 Authorization
            Server.
          type: string
        targets:
          description: One or more server hostname:port pairs used to access third-party
            OAuth 2.0 Authorization Server.
          items:
            type: string
          type: array
        auditLevel:
          $ref: '#/components/schemas/AuditLevel'
        secure:
          description: Enable if third-party OAuth 2.0 Authorization Server is expecting
            HTTPS connections.
          type: boolean
        trustedCertificateGroupId:
          description: The group of certificates to use when authenticating to third-party
            OAuth 2.0 Authorization Server.
          format: int32
          type: integer
        clientCredentials:
          $ref: '#/components/schemas/OAuthClientCredentials'
        cacheTokens:
          description: Enable to retain token details for subsequent requests.
          type: boolean
        tokenTimeToLiveSeconds:
          description: Defines the number of seconds to cache the access token. -1
            means no limit. This value should be less than the PingFederate Token
            Lifetime.
          format: int64
          type: integer
        subjectAttributeName:
          description: The attribute you want to use from the OAuth access token as
            the subject for auditing purposes.
          type: string
        introspectionEndpoint:
          description: The third-party OAuth 2.0 Authorization Server's token introspection
            endpoint.
          type: string
        tokenEndpoint:
          description: The third-party OAuth 2.0 Authorization Server's token endpoint.
          type: string
        sendAudience:
          description: Enable to send the URI the user requested as the 'aud' OAuth
            parameter for PingAccess to the OAuth 2.0 Authorization server.
          type: boolean
        useProxy:
          description: True if a proxy should be used for HTTP or HTTPS requests.
          type: boolean
      required:
      - introspectionEndpoint
      - subjectAttributeName
      - targets
      - trustedCertificateGroupId
      type: object
    AvailabilityProfile:
      description: An availability profile.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
      properties:
        className:
          description: (sortable) The class name of the availability profile.
          type: string
        id:
          description: "When creating a new AvailabilityProfile, this is the ID for\
            \ the AvailabilityProfile. If not specified, an ID will be automatically\
            \ assigned. When updating an existing AvailabilityProfile, this field\
            \ is ignored and the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the availability profile.
          type: string
        configuration:
          description: The availability profile's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    AvailabilityProfiles:
      description: A collection of availability profiles.
      example:
        items:
        - configuration: configuration
          name: name
          className: className
          id: 0
        - configuration: configuration
          name: name
          className: className
          id: 0
      properties:
        items:
          description: An array of availability profiles.
          items:
            $ref: '#/components/schemas/AvailabilityProfile'
          type: array
      required:
      - items
      type: object
    BasicAuthConfig:
      description: A basic authentication configuration.
      example:
        enabled: true
      properties:
        enabled:
          description: This field is true if basic authentication to the Administrative
            API is enabled.
          type: boolean
      type: object
    BasicConfig:
      description: A basic authentication configuration.
      example:
        enabled: true
      properties:
        enabled:
          description: This field is true if basic authentication to the Administrative
            API is enabled.
          type: boolean
      required:
      - enabled
      type: object
    CSRResponseImportDoc:
      description: A CSR response.
      example:
        chainCertificates:
        - chainCertificates
        - chainCertificates
        trustedCertGroupId: 6
        fileData: fileData
        hsmProviderId: 0
      properties:
        hsmProviderId:
          description: The HSM Provider ID. The default value is 0 indicating an HSM
            is not used for this key pair.
          format: int32
          type: integer
        chainCertificates:
          description: A list of base64-encoded certificates to add to the key pair
            certificate chain.
          items:
            type: string
          type: array
        trustedCertGroupId:
          description: The ID of the trusted certificate group associated with the
            CSR response.
          format: int32
          type: integer
        fileData:
          description: The CSR response data.
          type: string
      required:
      - chainCertificates
      - fileData
      - hsmProviderId
      - trustedCertGroupId
      type: object
    CertStatus:
      enum:
      - Valid
      - Expired
      - NotYetValid
      - Revoked
      - UndeterminedRevocationStatus
      - NoPathToTrustAnchor
      - Invalid
      type: string
    ChainCertificate:
      description: A chain certificate.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        serialNumber: serialNumber
        issuerDn: issuerDn
        subjectAlternativeNames:
        - name: null
          value: value
        - name: null
          value: value
        sha256sum: sha256sum
        validFrom: 2000-01-23T04:56:07.000+00:00
        signatureAlgorithm: signatureAlgorithm
        sha1sum: sha1sum
        md5sum: md5sum
        alias: alias
        id: 1
        subjectCn: subjectCn
        subjectDn: subjectDn
        status: null
      properties:
        id:
          description: The Id for the chain certificate.
          format: int32
          type: integer
        serialNumber:
          description: (sortable) The Serial Number for the chain certificate.
          type: string
        alias:
          description: (sortable) The Alias for the chain certificate.
          type: string
        subjectDn:
          description: (sortable) The Subject DN for the chain certificate.
          type: string
        subjectCn:
          description: (sortable) The common name (CN) identifying the certificate.
          type: string
        issuerDn:
          description: (sortable) The Issuer DN for the chain certificate.
          type: string
        validFrom:
          description: "(sortable) The date at which the chain certificate is valid\
            \ from as the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        expires:
          description: "(sortable) The date at which the chain certificate expires\
            \ as the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        signatureAlgorithm:
          description: (sortable) The Signature Algorithm used by the chain certificate.
          type: string
        status:
          $ref: '#/components/schemas/CertStatus'
        sha1sum:
          description: The SHA1 checksum of the chain certificate.
          type: string
        md5sum:
          description: The MD5 checksum of the chain certificate. The value will be
            set to "" when in FIPS mode.
          type: string
        sha256sum:
          description: The SHA256 checksum of the chain certificate.
          type: string
        subjectAlternativeNames:
          description: A collection of subject alternative names for the certificate.
          items:
            $ref: '#/components/schemas/GeneralName'
          type: array
      required:
      - alias
      - issuerDn
      - md5sum
      - serialNumber
      - sha1sum
      - sha256sum
      - signatureAlgorithm
      - status
      - subjectDn
      type: object
    ChainCertificatesDoc:
      example:
        addChainCertificates:
        - addChainCertificates
        - addChainCertificates
      properties:
        addChainCertificates:
          items:
            type: string
          type: array
      required:
      - addChainCertificates
      type: object
    ChallengeResponse:
      description: An authentication challenge response.
      example:
        filter:
          configuration: configuration
          className: className
        generator:
          configuration: configuration
          className: className
      properties:
        generator:
          $ref: '#/components/schemas/ChallengeResponseGenerator'
        filter:
          $ref: '#/components/schemas/ChallengeResponseFilter'
      required:
      - generator
      type: object
    ChallengeResponseFilter:
      description: An authentication challenge response filter.
      example:
        configuration: configuration
        className: className
      properties:
        className:
          description: The class name of the challenge response filter.
          type: string
        configuration:
          description: The challenge response filter configuration.
          type: string
      required:
      - className
      type: object
    ChallengeResponseGenerator:
      description: An authentication challenge response generator.
      example:
        configuration: configuration
        className: className
      properties:
        className:
          description: The class name of the challenge response generator.
          type: string
        configuration:
          description: The challenge response generator configuration.
          type: string
      required:
      - className
      type: object
    ChallengeResponseMapping:
      description: A mapping from an unauthenticated request to an authentication
        challenge response.
      example:
        challengeResponse:
          filter:
            configuration: configuration
            className: className
          generator:
            configuration: configuration
            className: className
        requestMatcher:
          configuration: configuration
          className: className
      properties:
        requestMatcher:
          $ref: '#/components/schemas/RequestMatcher'
        challengeResponse:
          $ref: '#/components/schemas/ChallengeResponse'
      required:
      - challengeResponse
      - requestMatcher
      type: object
    ConfigStatus:
      description: An import or export configuration.
      example:
        currentEntity: "{}"
        apiErrorView:
          form:
            key:
            - form
            - form
          flash:
          - flash
          - flash
        warnings:
        - warnings
        - warnings
        id: 2
        totalEntities: 7
        status: status
      properties:
        id:
          description: The id of the configuration workflow.
          format: int32
          type: integer
        status:
          description: The status of the configuration import or export.
          type: string
        currentEntity:
          description: The current entity being imported or exported.
          type: object
        totalEntities:
          description: The total number of entities being imported or exported.
          format: int32
          type: integer
        apiErrorView:
          $ref: '#/components/schemas/ApiError'
        warnings:
          description: "The API warnings for import or export, if there are any warnings."
          items:
            type: string
          type: array
      required:
      - warnings
      type: object
    ConfigStatuses:
      description: A collection of import or export configuration workflows.
      example:
        items:
        - currentEntity: "{}"
          apiErrorView:
            form:
              key:
              - form
              - form
            flash:
            - flash
            - flash
          warnings:
          - warnings
          - warnings
          id: 2
          totalEntities: 7
          status: status
        - currentEntity: "{}"
          apiErrorView:
            form:
              key:
              - form
              - form
            flash:
            - flash
            - flash
          warnings:
          - warnings
          - warnings
          id: 2
          totalEntities: 7
          status: status
      properties:
        items:
          description: An array of import or export configuration workflows.
          items:
            $ref: '#/components/schemas/ConfigStatus'
          type: array
      required:
      - items
      type: object
    ConfigurationDependentFieldOption:
      description: Configuration of the dependent field option.
      example:
        options:
        - label: label
          category: category
          value: value
        - label: label
          category: category
          value: value
        value: value
      properties:
        value:
          description: The dependent field option value.
          type: string
        options:
          description: The dependent field options.
          items:
            $ref: '#/components/schemas/ConfigurationOption'
          type: array
      required:
      - options
      - value
      type: object
    ConfigurationField:
      description: Details for configuration in the administrator console.
      example:
        help:
          title: title
          content: content
          url: url
        default: default
        buttonGroup: buttonGroup
        advanced: true
        deselectable: true
        name: name
        options:
        - label: label
          category: category
          value: value
        - label: label
          category: category
          value: value
        label: label
        type: null
        fields:
        - null
        - null
        parentField:
          fieldName: fieldName
          dependentFieldOptions:
          - options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            value: value
          - options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            value: value
        required: true
      properties:
        name:
          description: The name of the configuration field.
          type: string
        label:
          description: The label of the configuration field.
          type: string
        type:
          $ref: '#/components/schemas/ConfigurationType'
        advanced:
          description: Indicates that the configuration field is an advanced field
            or not.
          type: boolean
        required:
          description: Indicates that the configuration field value is required or
            not.
          type: boolean
        help:
          $ref: '#/components/schemas/Help'
        fields:
          description: The list of configuration fields that the current configuration
            field is the parent of.
          items:
            $ref: '#/components/schemas/ConfigurationField'
          type: array
        options:
          description: The available options for the select based configuration fields.
          items:
            $ref: '#/components/schemas/ConfigurationOption'
          type: array
        parentField:
          $ref: '#/components/schemas/ConfigurationParentField'
        buttonGroup:
          description: The name of group radio buttons that cooperate in a single
            selection.
          type: string
        deselectable:
          description: Indicates that a radio button is able to be deselected.
          type: boolean
        default:
          description: The default value of the configuration field.
          type: string
      required:
      - advanced
      - buttonGroup
      - deselectable
      - fields
      - help
      - label
      - name
      - options
      - parentField
      - required
      - type
      type: object
    ConfigurationOption:
      description: The configuration option attributes.
      example:
        label: label
        category: category
        value: value
      properties:
        value:
          description: The configuration option value.
          type: string
        label:
          description: The configuration option label.
          type: string
        category:
          description: The configuration option category.
          type: string
      required:
      - category
      - label
      - value
      type: object
    ConfigurationParentField:
      description: Configuration of the parent field.
      example:
        fieldName: fieldName
        dependentFieldOptions:
        - options:
          - label: label
            category: category
            value: value
          - label: label
            category: category
            value: value
          value: value
        - options:
          - label: label
            category: category
            value: value
          - label: label
            category: category
            value: value
          value: value
      properties:
        fieldName:
          description: The configuration parent field name.
          type: string
        dependentFieldOptions:
          description: The dependent field options attributes.
          items:
            $ref: '#/components/schemas/ConfigurationDependentFieldOption'
          type: array
      required:
      - dependentFieldOptions
      - fieldName
      type: object
    ConfigurationType:
      enum:
      - TEXT
      - TEXTAREA
      - TIME
      - SELECT
      - GROOVY
      - CONCEALED
      - LIST
      - TABLE
      - CHECKBOX
      - AUTOCOMPLETEOPEN
      - AUTOCOMPLETECLOSED
      - COMPOSITE
      - RADIO_BUTTON
      type: string
    ConfiguredAuthorizationServerType:
      enum:
      - PINGFEDERATE_RUNTIME
      - PINGONE
      - COMMON_AUTHZSERVER
      - ADMIN_TOKENPROVIDER
      type: string
    ContentType:
      enum:
      - JSON
      - HTML
      - TEXT
      - XML
      type: string
    CookieTypes:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Item'
          type: array
      required:
      - items
      type: object
    CredentialsType:
      enum:
      - SECRET
      - CERTIFICATE
      - PRIVATE_KEY_JWT
      type: string
    DefaultAuthType:
      enum:
      - Web
      - API
      type: string
    Descriptor:
      description: A descriptor.
      example:
        className: className
        label: label
        configurationFields:
        - help:
            title: title
            content: content
            url: url
          default: default
          buttonGroup: buttonGroup
          advanced: true
          deselectable: true
          name: name
          options:
          - label: label
            category: category
            value: value
          - label: label
            category: category
            value: value
          label: label
          type: null
          fields:
          - null
          - null
          parentField:
            fieldName: fieldName
            dependentFieldOptions:
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
          required: true
        - help:
            title: title
            content: content
            url: url
          default: default
          buttonGroup: buttonGroup
          advanced: true
          deselectable: true
          name: name
          options:
          - label: label
            category: category
            value: value
          - label: label
            category: category
            value: value
          label: label
          type: null
          fields:
          - null
          - null
          parentField:
            fieldName: fieldName
            dependentFieldOptions:
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
          required: true
        type: type
      properties:
        configurationFields:
          description: The list of configuration fields for the class.
          items:
            $ref: '#/components/schemas/ConfigurationField'
          type: array
        type:
          description: The type for the entity.
          type: string
        label:
          description: The label for the entity.
          type: string
        className:
          description: The name of the implementation class.
          type: string
      required:
      - className
      - configurationFields
      - label
      - type
      type: object
    Descriptors:
      description: A list of descriptors.
      example:
        items:
        - className: className
          label: label
          configurationFields:
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          type: type
        - className: className
          label: label
          configurationFields:
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          type: type
      properties:
        items:
          description: The actual list of descriptors.
          items:
            $ref: '#/components/schemas/Descriptor'
          type: array
      required:
      - items
      type: object
    Destination:
      enum:
      - Site
      - Agent
      - Sideband
      type: string
    EmbeddableAccessTokenValidator:
      description: An Embeddable Access Token Validator configuration.
      example:
        configuration: configuration
        className: className
      properties:
        className:
          description: The access token validator's class name.
          type: string
        configuration:
          description: The access token validator's configuration data.
          type: string
      required:
      - className
      type: object
    Engine:
      description: An engine.
      example:
        httpProxyId: 6
        httpsProxyId: 1
        keys:
        - created: 2000-01-23T04:56:07.000+00:00
          jwk: "{}"
        - created: 2000-01-23T04:56:07.000+00:00
          jwk: "{}"
        selectedCertificateId: 5
        name: name
        description: description
        id: 0
        configReplicationEnabled: true
        certificateHash:
          hexValue: hexValue
          algorithm: null
      properties:
        id:
          description: "When creating a new Engine, this is the ID for the Engine.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing Engine, this field is ignored and the ID is determined by\
            \ the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the engine.
          type: string
        description:
          description: (sortable) The description of the engine.
          type: string
        configReplicationEnabled:
          description: (sortable) Set to true when configuration replication for this
            engine is enabled. False when configuration replication is suspended.
          type: boolean
        keys:
          description: An array of public keys associated with the engine.
          items:
            $ref: '#/components/schemas/PublicKey'
          type: array
        httpProxyId:
          description: The ID of the proxy to use for HTTP requests or zero if none.
          format: int32
          type: integer
        httpsProxyId:
          description: The ID of the proxy to use for HTTPS requests or zero if none.
          format: int32
          type: integer
        selectedCertificateId:
          description: The ID of the certificate the engine will use to contact PingAccess
            via SSL/TLS.
          format: int32
          type: integer
        certificateHash:
          $ref: '#/components/schemas/Hash'
      required:
      - name
      type: object
    EngineCertificate:
      description: An engine certificate.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        serialNumber: serialNumber
        issuerDn: issuerDn
        subjectAlternativeNames:
        - name: null
          value: value
        - name: null
          value: value
        chainCertificate: true
        sha256sum: sha256sum
        validFrom: 2000-01-23T04:56:07.000+00:00
        signatureAlgorithm: signatureAlgorithm
        sha1sum: sha1sum
        md5sum: md5sum
        trustedCertificate: true
        alias: alias
        keyPair: true
        id: 0
        subjectCn: subjectCn
        subjectDn: subjectDn
        status: null
      properties:
        id:
          description: The id for the engine certificate.
          format: int32
          type: integer
        serialNumber:
          description: (sortable) The Serial Number for the engine certificate.
          type: string
        alias:
          description: (sortable) The alias for the engine certificate.
          type: string
        subjectDn:
          description: (sortable) The Subject DN for the engine certificate.
          type: string
        subjectCn:
          description: (sortable) The common name (CN) identifying the certificate.
          type: string
        issuerDn:
          description: (sortable) The issuer DN for the engine certificate.
          type: string
        validFrom:
          description: "(sortable) The date at which the engine certificate is valid\
            \ from as the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        expires:
          description: "(sortable) The date at which the engine certificate expires\
            \ as the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        signatureAlgorithm:
          description: (sortable) The Signature Algorithm used by the engine certificate.
          type: string
        status:
          $ref: '#/components/schemas/CertStatus'
        sha1sum:
          description: The SHA1 checksum of the engine certificate.
          type: string
        md5sum:
          description: The MD5 checksum of the engine certificate. The value will
            be set to "" when in FIPS mode.
          type: string
        sha256sum:
          description: The SHA256 checksum of the engine certificate.
          type: string
        subjectAlternativeNames:
          description: A collection of subject alternative names for the engine certificate.
          items:
            $ref: '#/components/schemas/GeneralName'
          type: array
        keyPair:
          description: A flag indicating whether the engine certificate is a key pair.
          type: boolean
        chainCertificate:
          description: A flag indicating whether the engine certificate is a chain
            certificate.
          type: boolean
        trustedCertificate:
          description: A flag indicating whether the engine certificate is a trusted
            certificate.
          type: boolean
      required:
      - alias
      - chainCertificate
      - issuerDn
      - keyPair
      - md5sum
      - serialNumber
      - sha1sum
      - sha256sum
      - signatureAlgorithm
      - status
      - subjectDn
      - trustedCertificate
      type: object
    EngineCertificates:
      description: A collection of engine certificates.
      example:
        items:
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          chainCertificate: true
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          trustedCertificate: true
          alias: alias
          keyPair: true
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          chainCertificate: true
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          trustedCertificate: true
          alias: alias
          keyPair: true
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
      properties:
        items:
          description: The actual list of engine certificates.
          items:
            $ref: '#/components/schemas/EngineCertificate'
          type: array
      required:
      - items
      type: object
    EngineHealthStatus:
      example:
        currentServerTime: 1
        enginesStatus:
          key:
            lastUpdated: 6
            pollingDelay: 0
            name: name
            description: description
      properties:
        enginesStatus:
          additionalProperties:
            $ref: '#/components/schemas/EngineInfo'
          type: object
        currentServerTime:
          format: int64
          type: integer
      required:
      - currentServerTime
      - enginesStatus
      type: object
    EngineInfo:
      example:
        lastUpdated: 6
        pollingDelay: 0
        name: name
        description: description
      properties:
        pollingDelay:
          format: int64
          type: integer
        lastUpdated:
          format: int64
          type: integer
        description:
          type: string
        name:
          type: string
      required:
      - description
      - lastUpdated
      - name
      - pollingDelay
      type: object
    EngineListener:
      description: An engine listener.
      example:
        trustedCertificateGroupId: 1
        port: 6
        name: name
        id: 0
        secure: true
      properties:
        id:
          description: "When creating a new EngineListener, this is the ID for the\
            \ EngineListener. If not specified, an ID will be automatically assigned.\
            \ When updating an existing EngineListener, this field is ignored and\
            \ the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the engine listener.
          type: string
        port:
          description: (sortable) The port the engine listener listens on.
          format: int32
          type: integer
        secure:
          description: (sortable) Indicator if the engine listener should listen to
            HTTPS connections.
          type: boolean
        trustedCertificateGroupId:
          description: Trusted Certificate Group assigned to engine listener for client
            certificate authentication.
          format: int32
          type: integer
      required:
      - name
      - port
      type: object
    EngineListeners:
      description: A collection of engine listeners.
      example:
        items:
        - trustedCertificateGroupId: 1
          port: 6
          name: name
          id: 0
          secure: true
        - trustedCertificateGroupId: 1
          port: 6
          name: name
          id: 0
          secure: true
      properties:
        items:
          description: An array of engine listeners.
          items:
            $ref: '#/components/schemas/EngineListener'
          type: array
      required:
      - items
      type: object
    EngineRegistrationToken:
      description: A JWT to be used to initialize self-registration of an engine with
        its administrative console.
      example:
        httpProxyId: 0
        httpsProxyId: 6
        expirationSeconds: 1
        selectedCertificateId: 5
      properties:
        httpProxyId:
          description: The ID of the proxy to use for HTTP requests or zero if none.
          format: int32
          type: integer
        httpsProxyId:
          description: The ID of the proxy to use for HTTPS requests or zero if none.
          format: int32
          type: integer
        expirationSeconds:
          description: The number of seconds after which this token will expire and
            be unavailable for use to register engines.
          format: int32
          type: integer
        selectedCertificateId:
          description: The ID of the certificate the engine will use to contact PingAccess
            via SSL/TLS.
          format: int32
          type: integer
      required:
      - expirationSeconds
      type: object
    Engines:
      description: A collection of engines.
      example:
        items:
        - httpProxyId: 6
          httpsProxyId: 1
          keys:
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          selectedCertificateId: 5
          name: name
          description: description
          id: 0
          configReplicationEnabled: true
          certificateHash:
            hexValue: hexValue
            algorithm: null
        - httpProxyId: 6
          httpsProxyId: 1
          keys:
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          selectedCertificateId: 5
          name: name
          description: description
          id: 0
          configReplicationEnabled: true
          certificateHash:
            hexValue: hexValue
            algorithm: null
      properties:
        items:
          description: An array of engines.
          items:
            $ref: '#/components/schemas/Engine'
          type: array
      required:
      - items
      type: object
    EntryType:
      enum:
      - ApplicationResource
      - GlobalUnprotectedResource
      type: string
    Environment:
      description: An Environment.
      example:
        name: name
      properties:
        name:
          description: The name of the Ping Identity product environment that will
            be displayed in the administrative console.
          type: string
      required:
      - name
      type: object
    ExportData:
      description: A JSON backup file.
      example:
        data: "{}"
        masterKeys:
          encryptedValue: encryptedValue
          keyId: keyId
        encryptionKey: "{}"
        version: version
      properties:
        version:
          description: The version of PingAccess that was exported.
          type: string
        data:
          type: object
        encryptionKey:
          description: "A JSON Web Key (JWK), as defined by https://tools.ietf.org/html/rfc7517"
          type: object
        masterKeys:
          $ref: '#/components/schemas/MasterKeys'
      type: object
    ExportEntities:
      type: object
    ExportParameters:
      description: "The export parameters for a key pair. In the exported PEM file,\
        \ the private key is protected with PBES2 encryption and AES."
      example:
        password:
          encryptedValue: encryptedValue
          value: value
      properties:
        password:
          $ref: '#/components/schemas/HiddenField'
      required:
      - password
      type: object
    GeneralName:
      example:
        name: null
        value: value
      properties:
        name:
          $ref: '#/components/schemas/GeneralNameEnum'
        value:
          type: string
      required:
      - name
      - value
      type: object
    GeneralNameEnum:
      enum:
      - otherName
      - rfc822Name
      - dNSName
      - x400Address
      - directoryName
      - ediPartyName
      - uniformResourceIdentifier
      - iPAddress
      - registeredID
      type: string
    GlobalUnprotectedResource:
      description: A global unprotected resource.
      example:
        auditLevel: null
        wildcardPath: wildcardPath
        name: name
        description: description
        id: id
        enabled: true
      properties:
        id:
          description: "When creating a new GlobalUnprotectedResource, this is the\
            \ ID for the GlobalUnprotectedResource. If not specified, an ID will be\
            \ automatically assigned. When updating an existing GlobalUnprotectedResource,\
            \ this field is ignored and the ID is determined by the path parameter."
          type: string
        name:
          description: (sortable) The name of the global unprotected resource.
          type: string
        wildcardPath:
          description: A path for the global unprotected resource.
          type: string
        auditLevel:
          $ref: '#/components/schemas/AuditLevel'
        enabled:
          description: (sortable) True if the global resource is enabled.
          type: boolean
        description:
          description: (sortable) A description of the global unprotected resource.
          type: string
      required:
      - name
      - wildcardPath
      type: object
    GlobalUnprotectedResources:
      description: A collection of global unprotected resource items.
      example:
        items:
        - auditLevel: null
          wildcardPath: wildcardPath
          name: name
          description: description
          id: id
          enabled: true
        - auditLevel: null
          wildcardPath: wildcardPath
          name: name
          description: description
          id: id
          enabled: true
      properties:
        items:
          description: The list of global unprotected resources.
          items:
            $ref: '#/components/schemas/GlobalUnprotectedResource'
          type: array
      required:
      - items
      type: object
    Hash:
      example:
        hexValue: hexValue
        algorithm: null
      properties:
        algorithm:
          $ref: '#/components/schemas/HashAlgorithm'
        hexValue:
          type: string
      type: object
    HashAlgorithm:
      enum:
      - MD5
      - SHA1
      - SHA256
      - SHA384
      - SHA512
      type: string
    Help:
      example:
        title: title
        content: content
        url: url
      properties:
        title:
          type: string
        content:
          type: string
        url:
          type: string
      required:
      - content
      - title
      - url
      type: object
    HiddenField:
      description: A hidden field.
      example:
        encryptedValue: encryptedValue
        value: value
      properties:
        encryptedValue:
          description: "The encrypted value of the field, as originally returned by\
            \ the API."
          type: string
        value:
          description: "The value of the field. This field takes precedence over the\
            \ encryptedValue field, if both are specified."
          type: string
      type: object
    HostMultiValueSource:
      description: Configuration for the host source.
      example:
        headerNameList:
        - headerNameList
        - headerNameList
        listValueLocation: null
      properties:
        headerNameList:
          description: An array of header names used to identify the host source name.
          items:
            type: string
          type: array
        listValueLocation:
          $ref: '#/components/schemas/ListValueLocation'
      required:
      - headerNameList
      - listValueLocation
      type: object
    HostPort:
      description: A redirect source.
      example:
        port: 0
        host: host
      properties:
        host:
          description: The hostname.
          type: string
        port:
          description: The port number.
          format: int32
          type: integer
      required:
      - host
      - port
      type: object
    HsmProvider:
      description: An HSM provider.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
      properties:
        className:
          description: (sortable) The HSM provider's class name.
          type: string
        id:
          description: "When creating a new HsmProvider, this is the ID for the HsmProvider.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing HsmProvider, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The HSM provider's name.
          type: string
        configuration:
          description: The HSM provider's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    HttpClientProxy:
      description: A proxy.
      example:
        password:
          encryptedValue: encryptedValue
          value: value
        port: 6
        name: name
        host: host
        description: description
        id: 0
        requiresAuthentication: true
        username: username
      properties:
        id:
          description: "When creating a new HttpClientProxy, this is the ID for the\
            \ HttpClientProxy. If not specified, an ID will be automatically assigned.\
            \ When updating an existing HttpClientProxy, this field is ignored and\
            \ the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the proxy.
          type: string
        host:
          description: (sortable) The proxy host.
          type: string
        port:
          description: (sortable) The proxy port.
          format: int32
          type: integer
        description:
          description: (sortable) A description of the proxy.
          type: string
        requiresAuthentication:
          description: (sortable) True if the proxy requires authentication.
          type: boolean
        username:
          description: (sortable) The username used for proxy authentication.
          type: string
        password:
          $ref: '#/components/schemas/HiddenField'
      required:
      - host
      - name
      - port
      type: object
    HttpMonitoring:
      example:
        auditLevel: null
      properties:
        auditLevel:
          $ref: '#/components/schemas/AuditLevel'
      type: object
    HttpsListener:
      description: An HTTPS listener.
      example:
        restartRequired: true
        name: name
        useServerCipherSuiteOrder: true
        id: 0
        keyPairId: 6
      properties:
        id:
          description: (sortable) The ID of the HTTPS listener.
          format: int32
          type: integer
        name:
          description: (sortable) The name of the HTTPS listener.
          type: string
        keyPairId:
          description: The ID of the default key pair used by the HTTPS listener.
          format: int32
          type: integer
        useServerCipherSuiteOrder:
          description: (sortable) Enable server cipher suite ordering for the HTTPS
            listener.
          type: boolean
        restartRequired:
          description: Indicates whether an admin or engine restart is required to
            update the HTTPS listener. Cannot be True for the ENGINE listener.
          type: boolean
      required:
      - keyPairId
      - name
      - restartRequired
      - useServerCipherSuiteOrder
      type: object
    HttpsListeners:
      description: A collection of HTTPS listeners.
      example:
        items:
        - restartRequired: true
          name: name
          useServerCipherSuiteOrder: true
          id: 0
          keyPairId: 6
        - restartRequired: true
          name: name
          useServerCipherSuiteOrder: true
          id: 0
          keyPairId: 6
      properties:
        items:
          description: An array of HTTPS listeners.
          items:
            $ref: '#/components/schemas/HttpsListener'
          type: array
      required:
      - items
      type: object
    IdentityMapping:
      description: An identity mapping.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
      properties:
        className:
          description: (sortable) The identity mapping's class name.
          type: string
        id:
          description: "When creating a new IdentityMapping, this is the ID for the\
            \ IdentityMapping. If not specified, an ID will be automatically assigned.\
            \ When updating an existing IdentityMapping, this field is ignored and\
            \ the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the identity mapping.
          type: string
        configuration:
          description: The identity mapping's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    IdentityMappings:
      description: A collection of identity mappings.
      example:
        items:
        - configuration: configuration
          name: name
          className: className
          id: 0
        - configuration: configuration
          name: name
          className: className
          id: 0
      properties:
        items:
          description: The actual list of identity mappings.
          items:
            $ref: '#/components/schemas/IdentityMapping'
          type: array
      required:
      - items
      type: object
    IpMultiValueSource:
      description: Configuration for the IP source.
      example:
        fallbackToLastHopIp: true
        headerNameList:
        - headerNameList
        - headerNameList
        listValueLocation: null
      properties:
        headerNameList:
          description: An array of header names used to identify the source IP address.
          items:
            type: string
          type: array
        listValueLocation:
          $ref: '#/components/schemas/ListValueLocation'
        fallbackToLastHopIp:
          description: Indicator if the upstream IP address should be used as the
            client address if none of the expected headers is returned.
          type: boolean
      required:
      - headerNameList
      - listValueLocation
      type: object
    Item:
      description: An item.
      example:
        name: name
        description: description
      properties:
        name:
          description: The name of the item.
          type: string
        description:
          description: A description of the item.
          type: string
      required:
      - description
      - name
      type: object
    JsonWebKey:
      description: "A JSON Web Key (JWK), as defined by https://tools.ietf.org/html/rfc7517"
      type: object
    KeyAlgorithm:
      description: A key algorithm.
      example:
        defaultSignatureAlgorithm: defaultSignatureAlgorithm
        keySizes:
        - 0
        - 0
        defaultKeySize: 6
        name: name
        signatureAlgorithms:
        - signatureAlgorithms
        - signatureAlgorithms
      properties:
        name:
          description: The algorithm name.
          type: string
        keySizes:
          description: The list of available key sizes.
          items:
            format: int32
            type: integer
          type: array
        defaultKeySize:
          description: The default key size value to use.
          format: int32
          type: integer
        defaultSignatureAlgorithm:
          description: The default signature algorithm to use.
          type: string
        signatureAlgorithms:
          description: The list of available signature algorithms.
          items:
            type: string
          type: array
      required:
      - defaultKeySize
      - defaultSignatureAlgorithm
      - keySizes
      - name
      - signatureAlgorithms
      type: object
    KeyAlgorithms:
      example:
        items:
        - defaultSignatureAlgorithm: defaultSignatureAlgorithm
          keySizes:
          - 0
          - 0
          defaultKeySize: 6
          name: name
          signatureAlgorithms:
          - signatureAlgorithms
          - signatureAlgorithms
        - defaultSignatureAlgorithm: defaultSignatureAlgorithm
          keySizes:
          - 0
          - 0
          defaultKeySize: 6
          name: name
          signatureAlgorithms:
          - signatureAlgorithms
          - signatureAlgorithms
      properties:
        items:
          items:
            $ref: '#/components/schemas/KeyAlgorithm'
          type: array
      required:
      - items
      type: object
    KeyPair:
      description: A key pair.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        serialNumber: serialNumber
        issuerDn: issuerDn
        subjectAlternativeNames:
        - name: null
          value: value
        - name: null
          value: value
        csrPending: true
        sha256sum: sha256sum
        validFrom: 2000-01-23T04:56:07.000+00:00
        signatureAlgorithm: signatureAlgorithm
        chainCertificates:
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          alias: alias
          id: 1
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          alias: alias
          id: 1
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
        sha1sum: sha1sum
        md5sum: md5sum
        alias: alias
        hsmProviderId: 6
        id: 0
        subjectCn: subjectCn
        subjectDn: subjectDn
        status: null
      properties:
        id:
          description: The Id for the key pair.
          format: int32
          type: integer
        serialNumber:
          description: (sortable) The Serial Number for the key pair.
          type: string
        alias:
          description: (sortable) The Alias for the key pair.
          type: string
        subjectDn:
          description: (sortable) The Subject DN for the key pair.
          type: string
        subjectCn:
          description: (sortable) The common name (CN) identifying the certificate.
          type: string
        issuerDn:
          description: (sortable) The Issuer DN for the key pair.
          type: string
        validFrom:
          description: "(sortable) The date at which the key pair is valid from as\
            \ the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        expires:
          description: "(sortable) The date at which the key pair expires as the number\
            \ of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        signatureAlgorithm:
          description: (sortable) The Signature Algorithm used by the key pair.
          type: string
        status:
          $ref: '#/components/schemas/CertStatus'
        sha1sum:
          description: The SHA1 checksum of the key pair.
          type: string
        md5sum:
          description: The MD5 checksum of the key pair. The value will be set to
            "" when in FIPS mode.
          type: string
        sha256sum:
          description: The SHA256 checksum of the key pair.
          type: string
        subjectAlternativeNames:
          description: A collection of subject alternative names for the certificate.
          items:
            $ref: '#/components/schemas/GeneralName'
          type: array
        csrPending:
          description: (sortable) True if a CSR is generated for this key pair.
          type: boolean
        hsmProviderId:
          description: The HSM Provider ID.  The default value is 0 indicating an
            HSM is not used for this KeyPair.
          format: int32
          type: integer
        chainCertificates:
          description: The complete list of certificates in the key pair certificate
            chain.
          items:
            $ref: '#/components/schemas/ChainCertificate'
          type: array
      required:
      - alias
      - csrPending
      - issuerDn
      - md5sum
      - serialNumber
      - sha1sum
      - sha256sum
      - signatureAlgorithm
      - status
      - subjectDn
      type: object
    KeyPairs:
      description: A collection of key pairs.
      example:
        items:
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          csrPending: true
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          chainCertificates:
          - expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            issuerDn: issuerDn
            subjectAlternativeNames:
            - name: null
              value: value
            - name: null
              value: value
            sha256sum: sha256sum
            validFrom: 2000-01-23T04:56:07.000+00:00
            signatureAlgorithm: signatureAlgorithm
            sha1sum: sha1sum
            md5sum: md5sum
            alias: alias
            id: 1
            subjectCn: subjectCn
            subjectDn: subjectDn
            status: null
          - expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            issuerDn: issuerDn
            subjectAlternativeNames:
            - name: null
              value: value
            - name: null
              value: value
            sha256sum: sha256sum
            validFrom: 2000-01-23T04:56:07.000+00:00
            signatureAlgorithm: signatureAlgorithm
            sha1sum: sha1sum
            md5sum: md5sum
            alias: alias
            id: 1
            subjectCn: subjectCn
            subjectDn: subjectDn
            status: null
          sha1sum: sha1sum
          md5sum: md5sum
          alias: alias
          hsmProviderId: 6
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          csrPending: true
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          chainCertificates:
          - expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            issuerDn: issuerDn
            subjectAlternativeNames:
            - name: null
              value: value
            - name: null
              value: value
            sha256sum: sha256sum
            validFrom: 2000-01-23T04:56:07.000+00:00
            signatureAlgorithm: signatureAlgorithm
            sha1sum: sha1sum
            md5sum: md5sum
            alias: alias
            id: 1
            subjectCn: subjectCn
            subjectDn: subjectDn
            status: null
          - expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            issuerDn: issuerDn
            subjectAlternativeNames:
            - name: null
              value: value
            - name: null
              value: value
            sha256sum: sha256sum
            validFrom: 2000-01-23T04:56:07.000+00:00
            signatureAlgorithm: signatureAlgorithm
            sha1sum: sha1sum
            md5sum: md5sum
            alias: alias
            id: 1
            subjectCn: subjectCn
            subjectDn: subjectDn
            status: null
          sha1sum: sha1sum
          md5sum: md5sum
          alias: alias
          hsmProviderId: 6
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
      properties:
        items:
          description: The actual list of key pairs.
          items:
            $ref: '#/components/schemas/KeyPair'
          type: array
      required:
      - items
      type: object
    KeySet:
      description: An auth token key set configuration.
      example:
        nonce: nonce
        keySet: keySet
      properties:
        nonce:
          description: The nonce used to derive the key used to encrypt the keySet
            value.
          type: string
        keySet:
          description: The encrypted key set. This value is bound to the nonce field
            and cannot be decrypted without also submitting the nonce used to produce
            the value.
          type: string
      required:
      - keySet
      - nonce
      type: object
    License:
      description: A Ping Identity license.
      example:
        product: product
        tier: tier
        enforcementType: 6
        organization: organization
        name: name
        id: 1
        issueDate: issueDate
        version: version
        maxApplications: 0
        expirationDate: expirationDate
      properties:
        maxApplications:
          description: The maximum number of applications from the license file.
          format: int64
          type: integer
        product:
          description: The Ping Identity product value from the license file.
          type: string
        version:
          description: The Ping Identity product version from the license file.
          type: string
        organization:
          description: The organization value from the license file.
          type: string
        tier:
          description: The tier value from the license file.
          type: string
        enforcementType:
          description: The enforcement type value from the license file.
          format: int32
          type: integer
        expirationDate:
          description: The expiration date value from the license file.
          type: string
        issueDate:
          description: The issue date value from the license file.
          type: string
        name:
          description: The name value from the license file.  Name is required if
            the organization value is not set.
          type: string
        id:
          description: The ID value from the license file.
          format: int32
          type: integer
      required:
      - enforcementType
      - expirationDate
      - id
      - issueDate
      - maxApplications
      - name
      - organization
      - product
      - tier
      - version
      type: object
    LicenseImportDoc:
      description: A license file.
      example:
        fileData: fileData
      properties:
        fileData:
          description: The base64-encoded license file.
          type: string
      required:
      - fileData
      type: object
    Link:
      description: A reference to the associated resource.
      example:
        location: location
        id: id
      properties:
        id:
          description: "The id of the associated resource. When both id and location\
            \ are specified, id takes precedence and location is ignored."
          type: string
        location:
          description: An absolute path to the associated resource.
          type: string
      type: object
    ListValueLocation:
      enum:
      - FIRST
      - LAST
      type: string
    LoadBalancingStrategies:
      description: A collection of load balancing strategies.
      example:
        items:
        - configuration: configuration
          name: name
          className: className
          id: 0
        - configuration: configuration
          name: name
          className: className
          id: 0
      properties:
        items:
          description: An array of load balancing strategies.
          items:
            $ref: '#/components/schemas/LoadBalancingStrategy'
          type: array
      required:
      - items
      type: object
    LoadBalancingStrategy:
      description: A load balancing strategy.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
      properties:
        className:
          description: (sortable) The class name of the load balancing strategy.
          type: string
        id:
          description: "When creating a new LoadBalancingStrategy, this is the ID\
            \ for the LoadBalancingStrategy. If not specified, an ID will be automatically\
            \ assigned. When updating an existing LoadBalancingStrategy, this field\
            \ is ignored and the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the load balancing strategy.
          type: string
        configuration:
          description: The load balancing strategy's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    MasterKeys:
      description: An encrypted master key.
      example:
        encryptedValue: encryptedValue
        keyId: keyId
      properties:
        encryptedValue:
          description: The encrypted master key.
          format: byte
          type: string
        keyId:
          description: The key identifier.
          type: string
      type: object
    Method:
      description: HTTP Method
      example:
        name: name
      properties:
        name:
          description: HTTP Method name
          type: string
      required:
      - name
      type: object
    Methods:
      example:
        items:
        - name: name
        - name: name
      properties:
        items:
          items:
            $ref: '#/components/schemas/Method'
          type: array
      required:
      - items
      type: object
    NewKeyPairConfig:
      description: A new key pair.
      example:
        commonName: commonName
        country: country
        keyAlgorithm: keyAlgorithm
        keySize: 1
        city: city
        subjectAlternativeNames:
        - name: null
          value: value
        - name: null
          value: value
        organizationUnit: organizationUnit
        signatureAlgorithm: signatureAlgorithm
        organization: organization
        alias: alias
        hsmProviderId: 5
        id: 0
        state: state
        validDays: 6
      properties:
        id:
          description: "The ID for the key pair. If not specified, an ID will be automatically\
            \ assigned."
          format: int32
          type: integer
        alias:
          description: A unique alias name to identify the key pair. Special characters
            and spaces are allowed.
          type: string
        commonName:
          description: The common name (CN) identifying the certificate.
          type: string
        organization:
          description: The organization (O) or company name creating the certificate.
          type: string
        organizationUnit:
          description: The specific unit within the organization (OU).
          type: string
        city:
          description: The city or other primary location (L) where the company operates.
          type: string
        state:
          description: The state (ST) or other political unit encompassing the location.
          type: string
        country:
          description: "The country (C) where the company is based, using two capital\
            \ letters."
          type: string
        validDays:
          description: The number of days the certificate is valid.
          format: int32
          type: integer
        keyAlgorithm:
          description: The key algorithm to use to generate a key.
          type: string
        signatureAlgorithm:
          description: The Signature Algorithm to use for the key.
          type: string
        subjectAlternativeNames:
          description: Any additional DNS names or IP addresses that are valid for
            this certificate.
          items:
            $ref: '#/components/schemas/GeneralName'
          type: array
        keySize:
          description: The number of bits used in the key.  Choices depend on selected
            key algorithm.
          format: int32
          type: integer
        hsmProviderId:
          description: The HSM Provider ID. The default value is 0 indicating an HSM
            is not used for this key pair.
          format: int32
          type: integer
      required:
      - alias
      - city
      - commonName
      - country
      - hsmProviderId
      - keyAlgorithm
      - keySize
      - organization
      - organizationUnit
      - state
      - validDays
      type: object
    OAuthAuthenticationConfiguration:
      description: Required when the authentication type is 'OAuth'.
      example:
        configuredAuthorizationServerType: null
        clientCredentials:
          clientId: clientId
          credentialsType: null
          clientSecret:
            encryptedValue: encryptedValue
            value: value
          keyPairId: 0
        scopes:
        - scopes
        - scopes
      properties:
        configuredAuthorizationServerType:
          $ref: '#/components/schemas/ConfiguredAuthorizationServerType'
        clientCredentials:
          $ref: '#/components/schemas/OAuthClientCredentials'
        scopes:
          description: The required scopes of validated ATs authorized to call the
            PingFederate administrative API. Scopes can be input as an array of case-sensitive
            strings.
          items:
            type: string
          type: array
      required:
      - clientCredentials
      - configuredAuthorizationServerType
      type: object
    OAuthClientCredentials:
      description: OAuth client credentials.
      example:
        clientId: clientId
        credentialsType: null
        clientSecret:
          encryptedValue: encryptedValue
          value: value
        keyPairId: 0
      properties:
        clientId:
          description: Specify the client ID.
          type: string
        clientSecret:
          $ref: '#/components/schemas/HiddenField'
        keyPairId:
          description: Specify the ID of a key pair to use for mutual TLS.
          format: int32
          type: integer
        credentialsType:
          $ref: '#/components/schemas/CredentialsType'
      required:
      - clientId
      type: object
    OAuthConfig:
      description: An OAuth authentication configuration.
      example:
        roleMapping:
          administrator:
            attributes:
            - attributeValue: attributeValue
              attributeName: attributeName
            - attributeValue: attributeValue
              attributeName: attributeName
          auditor:
            attributes:
            - attributeValue: attributeValue
              attributeName: attributeName
            - attributeValue: attributeValue
              attributeName: attributeName
            enabled: true
          enabled: true
          platformAdmin:
            attributes:
            - attributeValue: attributeValue
              attributeName: attributeName
            - attributeValue: attributeValue
              attributeName: attributeName
            enabled: true
        clientId: clientId
        scope: scope
        subjectAttributeName: subjectAttributeName
        clientCredentials:
          clientId: clientId
          credentialsType: null
          clientSecret:
            encryptedValue: encryptedValue
            value: value
          keyPairId: 0
        accessTokenValidator:
          configuration: configuration
          className: className
        clientSecret:
          encryptedValue: encryptedValue
          value: value
        enabled: true
      properties:
        clientCredentials:
          $ref: '#/components/schemas/OAuthClientCredentials'
        scope:
          description: "The scope required to successfully access the API--for example,\
            \ admin."
          type: string
        subjectAttributeName:
          description: "The attribute you want to use from the OAuth access token\
            \ as the subject for auditing purposes. At runtime, the attribute's value\
            \ is used as the subject field in audit log entries for the Admin API.\
            \ This field is ignored when the accessTokenValidator is configured."
          type: string
        roleMapping:
          $ref: '#/components/schemas/RoleMappingConfiguration'
        enabled:
          description: This field is true if OAuth authentication to the Administrative
            API is enabled.
          type: boolean
        accessTokenValidator:
          $ref: '#/components/schemas/EmbeddableAccessTokenValidator'
        clientId:
          description: The client_id of the OAuth client used for validating OAuth
            access tokens. (DEPRECATED - to be removed in a future release; please
            use 'clientCredentials' instead)
          type: string
        clientSecret:
          $ref: '#/components/schemas/HiddenField'
      required:
      - scope
      type: object
    OAuthKeyManagement:
      description: An OAuth key management configuration.
      example:
        signingAlgorithm: signingAlgorithm
        keyRollEnabled: true
        keyRollPeriodInHours: 0
      properties:
        keyRollEnabled:
          description: "This field is true if key rollover is enabled. When false,\
            \ PingAccess will not rollover keys at the configured interval."
          type: boolean
        keyRollPeriodInHours:
          description: The interval (in hours) at which PingAccess will roll the keys.
            Key rollover updates keys at regular intervals to ensure the security
            of encrypted OAuth access tokens and encrypted OIDC id_tokens.
          format: int64
          type: integer
        signingAlgorithm:
          description: "The signing algorithm used when creating tokens for private\
            \ key JWT OAuth client authentication. When set to null or empty, the\
            \ algorithm will be selected from the OpenID Provider metadata."
          type: string
      type: object
    OIDCProvider:
      description: The third-party OpenID Connect provider configuration.
      example:
        trustedCertificateGroupId: 0
        queryParameters:
        - name: name
          value: value
        - name: name
          value: value
        plugin:
          configuration: configuration
          className: className
        useSlo: true
        auditLevel: null
        description: description
        requestSupportedScopesOnly: true
        useProxy: true
        issuer: issuer
      properties:
        description:
          description: The description of the third-party OpenID Connect provider.
          type: string
        issuer:
          description: The issuer of the third-party OpenID Connect provider.
          type: string
        trustedCertificateGroupId:
          description: The group of certificates to use when authenticating to third-party
            OpenID Connect provider.
          format: int32
          type: integer
        useProxy:
          description: True if a proxy should be used for HTTP or HTTPS requests.
          type: boolean
        auditLevel:
          $ref: '#/components/schemas/AuditLevel'
        queryParameters:
          description: The query parameters used by the authentication request to
            third-party OpenID Connect provider.
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
        useSlo:
          description: True if single log off (SLO) should be used.
          type: boolean
        requestSupportedScopesOnly:
          description: Specifies whether the scopes in an access request should be
            limited to those advertised in the OIDC metadata.
          type: boolean
        plugin:
          $ref: '#/components/schemas/OIDCProviderPlugin'
      required:
      - issuer
      type: object
    OIDCProviderMetadata:
      description: The OpenID Connect provider's metadata.
      example:
        request_parameter_supported: true
        introspection_endpoint: introspection_endpoint
        claims_parameter_supported: true
        scopes_supported:
        - scopes_supported
        - scopes_supported
        issuer: issuer
        authorization_endpoint: authorization_endpoint
        claims_supported:
        - claims_supported
        - claims_supported
        userinfo_signing_alg_values_supported:
        - userinfo_signing_alg_values_supported
        - userinfo_signing_alg_values_supported
        claim_types_supported:
        - claim_types_supported
        - claim_types_supported
        token_endpoint_auth_methods_supported:
        - token_endpoint_auth_methods_supported
        - token_endpoint_auth_methods_supported
        response_modes_supported:
        - response_modes_supported
        - response_modes_supported
        token_endpoint: token_endpoint
        response_types_supported:
        - response_types_supported
        - response_types_supported
        mtls_endpoint_aliases:
          key: mtls_endpoint_aliases
        request_uri_parameter_supported: true
        grant_types_supported:
        - grant_types_supported
        - grant_types_supported
        end_session_endpoint: end_session_endpoint
        revocation_endpoint: revocation_endpoint
        backchannel_authentication_endpoint: backchannel_authentication_endpoint
        userinfo_endpoint: userinfo_endpoint
        token_endpoint_auth_signing_alg_values_supported:
        - token_endpoint_auth_signing_alg_values_supported
        - token_endpoint_auth_signing_alg_values_supported
        code_challenge_methods_supported:
        - code_challenge_methods_supported
        - code_challenge_methods_supported
        jwks_uri: jwks_uri
        subject_types_supported:
        - subject_types_supported
        - subject_types_supported
        id_token_signing_alg_values_supported:
        - id_token_signing_alg_values_supported
        - id_token_signing_alg_values_supported
        ping_revoked_sris_endpoint: ping_revoked_sris_endpoint
        ping_end_session_endpoint: ping_end_session_endpoint
        request_object_signing_alg_values_supported:
        - request_object_signing_alg_values_supported
        - request_object_signing_alg_values_supported
      properties:
        issuer:
          description: OpenID Connect provider's issuer identifier URL.
          type: string
        authorization_endpoint:
          description: URL of the OpenID Connect provider's authorization endpoint.
          type: string
        token_endpoint:
          description: URL of the OpenID Connect provider's token endpoint.
          type: string
        revocation_endpoint:
          description: URL of the OpenID Connect provider's OAuth 2.0 revocation endpoint.
          type: string
        userinfo_endpoint:
          description: URL of the OpenID Connect provider's userInfo endpoint.
          type: string
        introspection_endpoint:
          description: URL of the OpenID Connect provider's OAuth 2.0 introspection
            endpoint.
          type: string
        jwks_uri:
          description: URL of the OpenID Connect provider's JWK Set document.
          type: string
        scopes_supported:
          description: JSON array containing a list of the OAuth 2.0 "scope" values
            that this OpenID Connect provider supports.
          items:
            type: string
          type: array
        claims_supported:
          description: JSON array containing a list of the claim names of the claims
            that the OpenID Connect provider MAY be able to supply values for.
          items:
            type: string
          type: array
        response_types_supported:
          description: JSON array containing a list of the OAuth 2.0 "response_type"
            values that this OpenID Connect provider supports.
          items:
            type: string
          type: array
        response_modes_supported:
          description: JSON array containing a list of the OAuth 2.0 "response_mode"
            values that this OpenID Connect provider supports.
          items:
            type: string
          type: array
        subject_types_supported:
          description: JSON array containing a list of the Subject Identifier types
            that this OpenID Connect provider supports.
          items:
            type: string
          type: array
        id_token_signing_alg_values_supported:
          description: JSON array containing a list of the JWS signing algorithms
            supported by the OpenID Connect provider for the id token to encode the
            claims in a JWT.
          items:
            type: string
          type: array
        token_endpoint_auth_methods_supported:
          description: JSON array containing a list of client authentication methods
            supported by this token endpoint.
          items:
            type: string
          type: array
        token_endpoint_auth_signing_alg_values_supported:
          description: JSON array containing a list of client authentication signing
            algorithms supported by this token endpoint.
          items:
            type: string
          type: array
        claim_types_supported:
          description: JSON array containing a list of the claim types that the OpenID
            Connect provider supports.
          items:
            type: string
          type: array
        code_challenge_methods_supported:
          description: Proof Key for Code Exchange (PKCE) code challenge methods supported
            by this OpenID Connect provider.
          items:
            type: string
          type: array
        claims_parameter_supported:
          description: "boolean value specifying whether the OpenID Connect provider\
            \ supports use of the claims parameter, with true indicating support."
          type: boolean
        request_parameter_supported:
          description: "boolean value specifying whether the OpenID Connect provider\
            \ supports use of the request parameter, with true indicating support."
          type: boolean
        request_uri_parameter_supported:
          description: "boolean value specifying whether the OpenID Connect provider\
            \ supports use of the request_uri parameter, with true indicating support."
          type: boolean
        end_session_endpoint:
          description: URL at the OpenID Connect provider to which a relying party
            can perform a redirect to request that the end-user be logged out at the
            OpenID Connect provider.
          type: string
        ping_revoked_sris_endpoint:
          description: PingFederate session revocation endpoint. (Not applicable if
            PingFederate is not the OpenID Connect provider)
          type: string
        ping_end_session_endpoint:
          description: PingFederate logout endpoint. (Not applicable if PingFederate
            is not the OpenID Connect provider)
          type: string
        grant_types_supported:
          description: JSON array containing a list of the OAuth 2.0 grant type values
            that this OpenID Connect provider supports.
          items:
            type: string
          type: array
        userinfo_signing_alg_values_supported:
          description: JSON array containing a list of the JWS signing algorithms
            supported by the userInfo endpoint to encode the claims in a JWT.
          items:
            type: string
          type: array
        request_object_signing_alg_values_supported:
          description: JSON array containing a list of the JWS signing algorithms
            supported by the OpenID Connect provider for request objects.
          items:
            type: string
          type: array
        backchannel_authentication_endpoint:
          description: the endpoint used to initiate an out-of-band authentication.
          type: string
        mtls_endpoint_aliases:
          additionalProperties:
            type: string
          description: "a map of alternative authorization server endpoints. The key\
            \ is an authorization server endpoint, and the value is a preferred URL\
            \ for the endpoint."
          type: object
      type: object
    OIDCProviderPlugin:
      description: An OpenID Connect provider plugin.
      example:
        configuration: configuration
        className: className
      properties:
        className:
          description: The class name of the OpenID Connect provider plugin.
          type: string
        configuration:
          description: The OpenID Connect provider plugin's configuration data.
          type: string
      required:
      - className
      type: object
    OidcConfig:
      description: An OIDC authentication configuration.
      example:
        authnReqListId: 0
        roleMapping:
          administrator:
            attributes:
            - attributeValue: attributeValue
              attributeName: attributeName
            - attributeValue: attributeValue
              attributeName: attributeName
          auditor:
            attributes:
            - attributeValue: attributeValue
              attributeName: attributeName
            - attributeValue: attributeValue
              attributeName: attributeName
            enabled: true
          enabled: true
          platformAdmin:
            attributes:
            - attributeValue: attributeValue
              attributeName: attributeName
            - attributeValue: attributeValue
              attributeName: attributeName
            enabled: true
        useSlo: true
        oidcConfiguration:
          enableRefreshUser: true
          refreshUserInfoClaimsInterval: 6
          pfsessionStateCacheInSeconds: 1
          clientCredentials:
            clientId: clientId
            credentialsType: null
            clientSecret:
              encryptedValue: encryptedValue
              value: value
            keyPairId: 0
          pkceChallengeType: null
          oidcLoginType: null
          scopes:
          - scopes
          - scopes
          validateSessionIsAlive: true
          sendRequestedUrlToProvider: true
          cacheUserAttributes: true
        usernameAttributeName: usernameAttributeName
        enabled: true
      properties:
        authnReqListId:
          description: The ID of the authentication requirement list for Administrative
            SSO login to PingAccess.
          format: int32
          type: integer
        enabled:
          description: This field is true to enable Administrator SSO Authentication.
          type: boolean
        useSlo:
          description: Enable if OIDC single log out should be used on the /pa/oidc/logout
            for admin console.
          type: boolean
        usernameAttributeName:
          description: "Attribute to display as the logged in user. If not set, the\
            \ sub attribute will be used."
          type: string
        roleMapping:
          $ref: '#/components/schemas/RoleMappingConfiguration'
        oidcConfiguration:
          $ref: '#/components/schemas/AdminWebSessionOidcConfiguration'
      required:
      - oidcConfiguration
      type: object
    OidcLoginType:
      enum:
      - Code
      - POST
      - x_post
      type: string
    OidcLoginTypes:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Item'
          type: array
      required:
      - items
      type: object
    OptionalAttributeMapping:
      description: A set of user attributes that define an optional role mapping.
      example:
        attributes:
        - attributeValue: attributeValue
          attributeName: attributeName
        - attributeValue: attributeValue
          attributeName: attributeName
        enabled: true
      properties:
        enabled:
          description: Set to true to enable the role in the system.
          type: boolean
        attributes:
          description: The attributes that define the role.
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
      required:
      - attributes
      type: object
    PKCS12FileImportDoc:
      description: A PKCS#12 or PEM file import.
      example:
        password:
          encryptedValue: encryptedValue
          value: value
        chainCertificates:
        - chainCertificates
        - chainCertificates
        fileData: fileData
        alias: alias
        hsmProviderId: 0
      properties:
        hsmProviderId:
          description: The HSM Provider ID. The default value is 0 indicating an HSM
            is not used for this key pair.
          format: int32
          type: integer
        password:
          $ref: '#/components/schemas/HiddenField'
        alias:
          description: A unique alias name to identify the key pair. Special characters
            and spaces are allowed.
          type: string
        chainCertificates:
          description: An array of chain certificates.
          items:
            type: string
          type: array
        fileData:
          description: "Base-64 encoded PKCS12 or PEM file data. In BCFIPS mode, only\
            \ PEM with PBES2 and AES or Triple DES encryption is accepted and 128-bit\
            \ salt is required."
          type: string
      required:
      - alias
      - chainCertificates
      - fileData
      - hsmProviderId
      - password
      type: object
    PathPattern:
      description: A pattern for matching request URI paths.
      example:
        pattern: pattern
        type: null
      properties:
        pattern:
          description: "The path-matching pattern, relative to the Application context\
            \ root (interpreted according to the pattern 'type')."
          type: string
        type:
          $ref: '#/components/schemas/PathPatternType'
      type: object
    PathPatternType:
      enum:
      - WILDCARD
      - REGEX
      type: string
    PingFederateAccessToken:
      description: A PingAccess OAuth client configuration.
      example:
        clientId: clientId
        tokenTimeToLiveSeconds: 0
        subjectAttributeName: subjectAttributeName
        name: name
        clientCredentials:
          clientId: clientId
          credentialsType: null
          clientSecret:
            encryptedValue: encryptedValue
            value: value
          keyPairId: 0
        clientSecret:
          encryptedValue: encryptedValue
          value: value
        cacheTokens: true
        accessValidatorId: 6
        sendAudience: true
        useTokenIntrospection: true
      properties:
        clientCredentials:
          $ref: '#/components/schemas/OAuthClientCredentials'
        cacheTokens:
          description: Enable to retain token details for subsequent requests.
          type: boolean
        tokenTimeToLiveSeconds:
          description: Defines the number of seconds to cache the access token. -1
            means no limit. This value should be less than the PingFederate Token
            Lifetime.
          format: int64
          type: integer
        subjectAttributeName:
          description: The attribute you want to use from the OAuth access token as
            the subject for auditing purposes.
          type: string
        sendAudience:
          description: Enable to send the URI the user requested as the 'aud' OAuth
            parameter for PingAccess to use to select an Access Token Manager.
          type: boolean
        useTokenIntrospection:
          description: Specify if token introspection is enabled.
          type: boolean
        accessValidatorId:
          description: The Access Validator Id. This field is read-only.
          format: int32
          type: integer
        name:
          description: The unique Access Validator name. This field is read-only.
          type: string
        clientId:
          description: The Client ID which PingAccess should use when requesting PingFederate
            to validate access tokens. The client must have Access Token Validation
            grant type allowed. (DEPRECATED - to be removed in a future release; please
            use 'clientCredentials' instead)
          type: string
        clientSecret:
          $ref: '#/components/schemas/HiddenField'
      required:
      - accessValidatorId
      - subjectAttributeName
      type: object
    PingFederateAdmin:
      description: A PingFederate Admin configuration.
      example:
        trustedCertificateGroupId: 0
        auditLevel: auditLevel
        useProxy: true
        secure: true
        expectedHostname: expectedHostname
        adminUsername: adminUsername
        basePath: basePath
        port: 6
        skipHostnameVerification: true
        host: host
        oAuthAuthenticationConfig:
          configuredAuthorizationServerType: null
          clientCredentials:
            clientId: clientId
            credentialsType: null
            clientSecret:
              encryptedValue: encryptedValue
              value: value
            keyPairId: 0
          scopes:
          - scopes
          - scopes
        authenticationType: null
        adminPassword:
          encryptedValue: encryptedValue
          value: value
      properties:
        authenticationType:
          $ref: '#/components/schemas/AuthenticationType'
        adminUsername:
          description: The administrator username. Required when the authentication
            type is set to 'Basic'.
          type: string
        adminPassword:
          $ref: '#/components/schemas/HiddenField'
        skipHostnameVerification:
          description: Set to true if HTTP communications to PingFederate should not
            perform hostname verification of the certificate.
          type: boolean
        expectedHostname:
          description: The name of the host expected in the certificate used by PingFederate.
          type: string
        trustedCertificateGroupId:
          description: The group of certificates to use when authenticating to PingFederate
            Administrative API.
          format: int32
          type: integer
        secure:
          description: Enable if PingFederate is expecting HTTPS connections.
          type: boolean
        basePath:
          description: "The base path, if needed, for Administration API."
          type: string
        useProxy:
          description: True if a proxy should be used for HTTP or HTTPS requests.
          type: boolean
        host:
          description: The host name or IP address for PingFederate Administration
            API.
          type: string
        port:
          description: The port number for PingFederate Administration API.
          format: int32
          type: integer
        auditLevel:
          description: "['ON' or 'OFF']: Enable to record requests to the PingFederate\
            \ Administrative API to the audit store."
          type: string
        oAuthAuthenticationConfig:
          $ref: '#/components/schemas/OAuthAuthenticationConfiguration'
      required:
      - adminPassword
      - host
      - port
      type: object
    PingFederateMetadataRuntime:
      description: A PingFederate configuration.
      example:
        trustedCertificateGroupId: 0
        useSlo: true
        stsTokenExchangeEndpoint: stsTokenExchangeEndpoint
        skipHostnameVerification: true
        description: description
        useProxy: true
        issuer: issuer
      properties:
        description:
          description: The description of the PingFederate Runtime token provider.
          type: string
        issuer:
          description: The issuer url of the PingFederate token provider.
          type: string
        trustedCertificateGroupId:
          description: The group of certificates to use when authenticating to PingFederate.
          format: int32
          type: integer
        useProxy:
          description: Set to true if a proxy should be used for HTTP or HTTPS requests.
          type: boolean
        useSlo:
          description: Set to true if OIDC single log out should be used on the /pa/oidc/logout
            on the engines.
          type: boolean
        stsTokenExchangeEndpoint:
          description: "The url of the PingFederate STS token-to-token exchange endpoint\
            \ that is used for token mediation. Specify if it is being served from\
            \ a different host/port than the issuer is. Otherwise, it is assumed to\
            \ be {{issuer}}/pf/sts.wst."
          type: string
        skipHostnameVerification:
          description: Set to true if HTTP communications to PingFederate should not
            perform hostname verification of the certificate.
          type: boolean
      required:
      - issuer
      type: object
    PingFederateRuntime:
      description: A PingFederate configuration.
      example:
        loadBalancingStrategyId: 5
        trustedCertificateGroupId: 5
        useSlo: true
        auditLevel: auditLevel
        useProxy: true
        secure: true
        targets:
        - targets
        - targets
        expectedHostname: expectedHostname
        backChannelBasePath: backChannelBasePath
        application:
          primaryVirtualHostId: 0
          clientCertHeaderNames:
          - clientCertHeaderNames
          - clientCertHeaderNames
          additionalVirtualHostIds:
          - 6
          - 6
          caseSensitive: true
          contextRoot: contextRoot
          policy:
          - id: 7
            type: null
          - id: 7
            type: null
        basePath: basePath
        port: 2
        skipHostnameVerification: true
        backChannelSecure: true
        host: host
        availabilityProfileId: 1
      properties:
        targets:
          description: One or more server hostname:port pairs used to access the PingFederate
            server from inside a private network. Required when the PingFederate application
            is configured.
          items:
            type: string
          type: array
        skipHostnameVerification:
          description: Enable if the Back Channel servers should not perform hostname
            verification of the certificate.
          type: boolean
        expectedHostname:
          description: The name of the host expected in the certificate.
          type: string
        backChannelBasePath:
          description: "The base path, if needed, for the PingFederate Runtime accessed\
            \ using a Back Channel hostname. This field is ignored when the PingFederate\
            \ application is configured."
          type: string
        backChannelSecure:
          description: Enable if PingFederate is expecting HTTPS connections for calls
            via the Back Channel hostnames.
          type: boolean
        useSlo:
          description: Enable if OIDC single log out should be used on the /pa/oidc/logout
            on the engines.
          type: boolean
        application:
          $ref: '#/components/schemas/PingFederateRuntimeApplication'
        availabilityProfileId:
          description: "The ID of the availability profile to use for the PingFederate\
            \ runtime. When set to 0, an availability profile defined by the pa.default.availability.ondemand\
            \ properties in run.properties will be used for back end communication\
            \ to PingFederate."
          format: int32
          type: integer
        loadBalancingStrategyId:
          description: The ID of the load balancing strategy to use for requests to
            the PingFederate targets.
          format: int32
          type: integer
        trustedCertificateGroupId:
          description: The group of certificates to use when authenticating to PingFederate.
          format: int32
          type: integer
        secure:
          description: "Enable if PingFederate is expecting HTTPS connections. This\
            \ field is ignored when the PingFederate application is configured. In\
            \ this case, use backChannelSecure instead."
          type: boolean
        basePath:
          description: "The base path, if needed, for PingFederate Runtime. This field\
            \ is ignored when the PingFederate application is configured."
          type: string
        useProxy:
          description: True if a proxy should be used for HTTP or HTTPS requests.
          type: boolean
        host:
          description: The host name or IP address for PingFederate Runtime. This
            field is ignored and can be an empty string when the PingFederate application
            is configured.
          type: string
        port:
          description: The port number for PingFederate Runtime. This field is ignored
            when the PingFederate application is configured.
          format: int32
          type: integer
        auditLevel:
          description: "['ON' or 'OFF']: Enable to record requests to PingFederate\
            \ to the audit store."
          type: string
      required:
      - host
      - port
      type: object
    PingFederateRuntimeApplication:
      description: Configuration required to help define application data to handle
        PingFederate as both a token provider and a proxied application.
      example:
        primaryVirtualHostId: 0
        clientCertHeaderNames:
        - clientCertHeaderNames
        - clientCertHeaderNames
        additionalVirtualHostIds:
        - 6
        - 6
        caseSensitive: true
        contextRoot: contextRoot
        policy:
        - id: 7
          type: null
        - id: 7
          type: null
      properties:
        contextRoot:
          description: The base path of the PingFederate runtime application. Default
            value is '/'.
          type: string
        primaryVirtualHostId:
          description: The ID of the primary virtual host to use for front channel
            requests to the PA proxied PingFederate runtime application. This virtual
            host will be used for the default OpenID Connect Issuer when an application
            specific issuer is not configured.
          format: int32
          type: integer
        additionalVirtualHostIds:
          description: Additional virtual host IDs that can be used to proxy the PingFederate
            runtime application.
          items:
            format: int32
            type: integer
          type: array
        policy:
          description: A List of PolicyItems associated with the PingFederate runtime
            application.
          items:
            $ref: '#/components/schemas/PolicyItem'
          type: array
        clientCertHeaderNames:
          description: "The header names to contain PEM-encoded client certificates.\
            \ The list position correlates to the index in the client certificate\
            \ chain. For example, the first element always maps to the leaf certificate."
          items:
            type: string
          type: array
        caseSensitive:
          description: True if the context root is case sensitive.
          type: boolean
      required:
      - primaryVirtualHostId
      type: object
    PingOne4C:
      description: The PingOne for Customers OIDC provider configuration.
      example:
        trustedCertificateGroupId: 0
        description: description
        useProxy: true
        issuer: issuer
      properties:
        description:
          description: The description of the PingOne for Customers OIDC provider.
          type: string
        issuer:
          description: The issuer url of the PingOne for Customers OIDC provider.
          type: string
        trustedCertificateGroupId:
          description: The group of certificates to use when authenticating to PingOne
            for Customers OIDC provider.
          format: int32
          type: integer
        useProxy:
          description: True if a proxy should be used for HTTPS requests.
          type: boolean
      required:
      - issuer
      type: object
    PkceChallengeType:
      enum:
      - SHA256
      - "OFF"
      type: string
    PolicyItem:
      description: A policy item.
      example:
        id: 7
        type: null
      properties:
        type:
          $ref: '#/components/schemas/PolicyItemType'
        id:
          description: The ID of the rule or rule set.
          format: int32
          type: integer
      required:
      - id
      - type
      type: object
    PolicyItemType:
      enum:
      - Rule
      - RuleSet
      type: string
    ProblemDocument:
      description: An RFC 7807 problem details object.
      example:
        detail: detail
        type: type
      properties:
        type:
          description: The problem type.
          type: string
        detail:
          description: A user-friendly explanation of the problem.
          type: string
      required:
      - detail
      - type
      type: object
    ProtocolSource:
      description: Configuration for the protocol source.
      example:
        headerName: headerName
      properties:
        headerName:
          description: The header name used to identify the protocol source name.
          type: string
      required:
      - headerName
      type: object
    PublicKey:
      description: A public key.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        jwk: "{}"
      properties:
        jwk:
          description: The JSON of the public key.
          type: object
        created:
          description: A timestamp when the key was created.
          format: date-time
          type: string
      required:
      - jwk
      type: object
    QueryParamConfig:
      description: Query parameter configuration settings to match requests to URLs
        with query parameters.
      example:
        matchesNoParams: true
        params:
        - name:
            pattern: pattern
            type: null
          value:
            matchAny: true
            pattern: pattern
            type: null
        - name:
            pattern: pattern
            type: null
          value:
            matchAny: true
            pattern: pattern
            type: null
      properties:
        matchesNoParams:
          description: Enable this setting to match requests to URLs without query
            parameters in addition URLs with query parameters.
          type: boolean
        params:
          description: The query parameter name/value pairs.
          items:
            $ref: '#/components/schemas/QueryParamPair'
          type: array
      type: object
    QueryParamName:
      example:
        pattern: pattern
        type: null
      properties:
        pattern:
          description: The string value of the query parameter name.
          type: string
        type:
          $ref: '#/components/schemas/QueryParamPatternType'
      type: object
    QueryParamPair:
      example:
        name:
          pattern: pattern
          type: null
        value:
          matchAny: true
          pattern: pattern
          type: null
      properties:
        name:
          $ref: '#/components/schemas/QueryParamName'
        value:
          $ref: '#/components/schemas/QueryParamValue'
      type: object
    QueryParamPatternType:
      enum:
      - EXACT
      type: string
    QueryParamValue:
      example:
        matchAny: true
        pattern: pattern
        type: null
      properties:
        pattern:
          description: The string value of the query parameter value.
          type: string
        type:
          $ref: '#/components/schemas/QueryParamPatternType'
        matchAny:
          description: Matching any value. Ignoring the specified value.
          type: boolean
      type: object
    QueryParameter:
      description: A name-value pair of custom query parameters.
      example:
        name: name
        value: value
      properties:
        name:
          description: The name of the query parameter.
          type: string
        value:
          description: The value of the query parameter.
          type: string
      required:
      - name
      - value
      type: object
    Redirect:
      description: A Redirect.
      example:
        auditLevel: null
        id: id
        source:
          port: 0
          host: host
        target:
          port: 6
          host: host
          secure: true
        responseCode: 1
      properties:
        id:
          description: "When creating a new Redirect, this is the ID for the Redirect.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing Redirect, this field is ignored and the ID is determined\
            \ by the path parameter."
          type: string
        source:
          $ref: '#/components/schemas/HostPort'
        target:
          $ref: '#/components/schemas/TargetHostPort'
        responseCode:
          description: (sortable) The Redirect HTTP status code used by the response.
          format: int32
          type: integer
        auditLevel:
          $ref: '#/components/schemas/AuditLevel'
      type: object
    Redirects:
      description: A collection of Redirects.
      example:
        items:
        - auditLevel: null
          id: id
          source:
            port: 0
            host: host
          target:
            port: 6
            host: host
            secure: true
          responseCode: 1
        - auditLevel: null
          id: id
          source:
            port: 0
            host: host
          target:
            port: 6
            host: host
            secure: true
          responseCode: 1
      properties:
        items:
          description: An array of Redirects.
          items:
            $ref: '#/components/schemas/Redirect'
          type: array
      required:
      - items
      type: object
    RejectionHandler:
      description: A rejection handler.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
      properties:
        className:
          description: (sortable) The rejection handler's class name.
          type: string
        id:
          description: "When creating a new RejectionHandler, this is the ID for the\
            \ RejectionHandler. If not specified, an ID will be automatically assigned.\
            \ When updating an existing RejectionHandler, this field is ignored and\
            \ the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The rejection handler's name.
          type: string
        configuration:
          description: The rejection handler's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    RejectionHandlers:
      description: A collection of rejection handlers.
      example:
        items:
        - configuration: configuration
          name: name
          className: className
          id: 0
        - configuration: configuration
          name: name
          className: className
          id: 0
      properties:
        items:
          description: The actual list of rejection handlers.
          items:
            $ref: '#/components/schemas/RejectionHandler'
          type: array
      required:
      - items
      type: object
    ReplicaAdmin:
      description: A replica admin.
      example:
        httpProxyId: 6
        httpsProxyId: 1
        keys:
        - created: 2000-01-23T04:56:07.000+00:00
          jwk: "{}"
        - created: 2000-01-23T04:56:07.000+00:00
          jwk: "{}"
        selectedCertificateId: 5
        name: name
        description: description
        hostPort: hostPort
        id: 0
        configReplicationEnabled: true
        certificateHash:
          hexValue: hexValue
          algorithm: null
      properties:
        id:
          description: The ID of the replica admin. This field is read-only.
          format: int32
          type: integer
        name:
          description: The name of the replica admin.
          type: string
        description:
          description: The description of the replica admin.
          type: string
        configReplicationEnabled:
          description: Set to true when configuration replication for the replica
            admin is enabled. False when configuration replication is suspended.
          type: boolean
        keys:
          description: An array of public keys associated with the replica admin.
          items:
            $ref: '#/components/schemas/PublicKey'
          type: array
        httpProxyId:
          description: The ID of the proxy to use for HTTP requests or zero if none.
          format: int32
          type: integer
        httpsProxyId:
          description: The ID of the proxy to use for HTTPS requests or zero if none.
          format: int32
          type: integer
        hostPort:
          description: The host and port of the replica admin.
          type: string
        selectedCertificateId:
          description: The ID of the certificate the replica admin will use to contact
            PingAccess via SSL/TLS.
          format: int32
          type: integer
        certificateHash:
          $ref: '#/components/schemas/Hash'
      required:
      - hostPort
      - name
      type: object
    ReplicaAdmins:
      example:
        items:
        - httpProxyId: 6
          httpsProxyId: 1
          keys:
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          selectedCertificateId: 5
          name: name
          description: description
          hostPort: hostPort
          id: 0
          configReplicationEnabled: true
          certificateHash:
            hexValue: hexValue
            algorithm: null
        - httpProxyId: 6
          httpsProxyId: 1
          keys:
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          - created: 2000-01-23T04:56:07.000+00:00
            jwk: "{}"
          selectedCertificateId: 5
          name: name
          description: description
          hostPort: hostPort
          id: 0
          configReplicationEnabled: true
          certificateHash:
            hexValue: hexValue
            algorithm: null
      properties:
        items:
          items:
            $ref: '#/components/schemas/ReplicaAdmin'
          type: array
      required:
      - items
      type: object
    RequestMatcher:
      description: A request matcher used to match an unauthenticated request to its
        challenge response.
      example:
        configuration: configuration
        className: className
      properties:
        className:
          description: The class name of the request matcher.
          type: string
        configuration:
          description: The request matcher configuration.
          type: string
      required:
      - className
      type: object
    RequestPreservationType:
      enum:
      - None
      - POST
      - All
      type: string
    RequestPreservationTypes:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Item'
          type: array
      required:
      - items
      type: object
    RequiredAttributeMapping:
      description: A set of user attributes that define a mandatory role mapping.
      example:
        attributes:
        - attributeValue: attributeValue
          attributeName: attributeName
        - attributeValue: attributeValue
          attributeName: attributeName
      properties:
        attributes:
          description: The attributes that define the role.
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
      required:
      - attributes
      type: object
    ReservedApplication:
      description: The reserved application.
      example:
        contextRoot: contextRoot
      properties:
        contextRoot:
          description: The context root for the reserved application.
          type: string
      required:
      - contextRoot
      type: object
    Resource:
      description: A resource.
      example:
        resourceTypeConfiguration:
          responseGenerator:
            configuration: configuration
            className: className
        pathPrefixes:
        - pathPrefixes
        - pathPrefixes
        methods:
        - methods
        - methods
        auditLevel: null
        defaultAuthTypeOverride: null
        enabled: true
        rootResource: true
        name: name
        anonymous: true
        queryParamConfig:
          matchesNoParams: true
          params:
          - name:
              pattern: pattern
              type: null
            value:
              matchAny: true
              pattern: pattern
              type: null
          - name:
              pattern: pattern
              type: null
            value:
              matchAny: true
              pattern: pattern
              type: null
        id: 0
        pathPatterns:
        - pattern: pattern
          type: null
        - pattern: pattern
          type: null
        unprotected: true
        applicationId: 6
        policy:
          key:
          - id: 7
            type: null
          - id: 7
            type: null
        resourceType: null
        authenticationChallengePolicyId: authenticationChallengePolicyId
      properties:
        id:
          description: "When creating a new Resource, this is the ID for the Resource.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing Resource, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the resource.
          type: string
        methods:
          description: An array of HTTP methods configured for the resource.
          items:
            type: string
          type: array
        pathPatterns:
          description: A list of one or more request path-matching patterns.
          items:
            $ref: '#/components/schemas/PathPattern'
          type: array
        pathPrefixes:
          description: An array of path prefixes for the resource (DEPRECATED - to
            be removed in a future release; please use 'pathPatterns' instead).
          items:
            type: string
          type: array
        auditLevel:
          $ref: '#/components/schemas/AuditLevel'
        rootResource:
          description: (sortable) True if the resource is the root resource for the
            application.
          type: boolean
        anonymous:
          description: (sortable) True if the resource is anonymous.
          type: boolean
        enabled:
          description: (sortable) True if the resource is enabled.
          type: boolean
        unprotected:
          description: (sortable) True if the resource is unprotected.
          type: boolean
        policy:
          additionalProperties:
            items:
              $ref: '#/components/schemas/PolicyItem'
            type: array
          description: A map of policy items associated with the resource.  The key
            is 'Web' or 'API' and the value is a list of PolicyItems.
          type: object
        defaultAuthTypeOverride:
          $ref: '#/components/schemas/DefaultAuthType'
        applicationId:
          description: The id of the associated application. This field is read-only.
          format: int32
          type: integer
        queryParamConfig:
          $ref: '#/components/schemas/QueryParamConfig'
        resourceType:
          $ref: '#/components/schemas/ResourceType'
        resourceTypeConfiguration:
          $ref: '#/components/schemas/ResourceTypeConfiguration'
        authenticationChallengePolicyId:
          description: The UUID of the authentication challenge policy associated
            with the resource. This policy takes precedence over an application-level
            policy.
          type: string
      required:
      - authenticationChallengePolicyId
      - defaultAuthTypeOverride
      - methods
      - name
      type: object
    ResourceMatchingEntry:
      description: A resource matching entry.
      example:
        methods:
        - methods
        - methods
        name: name
        link:
          location: location
          id: id
        pattern: pattern
        patternType: null
        type: null
      properties:
        name:
          description: The name of the associated resource.
          type: string
        type:
          $ref: '#/components/schemas/EntryType'
        link:
          $ref: '#/components/schemas/Link'
        methods:
          description: "A set of HTTP methods configured for the resource, or '*'\
            \ to indicate any method."
          items:
            type: string
          type: array
        pattern:
          description: "A path-matching pattern, relative to the Application context\
            \ root (interpreted according to the pattern 'type')."
          type: string
        patternType:
          $ref: '#/components/schemas/PathPatternType'
      required:
      - link
      - methods
      - name
      - pattern
      - patternType
      - type
      type: object
    ResourceMatchingEvaluationOrder:
      description: Specifies an ordering of Resource Matching Entries.
      example:
        entries:
        - methods:
          - methods
          - methods
          name: name
          link:
            location: location
            id: id
          pattern: pattern
          patternType: null
          type: null
        - methods:
          - methods
          - methods
          name: name
          link:
            location: location
            id: id
          pattern: pattern
          patternType: null
          type: null
      properties:
        entries:
          description: Resource Matching Entries.
          items:
            $ref: '#/components/schemas/ResourceMatchingEntry'
          type: array
      required:
      - entries
      type: object
    ResourceOrder:
      description: Specifies an ordering of Application Resources.
      example:
        resourceIds:
        - 0
        - 0
      properties:
        resourceIds:
          description: An ordered list of Resource IDs (integers).
          items:
            format: int32
            type: integer
          type: array
      type: object
    ResourceType:
      enum:
      - Standard
      - Virtual
      type: string
    ResourceTypeConfiguration:
      description: A container for configuration specific to various types of resources.
      example:
        responseGenerator:
          configuration: configuration
          className: className
      properties:
        responseGenerator:
          $ref: '#/components/schemas/ResponseGenerator'
      type: object
    Resources:
      description: A collection of resources.
      example:
        items:
        - resourceTypeConfiguration:
            responseGenerator:
              configuration: configuration
              className: className
          pathPrefixes:
          - pathPrefixes
          - pathPrefixes
          methods:
          - methods
          - methods
          auditLevel: null
          defaultAuthTypeOverride: null
          enabled: true
          rootResource: true
          name: name
          anonymous: true
          queryParamConfig:
            matchesNoParams: true
            params:
            - name:
                pattern: pattern
                type: null
              value:
                matchAny: true
                pattern: pattern
                type: null
            - name:
                pattern: pattern
                type: null
              value:
                matchAny: true
                pattern: pattern
                type: null
          id: 0
          pathPatterns:
          - pattern: pattern
            type: null
          - pattern: pattern
            type: null
          unprotected: true
          applicationId: 6
          policy:
            key:
            - id: 7
              type: null
            - id: 7
              type: null
          resourceType: null
          authenticationChallengePolicyId: authenticationChallengePolicyId
        - resourceTypeConfiguration:
            responseGenerator:
              configuration: configuration
              className: className
          pathPrefixes:
          - pathPrefixes
          - pathPrefixes
          methods:
          - methods
          - methods
          auditLevel: null
          defaultAuthTypeOverride: null
          enabled: true
          rootResource: true
          name: name
          anonymous: true
          queryParamConfig:
            matchesNoParams: true
            params:
            - name:
                pattern: pattern
                type: null
              value:
                matchAny: true
                pattern: pattern
                type: null
            - name:
                pattern: pattern
                type: null
              value:
                matchAny: true
                pattern: pattern
                type: null
          id: 0
          pathPatterns:
          - pattern: pattern
            type: null
          - pattern: pattern
            type: null
          unprotected: true
          applicationId: 6
          policy:
            key:
            - id: 7
              type: null
            - id: 7
              type: null
          resourceType: null
          authenticationChallengePolicyId: authenticationChallengePolicyId
      properties:
        items:
          description: The actual list of resources.
          items:
            $ref: '#/components/schemas/Resource'
          type: array
      required:
      - items
      type: object
    ResponseGenerator:
      example:
        configuration: configuration
        className: className
      properties:
        className:
          description: The response generator's class name.
          type: string
        configuration:
          description: The response generator's configuration data.
          type: string
      required:
      - className
      type: object
    RevocationChecking:
      example:
        ocsp: true
        skipTrustAnchors: true
        denyRevocationStatusUnknown: true
        crlChecking: true
        supportDisorderedChain: true
      properties:
        crlChecking:
          type: boolean
        ocsp:
          type: boolean
        denyRevocationStatusUnknown:
          type: boolean
        supportDisorderedChain:
          type: boolean
        skipTrustAnchors:
          type: boolean
      type: object
    Role:
      enum:
      - ADMINISTRATOR
      - AUDITOR
      - PLATFORM_ADMIN
      type: string
    RoleMappingConfiguration:
      description: Configuration for mapping user attributes to roles.
      example:
        administrator:
          attributes:
          - attributeValue: attributeValue
            attributeName: attributeName
          - attributeValue: attributeValue
            attributeName: attributeName
        auditor:
          attributes:
          - attributeValue: attributeValue
            attributeName: attributeName
          - attributeValue: attributeValue
            attributeName: attributeName
          enabled: true
        enabled: true
        platformAdmin:
          attributes:
          - attributeValue: attributeValue
            attributeName: attributeName
          - attributeValue: attributeValue
            attributeName: attributeName
          enabled: true
      properties:
        enabled:
          description: Set to true to enable mapping of user attributes to roles.
          type: boolean
        administrator:
          $ref: '#/components/schemas/RequiredAttributeMapping'
        platformAdmin:
          $ref: '#/components/schemas/OptionalAttributeMapping'
        auditor:
          $ref: '#/components/schemas/OptionalAttributeMapping'
      type: object
    Rule:
      description: A rule.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
        supportedDestinations:
        - supportedDestinations
        - supportedDestinations
      properties:
        className:
          description: (sortable) The rule's class name.
          type: string
        id:
          description: "When creating a new Rule, this is the ID for the Rule. If\
            \ not specified, an ID will be automatically assigned. When updating an\
            \ existing Rule, this field is ignored and the ID is determined by the\
            \ path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The rule's name.
          type: string
        supportedDestinations:
          description: The supported destinations for this rule. This field is read-only
            and meant to provide contextual metadata on where the rule can be applied.
          items:
            type: string
          type: array
        configuration:
          description: The rule's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    RuleDescriptor:
      description: A rule descriptor.
      example:
        modes:
        - null
        - null
        agentCachingDisabled: true
        className: className
        label: label
        configurationFields:
        - help:
            title: title
            content: content
            url: url
          default: default
          buttonGroup: buttonGroup
          advanced: true
          deselectable: true
          name: name
          options:
          - label: label
            category: category
            value: value
          - label: label
            category: category
            value: value
          label: label
          type: null
          fields:
          - null
          - null
          parentField:
            fieldName: fieldName
            dependentFieldOptions:
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
          required: true
        - help:
            title: title
            content: content
            url: url
          default: default
          buttonGroup: buttonGroup
          advanced: true
          deselectable: true
          name: name
          options:
          - label: label
            category: category
            value: value
          - label: label
            category: category
            value: value
          label: label
          type: null
          fields:
          - null
          - null
          parentField:
            fieldName: fieldName
            dependentFieldOptions:
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
            - options:
              - label: label
                category: category
                value: value
              - label: label
                category: category
                value: value
              value: value
          required: true
        type: type
        category: null
      properties:
        configurationFields:
          description: The list of configuration fields of the rule
          items:
            $ref: '#/components/schemas/ConfigurationField'
          type: array
        type:
          description: The type of the rule.
          type: string
        label:
          description: The label of the rule.
          type: string
        className:
          description: The class name of the rule.
          type: string
        category:
          $ref: '#/components/schemas/RuleInterceptorCategory'
        modes:
          description: The modes that the rules can be used in. Site mode implies
            Sideband and Site destination support.
          items:
            $ref: '#/components/schemas/RuleInterceptorSupportedDestination'
          type: array
        agentCachingDisabled:
          description: Indicates that agent caching is disabled or not.
          type: boolean
      required:
      - agentCachingDisabled
      - category
      - className
      - configurationFields
      - label
      - modes
      - type
      type: object
    RuleDescriptors:
      description: A collection of rule descriptors.
      example:
        items:
        - modes:
          - null
          - null
          agentCachingDisabled: true
          className: className
          label: label
          configurationFields:
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          type: type
          category: null
        - modes:
          - null
          - null
          agentCachingDisabled: true
          className: className
          label: label
          configurationFields:
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          - help:
              title: title
              content: content
              url: url
            default: default
            buttonGroup: buttonGroup
            advanced: true
            deselectable: true
            name: name
            options:
            - label: label
              category: category
              value: value
            - label: label
              category: category
              value: value
            label: label
            type: null
            fields:
            - null
            - null
            parentField:
              fieldName: fieldName
              dependentFieldOptions:
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
              - options:
                - label: label
                  category: category
                  value: value
                - label: label
                  category: category
                  value: value
                value: value
            required: true
          type: type
          category: null
      properties:
        items:
          description: The actual list of rule descriptors.
          items:
            $ref: '#/components/schemas/RuleDescriptor'
          type: array
      required:
      - items
      type: object
    RuleInterceptorCategory:
      enum:
      - AccessControl
      - Processing
      type: string
    RuleInterceptorSupportedDestination:
      enum:
      - Site
      - Agent
      type: string
    RuleSet:
      description: A rule set.
      example:
        successCriteria: null
        name: name
        id: 0
        elementType: null
        policy:
        - 6
        - 6
      properties:
        id:
          description: "When creating a new RuleSet, this is the ID for the RuleSet.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing RuleSet, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The rule set's name.
          type: string
        successCriteria:
          $ref: '#/components/schemas/SuccessCriteria'
        elementType:
          $ref: '#/components/schemas/RuleSetElementType'
        policy:
          description: The list of policy ids assigned to the rule set.
          items:
            format: int32
            type: integer
          type: array
      required:
      - name
      - policy
      type: object
    RuleSetElementType:
      enum:
      - Rule
      - RuleSet
      type: string
    RuleSetElementTypes:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Item'
          type: array
      required:
      - items
      type: object
    RuleSetSuccessCriteria:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Item'
          type: array
      required:
      - items
      type: object
    RuleSets:
      description: A collection of rule sets.
      example:
        items:
        - successCriteria: null
          name: name
          id: 0
          elementType: null
          policy:
          - 6
          - 6
        - successCriteria: null
          name: name
          id: 0
          elementType: null
          policy:
          - 6
          - 6
      properties:
        items:
          description: The actual list of rule sets.
          items:
            $ref: '#/components/schemas/RuleSet'
          type: array
      required:
      - items
      type: object
    Rules:
      description: A collection of rules.
      example:
        items:
        - configuration: configuration
          name: name
          className: className
          id: 0
          supportedDestinations:
          - supportedDestinations
          - supportedDestinations
        - configuration: configuration
          name: name
          className: className
          id: 0
          supportedDestinations:
          - supportedDestinations
          - supportedDestinations
      properties:
        items:
          description: The actual list of rules.
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      required:
      - items
      type: object
    SameSiteType:
      enum:
      - Disabled
      - Lax
      - None
      type: string
    SanType:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      required:
      - description
      - name
      type: object
    SanTypes:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/SanType'
          type: array
      required:
      - items
      type: object
    SessionInfo:
      description: A session.
      example:
        sub: sub
        accessControlDirectives:
        - null
        - null
        useSlo: true
        roles:
        - null
        - null
        sesTimeout: 5
        expWarn: 1
        pollIntervalSeconds: 5
        configurationImports:
          items:
          - currentEntity: "{}"
            apiErrorView:
              form:
                key:
                - form
                - form
              flash:
              - flash
              - flash
            warnings:
            - warnings
            - warnings
            id: 2
            totalEntities: 7
            status: status
          - currentEntity: "{}"
            apiErrorView:
              form:
                key:
                - form
                - form
              flash:
              - flash
              - flash
            warnings:
            - warnings
            - warnings
            id: 2
            totalEntities: 7
            status: status
        fipsMode: true
        maxFileUploadSize: 9
        showWarning: true
        sniEnabled: true
        exp: 0
        configurationExports:
          items:
          - currentEntity: "{}"
            apiErrorView:
              form:
                key:
                - form
                - form
              flash:
              - flash
              - flash
            warnings:
            - warnings
            - warnings
            id: 2
            totalEntities: 7
            status: status
          - currentEntity: "{}"
            apiErrorView:
              form:
                key:
                - form
                - form
              flash:
              - flash
              - flash
            warnings:
            - warnings
            - warnings
            id: 2
            totalEntities: 7
            status: status
        iat: 6
        flash: flash
      properties:
        exp:
          description: Time at which session will expire due to inactivity.
          format: int64
          type: integer
        iat:
          description: Time at which session was created.
          format: int64
          type: integer
        expWarn:
          description: Length of time before a timeout at which warning should appear.
          format: int64
          type: integer
        sesTimeout:
          description: "Maximum length of time that a session is allowed to live,\
            \ regardless of user activity, -1 indicates disabled."
          format: int64
          type: integer
        sub:
          description: The Session's subject.
          type: string
        flash:
          description: The Warning message.
          type: string
        pollIntervalSeconds:
          description: Session poll interval configuration in seconds.
          format: int32
          type: integer
        roles:
          description: The user's roles.
          items:
            $ref: '#/components/schemas/Role'
          type: array
        accessControlDirectives:
          description: The set of access control directives.
          items:
            $ref: '#/components/schemas/AdminAccessControlDirective'
          type: array
        useSlo:
          description: Indicates whether single log out (SLO) is enabled or not.
          type: boolean
        fipsMode:
          description: Indicates whether FIPS mode is enabled or not.
          type: boolean
        configurationExports:
          $ref: '#/components/schemas/ConfigStatuses'
        configurationImports:
          $ref: '#/components/schemas/ConfigStatuses'
        sniEnabled:
          description: Indicates that SNI is enabled or not.
          type: boolean
        maxFileUploadSize:
          description: The maximum file upload size in bytes.
          format: int32
          type: integer
        showWarning:
          description: Indicates that a warning needs to be shown or not.
          type: boolean
      required:
      - accessControlDirectives
      - configurationExports
      - configurationImports
      - exp
      - expWarn
      - fipsMode
      - flash
      - iat
      - maxFileUploadSize
      - pollIntervalSeconds
      - roles
      - sesTimeout
      - showWarning
      - sniEnabled
      - sub
      - useSlo
      type: object
    SharedSecret:
      description: A shared secret.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        id: 0
        secret:
          encryptedValue: encryptedValue
          value: value
      properties:
        id:
          description: "When creating a new SharedSecret, this is the ID for the SharedSecret.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing SharedSecret, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        created:
          description: "(sortable) The created date of the secret as the number of\
            \ milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        secret:
          $ref: '#/components/schemas/HiddenField'
      required:
      - secret
      type: object
    SharedSecrets:
      description: A collection of shared secrets.
      example:
        items:
        - created: 2000-01-23T04:56:07.000+00:00
          id: 0
          secret:
            encryptedValue: encryptedValue
            value: value
        - created: 2000-01-23T04:56:07.000+00:00
          id: 0
          secret:
            encryptedValue: encryptedValue
            value: value
      properties:
        items:
          description: The actual list of shared secrets.
          items:
            $ref: '#/components/schemas/SharedSecret'
          type: array
      required:
      - items
      type: object
    SidebandClient:
      description: A sideband client.
      example:
        name: name
        description: description
        clientCredentials:
        - sharedSecretConfig:
            sharedSecretHeaderName: sharedSecretHeaderName
            secret:
              encryptedValue: encryptedValue
              value: value
          created: 2000-01-23T04:56:07.000+00:00
          credentialsType: null
        - sharedSecretConfig:
            sharedSecretHeaderName: sharedSecretHeaderName
            secret:
              encryptedValue: encryptedValue
              value: value
          created: 2000-01-23T04:56:07.000+00:00
          credentialsType: null
        id: id
      properties:
        id:
          description: "When creating a new SidebandClient, this is the ID for the\
            \ SidebandClient. If not specified, an ID will be automatically assigned.\
            \ When updating an existing SidebandClient, this field is ignored and\
            \ the ID is determined by the path parameter."
          type: string
        name:
          description: (sortable) Name of the sideband client.
          type: string
        description:
          description: (sortable) Description of the sideband client.
          type: string
        clientCredentials:
          description: The authentication configuration for the sideband client.
          items:
            $ref: '#/components/schemas/SidebandClientCredentials'
          type: array
      required:
      - clientCredentials
      - name
      type: object
    SidebandClientCredentials:
      description: The sideband client credentials.
      example:
        sharedSecretConfig:
          sharedSecretHeaderName: sharedSecretHeaderName
          secret:
            encryptedValue: encryptedValue
            value: value
        created: 2000-01-23T04:56:07.000+00:00
        credentialsType: null
      properties:
        created:
          description: "The created date of the credentials as the number of milliseconds\
            \ since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        credentialsType:
          $ref: '#/components/schemas/SidebandClientCredentialsType'
        sharedSecretConfig:
          $ref: '#/components/schemas/SidebandSharedSecretConfig'
      required:
      - sharedSecretConfig
      type: object
    SidebandClientCredentialsType:
      enum:
      - SECRET
      type: string
    SidebandClients:
      description: A collection of sideband clients.
      example:
        items:
        - name: name
          description: description
          clientCredentials:
          - sharedSecretConfig:
              sharedSecretHeaderName: sharedSecretHeaderName
              secret:
                encryptedValue: encryptedValue
                value: value
            created: 2000-01-23T04:56:07.000+00:00
            credentialsType: null
          - sharedSecretConfig:
              sharedSecretHeaderName: sharedSecretHeaderName
              secret:
                encryptedValue: encryptedValue
                value: value
            created: 2000-01-23T04:56:07.000+00:00
            credentialsType: null
          id: id
        - name: name
          description: description
          clientCredentials:
          - sharedSecretConfig:
              sharedSecretHeaderName: sharedSecretHeaderName
              secret:
                encryptedValue: encryptedValue
                value: value
            created: 2000-01-23T04:56:07.000+00:00
            credentialsType: null
          - sharedSecretConfig:
              sharedSecretHeaderName: sharedSecretHeaderName
              secret:
                encryptedValue: encryptedValue
                value: value
            created: 2000-01-23T04:56:07.000+00:00
            credentialsType: null
          id: id
      properties:
        items:
          description: The actual list of sideband clients.
          items:
            $ref: '#/components/schemas/SidebandClient'
          type: array
      required:
      - items
      type: object
    SidebandSharedSecretConfig:
      description: A configuration for sideband client shared secret.
      example:
        sharedSecretHeaderName: sharedSecretHeaderName
        secret:
          encryptedValue: encryptedValue
          value: value
      properties:
        sharedSecretHeaderName:
          description: The name of the HTTP header presented in the request by the
            sideband client. The default value is "CLIENT-TOKEN".
          type: string
        secret:
          $ref: '#/components/schemas/HiddenField'
      type: object
    SigningAlgorithms:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Algorithm'
          type: array
      required:
      - items
      type: object
    Site:
      description: A site.
      example:
        trustedCertificateGroupId: 6
        loadBalancingStrategyId: 9
        maxWebSocketConnections: 5
        keepAliveTimeout: 1
        useTargetHostHeader: true
        siteAuthenticatorIds:
        - 2
        - 2
        useProxy: true
        secure: true
        sendPaCookie: true
        targets:
        - targets
        - targets
        expectedHostname: expectedHostname
        skipHostnameVerification: true
        name: name
        id: 0
        availabilityProfileId: 7
        maxConnections: 5
      properties:
        id:
          description: "When creating a new Site, this is the ID for the Site. If\
            \ not specified, an ID will be automatically assigned. When updating an\
            \ existing Site, this field is ignored and the ID is determined by the\
            \ path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the site.
          type: string
        targets:
          description: "The {hostname}:{port} pairs for the hosts that make up the\
            \ site."
          items:
            type: string
          type: array
        secure:
          description: (sortable) This field is true if the site expects HTTPS connections.
          type: boolean
        trustedCertificateGroupId:
          description: The ID of the trusted certificate group associated with the
            site.
          format: int32
          type: integer
        sendPaCookie:
          description: (sortable) This field is true if the PingAccess Token or OAuth
            Access Token should be included in the request to the site.
          type: boolean
        useTargetHostHeader:
          description: (sortable) Setting this field to true causes PingAccess to
            adjust the Host header to the site's selected target host rather than
            the virtual host configured in the application.
          type: boolean
        keepAliveTimeout:
          description: "(sortable) The time, in milliseconds, that an HTTP persistent\
            \ connection to the site can be idle before PingAccess closes the connection."
          format: int32
          type: integer
        maxConnections:
          description: (sortable) The maximum number of HTTP persistent connections
            you want PingAccess to have open and maintain for the site. -1 indicates
            unlimited connections.
          format: int32
          type: integer
        maxWebSocketConnections:
          description: (sortable) The maximum number of WebSocket connections you
            want PingAccess to have open and maintain for the site. -1 indicates unlimited
            connections.
          format: int32
          type: integer
        siteAuthenticatorIds:
          description: The IDs of the site authenticators associated with the site.
          items:
            format: int32
            type: integer
          type: array
        skipHostnameVerification:
          description: (sortable) This field is true if the hostname verification
            of the site's certificate should be skipped.
          type: boolean
        expectedHostname:
          description: (sortable) The name of the host expected in the site's certificate.
          type: string
        availabilityProfileId:
          description: The ID of the availability profile associated with the site.
          format: int32
          type: integer
        loadBalancingStrategyId:
          description: The ID of the load balancing strategy associated with the site.
          format: int32
          type: integer
        useProxy:
          description: (sortable) True if a proxy should be used for HTTP or HTTPS
            requests.
          type: boolean
      required:
      - name
      - targets
      type: object
    SiteAuthenticator:
      description: A site authenticator.
      example:
        configuration: configuration
        name: name
        className: className
        id: 0
      properties:
        className:
          description: (sortable) The site authenticator's class name.
          type: string
        id:
          description: "When creating a new SiteAuthenticator, this is the ID for\
            \ the SiteAuthenticator. If not specified, an ID will be automatically\
            \ assigned. When updating an existing SiteAuthenticator, this field is\
            \ ignored and the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The site authenticator's name.
          type: string
        configuration:
          description: The site authenticator's configuration data.
          type: string
      required:
      - className
      - name
      type: object
    SiteAuthenticators:
      description: A collection of site authenticators.
      example:
        items:
        - configuration: configuration
          name: name
          className: className
          id: 0
        - configuration: configuration
          name: name
          className: className
          id: 0
      properties:
        items:
          description: The actual list of site authenticators.
          items:
            $ref: '#/components/schemas/SiteAuthenticator'
          type: array
      required:
      - items
      type: object
    Sites:
      description: A collection of sites items.
      example:
        items:
        - trustedCertificateGroupId: 6
          loadBalancingStrategyId: 9
          maxWebSocketConnections: 5
          keepAliveTimeout: 1
          useTargetHostHeader: true
          siteAuthenticatorIds:
          - 2
          - 2
          useProxy: true
          secure: true
          sendPaCookie: true
          targets:
          - targets
          - targets
          expectedHostname: expectedHostname
          skipHostnameVerification: true
          name: name
          id: 0
          availabilityProfileId: 7
          maxConnections: 5
        - trustedCertificateGroupId: 6
          loadBalancingStrategyId: 9
          maxWebSocketConnections: 5
          keepAliveTimeout: 1
          useTargetHostHeader: true
          siteAuthenticatorIds:
          - 2
          - 2
          useProxy: true
          secure: true
          sendPaCookie: true
          targets:
          - targets
          - targets
          expectedHostname: expectedHostname
          skipHostnameVerification: true
          name: name
          id: 0
          availabilityProfileId: 7
          maxConnections: 5
      properties:
        items:
          description: The actual list of sites.
          items:
            $ref: '#/components/schemas/Site'
          type: array
      required:
      - items
      type: object
    SuccessCriteria:
      enum:
      - SuccessIfAllSucceed
      - SuccessIfAnyOneSucceeds
      type: string
    SupportedScopes:
      description: A set of scopes supported by the OIDC Provider.
      example:
        clientId: clientId
        scopes:
        - scopes
        - scopes
      properties:
        scopes:
          description: The list of supported scopes (excluding 'openid').
          items:
            type: string
          type: array
        clientId:
          description: "The ID of the client that the scopes are associated with.\
            \ If not specified, the list of scopes represents all scopes supported\
            \ by the provider."
          type: string
      type: object
    TargetHostPort:
      description: A redirect target.
      example:
        port: 6
        host: host
        secure: true
      properties:
        host:
          description: The hostname.
          type: string
        port:
          description: The port number.
          format: int32
          type: integer
        secure:
          description: True if the target host expects HTTPS connections.
          type: boolean
      required:
      - host
      - port
      - secure
      type: object
    ThirdPartyService:
      description: A third-party service.
      example:
        trustedCertificateGroupId: 0
        loadBalancingStrategyId: 5
        skipHostnameVerification: true
        name: name
        id: id
        useProxy: true
        secure: true
        targets:
        - targets
        - targets
        availabilityProfileId: 1
        hostValue: hostValue
        maxConnections: 6
        expectedHostname: expectedHostname
      properties:
        id:
          description: "When creating a new ThirdPartyService, this is the ID for\
            \ the ThirdPartyService. If not specified, an ID will be automatically\
            \ assigned. When updating an existing ThirdPartyService, this field is\
            \ ignored and the ID is determined by the path parameter."
          type: string
        targets:
          description: "The {hostname}:{port} pairs for the hosts that make up the\
            \ third-party service."
          items:
            type: string
          type: array
        name:
          description: (sortable) The name of the third-party service.
          type: string
        secure:
          description: (sortable) This field is true if the third-party service expects
            HTTPS connections.
          type: boolean
        trustedCertificateGroupId:
          description: The ID of the trusted certificate group associated with the
            third-party service.
          format: int32
          type: integer
        maxConnections:
          description: (sortable) The maximum number of HTTP persistent connections
            you want PingAccess to have open and maintain for the third-party service.
            -1 indicates unlimited connections.
          format: int32
          type: integer
        skipHostnameVerification:
          description: (sortable) This field is true if the hostname verification
            of the third-party service's certificate should be skipped.
          type: boolean
        expectedHostname:
          description: (sortable) The name of the host expected in the third-party
            service's certificate.
          type: string
        availabilityProfileId:
          description: The ID of the availability profile associated with the third-party
            service.
          format: int32
          type: integer
        loadBalancingStrategyId:
          description: The ID of the load balancing strategy associated with the third-party
            service.
          format: int32
          type: integer
        useProxy:
          description: (sortable) True if a proxy should be used for HTTP or HTTPS
            requests.
          type: boolean
        hostValue:
          description: "(sortable) The Host header field value in the requests sent\
            \ to a Third-Party Services. When set, PingAccess will use the hostValue\
            \ as the Host header field value. Otherwise, the target value will be\
            \ used."
          type: string
      required:
      - name
      - targets
      type: object
    ThirdPartyServices:
      description: A collection of third-party service items.
      example:
        items:
        - trustedCertificateGroupId: 0
          loadBalancingStrategyId: 5
          skipHostnameVerification: true
          name: name
          id: id
          useProxy: true
          secure: true
          targets:
          - targets
          - targets
          availabilityProfileId: 1
          hostValue: hostValue
          maxConnections: 6
          expectedHostname: expectedHostname
        - trustedCertificateGroupId: 0
          loadBalancingStrategyId: 5
          skipHostnameVerification: true
          name: name
          id: id
          useProxy: true
          secure: true
          targets:
          - targets
          - targets
          availabilityProfileId: 1
          hostValue: hostValue
          maxConnections: 6
          expectedHostname: expectedHostname
      properties:
        items:
          description: The actual list of third-party services.
          items:
            $ref: '#/components/schemas/ThirdPartyService'
          type: array
      required:
      - items
      type: object
    TokenProviderSetting:
      description: Settings for a token provider.
      example:
        type: null
        useThirdParty: true
      properties:
        useThirdParty:
          description: "This field is true if third-party Token Provider is enabled,\
            \ and false if PingFederate is enabled. (DEPRECATED - to be removed in\
            \ a future release; please use 'type' instead)"
          type: boolean
        type:
          $ref: '#/components/schemas/TokenProviderType'
      type: object
    TokenProviderType:
      enum:
      - PingFederate
      - Common
      - PingOneForCustomers
      type: string
    TrustedCert:
      description: A trusted certificate.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        serialNumber: serialNumber
        issuerDn: issuerDn
        subjectAlternativeNames:
        - name: null
          value: value
        - name: null
          value: value
        sha256sum: sha256sum
        validFrom: 2000-01-23T04:56:07.000+00:00
        signatureAlgorithm: signatureAlgorithm
        sha1sum: sha1sum
        md5sum: md5sum
        alias: alias
        id: 0
        subjectCn: subjectCn
        subjectDn: subjectDn
        status: null
      properties:
        id:
          description: "When creating a new TrustedCert, this is the ID for the TrustedCert.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing TrustedCert, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        serialNumber:
          description: (sortable) The serial number for the certificate.
          type: string
        alias:
          description: (sortable) The alias for the certificate.
          type: string
        subjectDn:
          description: (sortable) The subject DN for the certificate.
          type: string
        subjectCn:
          description: (sortable) The subject CN for the certificate.
          type: string
        issuerDn:
          description: (sortable) The issuer DN for the certificate.
          type: string
        validFrom:
          description: "(sortable) The date at which the certificate is valid from\
            \ as the number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        expires:
          description: "(sortable) The date at which the certificate expires as the\
            \ number of milliseconds since January 1, 1970, 00:00:00 GMT."
          format: date-time
          type: string
        signatureAlgorithm:
          description: (sortable) The algorithm used to sign the certificate.
          type: string
        status:
          $ref: '#/components/schemas/CertStatus'
        sha1sum:
          description: The SHA1 sum for the certificate.
          type: string
        md5sum:
          description: The MD5 sum for the certificate. The value will be set to ""
            when in FIPS mode.
          type: string
        sha256sum:
          description: The SHA256 sum for the certificate.
          type: string
        subjectAlternativeNames:
          description: A collection of subject alternative names for the certificate.
          items:
            $ref: '#/components/schemas/GeneralName'
          type: array
      required:
      - alias
      - issuerDn
      - md5sum
      - serialNumber
      - sha1sum
      - sha256sum
      - signatureAlgorithm
      - status
      - subjectDn
      type: object
    TrustedCertificateGroup:
      description: A trusted certificate group.
      example:
        skipCertificateDateCheck: true
        name: name
        useJavaTrustStore: true
        certIds:
        - 6
        - 6
        id: 0
        systemGroup: true
        ignoreAllCertificateErrors: true
        revocationChecking:
          ocsp: true
          skipTrustAnchors: true
          denyRevocationStatusUnknown: true
          crlChecking: true
          supportDisorderedChain: true
      properties:
        id:
          description: "When creating a new TrustedCertificateGroup, this is the ID\
            \ for the TrustedCertificateGroup. If not specified, an ID will be automatically\
            \ assigned. When updating an existing TrustedCertificateGroup, this field\
            \ is ignored and the ID is determined by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the trusted certificate group.
          type: string
        useJavaTrustStore:
          description: (sortable) This field is true if the certificates in the group
            should also include all certificates in the Java Trust Store.
          type: boolean
        systemGroup:
          description: (sortable) This field is read-only and indicates the trusted
            certificate group cannot be modified.
          type: boolean
        ignoreAllCertificateErrors:
          description: (sortable) This field is read-only and is only set to true
            for the Trust Any certificate group.
          type: boolean
        skipCertificateDateCheck:
          description: (sortable) This field is true if certificates that have expired
            or are not yet valid but have passed the other certificate checks should
            be trusted.
          type: boolean
        revocationChecking:
          $ref: '#/components/schemas/RevocationChecking'
        certIds:
          description: The IDs of the certificates that are in the trusted certificate
            group.
          items:
            format: int32
            type: integer
          type: array
      required:
      - name
      type: object
    TrustedCertificateGroups:
      description: A collection of trusted certificate group items.
      example:
        items:
        - skipCertificateDateCheck: true
          name: name
          useJavaTrustStore: true
          certIds:
          - 6
          - 6
          id: 0
          systemGroup: true
          ignoreAllCertificateErrors: true
          revocationChecking:
            ocsp: true
            skipTrustAnchors: true
            denyRevocationStatusUnknown: true
            crlChecking: true
            supportDisorderedChain: true
        - skipCertificateDateCheck: true
          name: name
          useJavaTrustStore: true
          certIds:
          - 6
          - 6
          id: 0
          systemGroup: true
          ignoreAllCertificateErrors: true
          revocationChecking:
            ocsp: true
            skipTrustAnchors: true
            denyRevocationStatusUnknown: true
            crlChecking: true
            supportDisorderedChain: true
      properties:
        items:
          description: The actual list of trusted certificate groups.
          items:
            $ref: '#/components/schemas/TrustedCertificateGroup'
          type: array
      required:
      - items
      type: object
    TrustedCerts:
      description: A collection of trusted certificates.
      example:
        items:
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          alias: alias
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          issuerDn: issuerDn
          subjectAlternativeNames:
          - name: null
            value: value
          - name: null
            value: value
          sha256sum: sha256sum
          validFrom: 2000-01-23T04:56:07.000+00:00
          signatureAlgorithm: signatureAlgorithm
          sha1sum: sha1sum
          md5sum: md5sum
          alias: alias
          id: 0
          subjectCn: subjectCn
          subjectDn: subjectDn
          status: null
      properties:
        items:
          description: A collection of trusted certificate items.
          items:
            $ref: '#/components/schemas/TrustedCert'
          type: array
      required:
      - items
      type: object
    UnknownResourceMode:
      enum:
      - DENY
      - PASSTHROUGH
      type: string
    UnknownResourceSettings:
      description: Global settings for unknown resources.
      example:
        errorContentType: null
        errorTemplateFile: errorTemplateFile
        auditLevel: null
        errorStatusCode: 0
        agentDefaultMode: null
        agentDefaultCacheTTL: 6
      properties:
        errorStatusCode:
          description: The HTTP error response status code
          format: int32
          type: integer
        errorTemplateFile:
          description: The name of the velocity template file to use for generating
            the error response body
          type: string
        errorContentType:
          $ref: '#/components/schemas/ContentType'
        agentDefaultMode:
          $ref: '#/components/schemas/UnknownResourceMode'
        agentDefaultCacheTTL:
          description: The default agent resource cache TTL (in seconds) to be used
            for unknown resources when a request cannot be mapped to a known virtual
            host.
          format: int32
          type: integer
        auditLevel:
          $ref: '#/components/schemas/AuditLevel'
      required:
      - agentDefaultCacheTTL
      - agentDefaultMode
      - errorContentType
      - errorStatusCode
      - errorTemplateFile
      type: object
    User:
      description: A user.
      example:
        slaAccepted: true
        firstLogin: true
        showTutorial: true
        id: 0
        email: email
        username: username
      properties:
        id:
          description: "When creating a new User, this is the ID for the User. If\
            \ not specified, an ID will be automatically assigned. When updating an\
            \ existing User, this field is ignored and the ID is determined by the\
            \ path parameter."
          format: int32
          type: integer
        username:
          description: (sortable) The Administrative users's username.
          type: string
        email:
          description: (sortable) The Administrative account's email.
          type: string
        slaAccepted:
          description: (sortable) The Administrative account's sla acceptance indicator.
          type: boolean
        firstLogin:
          description: (sortable) The Administrative account's first login indicator.
          type: boolean
        showTutorial:
          description: (sortable) The Administrative account's show tutorial indicator.
          type: boolean
      required:
      - username
      type: object
    UserPassword:
      description: Settings to update a password.
      example:
        newPassword: newPassword
        currentPassword: currentPassword
      properties:
        newPassword:
          description: The new password.
          type: string
        currentPassword:
          description: The current password.
          type: string
      required:
      - currentPassword
      - newPassword
      type: object
    Users:
      description: A collection of users.
      example:
        items:
        - slaAccepted: true
          firstLogin: true
          showTutorial: true
          id: 0
          email: email
          username: username
        - slaAccepted: true
          firstLogin: true
          showTutorial: true
          id: 0
          email: email
          username: username
      properties:
        items:
          description: The actual list of users.
          items:
            $ref: '#/components/schemas/User'
          type: array
      required:
      - items
      type: object
    VersionDocClass:
      example:
        version: version
      properties:
        version:
          type: string
      required:
      - version
      type: object
    VirtualHost:
      description: A virtual host.
      example:
        trustedCertificateGroupId: 5
        port: 6
        host: host
        id: 0
        keyPairId: 5
        agentResourceCacheTTL: 1
      properties:
        id:
          description: "When creating a new VirtualHost, this is the ID for the VirtualHost.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing VirtualHost, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        host:
          description: (sortable) The host name for the Virtual Host.
          type: string
        port:
          description: (sortable) The integer port number for the Virtual Host.
          format: int32
          type: integer
        agentResourceCacheTTL:
          description: (sortable) Indicates the number of seconds the Agent can cache
            resources for this application.
          format: int32
          type: integer
        keyPairId:
          description: "Key pair assigned to Virtual Host used by SNI, If no key pair\
            \ is assigned to a virtual host, ENGINE HTTPS Listener key pair will be\
            \ used."
          format: int32
          type: integer
        trustedCertificateGroupId:
          description: Trusted Certificate Group assigned to Virtual Host for client
            certificate authentication.
          format: int32
          type: integer
      required:
      - host
      - port
      type: object
    VirtualHosts:
      description: A collection of virtual hosts.
      example:
        items:
        - trustedCertificateGroupId: 5
          port: 6
          host: host
          id: 0
          keyPairId: 5
          agentResourceCacheTTL: 1
        - trustedCertificateGroupId: 5
          port: 6
          host: host
          id: 0
          keyPairId: 5
          agentResourceCacheTTL: 1
      properties:
        items:
          description: The actual list of virtual hosts.
          items:
            $ref: '#/components/schemas/VirtualHost'
          type: array
      required:
      - items
      type: object
    WebSession:
      description: A web session.
      example:
        webStorageType: null
        audience: audience
        requestPreservationType: null
        pfsessionStateCacheInSeconds: 5
        idleTimeoutInMinutes: 5
        cookieType: null
        oidcLoginType: null
        sendRequestedUrlToProvider: true
        secureCookie: true
        enableRefreshUser: true
        cookieDomain: cookieDomain
        refreshUserInfoClaimsInterval: 1
        sessionTimeoutInMinutes: 6
        httpOnlyCookie: true
        requestProfile: true
        sameSite: null
        failOnUnsupportedPreservationContentType: true
        name: name
        clientCredentials:
          clientId: clientId
          credentialsType: null
          clientSecret:
            encryptedValue: encryptedValue
            value: value
          keyPairId: 0
        pkceChallengeType: null
        id: 0
        scopes:
        - scopes
        - scopes
        validateSessionIsAlive: true
        cacheUserAttributes: true
      properties:
        id:
          description: "When creating a new WebSession, this is the ID for the WebSession.\
            \ If not specified, an ID will be automatically assigned. When updating\
            \ an existing WebSession, this field is ignored and the ID is determined\
            \ by the path parameter."
          format: int32
          type: integer
        name:
          description: (sortable) The name of the web session.
          type: string
        sessionTimeoutInMinutes:
          description: "(sortable) The length of time you want the PA Token to remain\
            \ active. Once the PA Token expires, an authenticated user must re-authenticate."
          format: int32
          type: integer
        refreshUserInfoClaimsInterval:
          description: (sortable) Specify the maximum number of seconds to cache user
            attribute information when the Refresh User is enabled.
          format: int32
          type: integer
        requestPreservationType:
          $ref: '#/components/schemas/RequestPreservationType'
        sendRequestedUrlToProvider:
          description: (sortable) Specify if you want to send the requested URL as
            part of the authentication request to the OpenID Connect Provider.
          type: boolean
        validateSessionIsAlive:
          description: (sortable) Specify if PingAccess should validate sessions with
            the configured PingFederate instance during request processing.
          type: boolean
        audience:
          description: (sortable) Enter a unique identifier between 1 and 32 characters
            that defines who the PA Token is applicable to.
          type: string
        sameSite:
          $ref: '#/components/schemas/SameSiteType'
        secureCookie:
          description: (sortable) Specify whether the PingAccess Cookie must be sent
            using only HTTPS connections.
          type: boolean
        httpOnlyCookie:
          description: (sortable) Enable the HttpOnly flag on cookies that contain
            the PA Token.
          type: boolean
        clientCredentials:
          $ref: '#/components/schemas/OAuthClientCredentials'
        oidcLoginType:
          $ref: '#/components/schemas/OidcLoginType'
        pkceChallengeType:
          $ref: '#/components/schemas/PkceChallengeType'
        webStorageType:
          $ref: '#/components/schemas/WebStorageType'
        cacheUserAttributes:
          description: "(sortable) Specify if PingAccess should cache user attribute\
            \ information for use in policy decisions. When disabled, this data is\
            \ encoded and stored in the session cookie."
          type: boolean
        enableRefreshUser:
          description: (sortable) Specify if you want to have PingAccess periodically
            refresh user data from PingFederate for use in policy decisions.
          type: boolean
        requestProfile:
          description: "Specifies whether the default scopes ('profile', 'email',\
            \ 'address', and 'phone') should be specified in the access request. (DEPRECATED\
            \ - to be removed in a future release; please use 'scopes' instead)"
          type: boolean
        scopes:
          description: "The list of scopes to be specified in the access request.\
            \ If not specified, the default scopes ('profile', 'email', 'address',\
            \ and 'phone') will be used. The openid scope is implied and does not\
            \ need to be specified in this list."
          items:
            type: string
          type: array
        idleTimeoutInMinutes:
          description: (sortable) The length of time you want the PingAccess Token
            to remain active when no activity is detected.
          format: int32
          type: integer
        cookieType:
          $ref: '#/components/schemas/WebSessionCookieType'
        cookieDomain:
          description: "(sortable) The domain where the cookie is stored--for example,\
            \ corp.yourcompany.com."
          type: string
        failOnUnsupportedPreservationContentType:
          description: "(sortable) Specify if PingAccess should produce a 415 HTTP\
            \ response when it receives an unauthenticated POST request with a content\
            \ type unsupported by request preservation. The only content type supported\
            \ by request preservation is application/x-www-form-urlencoded. When disabled,\
            \ PingAccess will challenge an unauthenticated POST request using an unsupported\
            \ content type with the same challenge response sent to an unauthenticated\
            \ GET request. The default is false."
          type: boolean
        pfsessionStateCacheInSeconds:
          description: (sortable) Specify the number of seconds to cache PingFederate
            Session State information.
          format: int32
          type: integer
      required:
      - audience
      - clientCredentials
      - failOnUnsupportedPreservationContentType
      - name
      type: object
    WebSessionCookieType:
      enum:
      - Encrypted
      - Signed
      type: string
    WebSessionManagement:
      description: A web session management configuration.
      example:
        nonceCookieTimeToLiveInMinutes: 1
        signingAlgorithm: signingAlgorithm
        sessionStateCookieName: sessionStateCookieName
        encryptionAlgorithm: encryptionAlgorithm
        keyRollEnabled: true
        issuer: issuer
        cookieName: cookieName
        keyRollPeriodInHours: 0
        updateTokenWindowInSeconds: 6
      properties:
        keyRollEnabled:
          description: "This field is true if key rollover is enabled. When false,\
            \ PingAccess will not rollover keys at the configured interval."
          type: boolean
        keyRollPeriodInHours:
          description: The interval (in hours) at which PingAccess will roll the keys.
            Key rollover updates keys at regular intervals to ensure the security
            of signed and encrypted PA tokens.
          format: int64
          type: integer
        issuer:
          description: The issuer value to include in the PA token. PingAccess inserts
            this value as the iss claim within the PA Token.
          type: string
        signingAlgorithm:
          description: The signing algorithm used when creating signed PA tokens and
            when verifying them from a user's browser.
          type: string
        cookieName:
          description: The name for the browser cookie to contain the PA token.
          type: string
        sessionStateCookieName:
          description: The name of the session state cookie.
          type: string
        updateTokenWindowInSeconds:
          description: The number of seconds before the idle timeout is updated in
            the PA token.
          format: int64
          type: integer
        encryptionAlgorithm:
          description: The encryption algorithm used when creating encrypted PA tokens
            and when verifying them from a user's browser.
          type: string
        nonceCookieTimeToLiveInMinutes:
          description: The number of minutes that the nonce cookie is valid when multiple
            concurrent authentication requests are made. 0 indicates that the system
            default value should be used.
          format: int32
          type: integer
      type: object
    WebSessions:
      description: A collection of web sessions.
      example:
        items:
        - webStorageType: null
          audience: audience
          requestPreservationType: null
          pfsessionStateCacheInSeconds: 5
          idleTimeoutInMinutes: 5
          cookieType: null
          oidcLoginType: null
          sendRequestedUrlToProvider: true
          secureCookie: true
          enableRefreshUser: true
          cookieDomain: cookieDomain
          refreshUserInfoClaimsInterval: 1
          sessionTimeoutInMinutes: 6
          httpOnlyCookie: true
          requestProfile: true
          sameSite: null
          failOnUnsupportedPreservationContentType: true
          name: name
          clientCredentials:
            clientId: clientId
            credentialsType: null
            clientSecret:
              encryptedValue: encryptedValue
              value: value
            keyPairId: 0
          pkceChallengeType: null
          id: 0
          scopes:
          - scopes
          - scopes
          validateSessionIsAlive: true
          cacheUserAttributes: true
        - webStorageType: null
          audience: audience
          requestPreservationType: null
          pfsessionStateCacheInSeconds: 5
          idleTimeoutInMinutes: 5
          cookieType: null
          oidcLoginType: null
          sendRequestedUrlToProvider: true
          secureCookie: true
          enableRefreshUser: true
          cookieDomain: cookieDomain
          refreshUserInfoClaimsInterval: 1
          sessionTimeoutInMinutes: 6
          httpOnlyCookie: true
          requestProfile: true
          sameSite: null
          failOnUnsupportedPreservationContentType: true
          name: name
          clientCredentials:
            clientId: clientId
            credentialsType: null
            clientSecret:
              encryptedValue: encryptedValue
              value: value
            keyPairId: 0
          pkceChallengeType: null
          id: 0
          scopes:
          - scopes
          - scopes
          validateSessionIsAlive: true
          cacheUserAttributes: true
      properties:
        items:
          description: The actual list of web sessions.
          items:
            $ref: '#/components/schemas/WebSession'
          type: array
      required:
      - items
      type: object
    WebStorageType:
      enum:
      - SessionStorage
      - LocalStorage
      type: string
    WebStorageTypes:
      example:
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        items:
          items:
            $ref: '#/components/schemas/Item'
          type: array
      required:
      - items
      type: object
    X509FileImportDoc:
      description: An X.509 certificate.
      example:
        fileData: fileData
        alias: alias
      properties:
        alias:
          description: The alias for the certificate.
          type: string
        fileData:
          description: The base64-encoded data of the certificate.
          type: string
      required:
      - alias
      - fileData
      type: object
