/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the SharedSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedSecret{}

// SharedSecret A shared secret.
type SharedSecret struct {
	// When creating a new SharedSecret, this is the ID for the SharedSecret. If not specified, an ID will be automatically assigned. When updating an existing SharedSecret, this field is ignored and the ID is determined by the path parameter.
	Id *int32 `json:"id,omitempty"`
	// (sortable) The created date of the secret as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
	Created *time.Time  `json:"created,omitempty"`
	Secret  HiddenField `json:"secret"`
}

// NewSharedSecret instantiates a new SharedSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedSecret(secret HiddenField) *SharedSecret {
	this := SharedSecret{}
	this.Secret = secret
	return &this
}

// NewSharedSecretWithDefaults instantiates a new SharedSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedSecretWithDefaults() *SharedSecret {
	this := SharedSecret{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SharedSecret) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedSecret) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SharedSecret) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SharedSecret) SetId(v int32) {
	o.Id = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SharedSecret) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedSecret) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SharedSecret) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *SharedSecret) SetCreated(v time.Time) {
	o.Created = &v
}

// GetSecret returns the Secret field value
func (o *SharedSecret) GetSecret() HiddenField {
	if o == nil {
		var ret HiddenField
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *SharedSecret) GetSecretOk() (*HiddenField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *SharedSecret) SetSecret(v HiddenField) {
	o.Secret = v
}

func (o SharedSecret) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	toSerialize["secret"] = o.Secret
	return toSerialize, nil
}

type NullableSharedSecret struct {
	value *SharedSecret
	isSet bool
}

func (v NullableSharedSecret) Get() *SharedSecret {
	return v.value
}

func (v *NullableSharedSecret) Set(val *SharedSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedSecret(val *SharedSecret) *NullableSharedSecret {
	return &NullableSharedSecret{value: val, isSet: true}
}

func (v NullableSharedSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
