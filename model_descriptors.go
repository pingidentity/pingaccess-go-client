/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Descriptors A list of descriptors.
type Descriptors struct {
	// The actual list of descriptors.
	Items []Descriptor `json:"items"`
}

// NewDescriptors instantiates a new Descriptors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescriptors(items []Descriptor) *Descriptors {
	this := Descriptors{}
	this.Items = items
	return &this
}

// NewDescriptorsWithDefaults instantiates a new Descriptors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptorsWithDefaults() *Descriptors {
	this := Descriptors{}
	return &this
}

// GetItems returns the Items field value
func (o *Descriptors) GetItems() []Descriptor {
	if o == nil {
		var ret []Descriptor
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *Descriptors) GetItemsOk() ([]Descriptor, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *Descriptors) SetItems(v []Descriptor) {
	o.Items = v
}

func (o Descriptors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableDescriptors struct {
	value *Descriptors
	isSet bool
}

func (v NullableDescriptors) Get() *Descriptors {
	return v.value
}

func (v *NullableDescriptors) Set(val *Descriptors) {
	v.value = val
	v.isSet = true
}

func (v NullableDescriptors) IsSet() bool {
	return v.isSet
}

func (v *NullableDescriptors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescriptors(val *Descriptors) *NullableDescriptors {
	return &NullableDescriptors{value: val, isSet: true}
}

func (v NullableDescriptors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescriptors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


