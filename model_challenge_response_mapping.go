/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChallengeResponseMapping A mapping from an unauthenticated request to an authentication challenge response.
type ChallengeResponseMapping struct {
	RequestMatcher RequestMatcher `json:"requestMatcher"`
	ChallengeResponse ChallengeResponse `json:"challengeResponse"`
}

// NewChallengeResponseMapping instantiates a new ChallengeResponseMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChallengeResponseMapping(requestMatcher RequestMatcher, challengeResponse ChallengeResponse) *ChallengeResponseMapping {
	this := ChallengeResponseMapping{}
	this.RequestMatcher = requestMatcher
	this.ChallengeResponse = challengeResponse
	return &this
}

// NewChallengeResponseMappingWithDefaults instantiates a new ChallengeResponseMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChallengeResponseMappingWithDefaults() *ChallengeResponseMapping {
	this := ChallengeResponseMapping{}
	return &this
}

// GetRequestMatcher returns the RequestMatcher field value
func (o *ChallengeResponseMapping) GetRequestMatcher() RequestMatcher {
	if o == nil {
		var ret RequestMatcher
		return ret
	}

	return o.RequestMatcher
}

// GetRequestMatcherOk returns a tuple with the RequestMatcher field value
// and a boolean to check if the value has been set.
func (o *ChallengeResponseMapping) GetRequestMatcherOk() (*RequestMatcher, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RequestMatcher, true
}

// SetRequestMatcher sets field value
func (o *ChallengeResponseMapping) SetRequestMatcher(v RequestMatcher) {
	o.RequestMatcher = v
}

// GetChallengeResponse returns the ChallengeResponse field value
func (o *ChallengeResponseMapping) GetChallengeResponse() ChallengeResponse {
	if o == nil {
		var ret ChallengeResponse
		return ret
	}

	return o.ChallengeResponse
}

// GetChallengeResponseOk returns a tuple with the ChallengeResponse field value
// and a boolean to check if the value has been set.
func (o *ChallengeResponseMapping) GetChallengeResponseOk() (*ChallengeResponse, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ChallengeResponse, true
}

// SetChallengeResponse sets field value
func (o *ChallengeResponseMapping) SetChallengeResponse(v ChallengeResponse) {
	o.ChallengeResponse = v
}

func (o ChallengeResponseMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["requestMatcher"] = o.RequestMatcher
	}
	if true {
		toSerialize["challengeResponse"] = o.ChallengeResponse
	}
	return json.Marshal(toSerialize)
}

type NullableChallengeResponseMapping struct {
	value *ChallengeResponseMapping
	isSet bool
}

func (v NullableChallengeResponseMapping) Get() *ChallengeResponseMapping {
	return v.value
}

func (v *NullableChallengeResponseMapping) Set(val *ChallengeResponseMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableChallengeResponseMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableChallengeResponseMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChallengeResponseMapping(val *ChallengeResponseMapping) *NullableChallengeResponseMapping {
	return &NullableChallengeResponseMapping{value: val, isSet: true}
}

func (v NullableChallengeResponseMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChallengeResponseMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


