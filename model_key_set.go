/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeySet An auth token key set configuration.
type KeySet struct {
	// The nonce used to derive the key used to encrypt the keySet value.
	Nonce string `json:"nonce"`
	// The encrypted key set. This value is bound to the nonce field and cannot be decrypted without also submitting the nonce used to produce the value.
	KeySet string `json:"keySet"`
}

// NewKeySet instantiates a new KeySet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeySet(nonce string, keySet string) *KeySet {
	this := KeySet{}
	this.Nonce = nonce
	this.KeySet = keySet
	return &this
}

// NewKeySetWithDefaults instantiates a new KeySet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeySetWithDefaults() *KeySet {
	this := KeySet{}
	return &this
}

// GetNonce returns the Nonce field value
func (o *KeySet) GetNonce() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value
// and a boolean to check if the value has been set.
func (o *KeySet) GetNonceOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Nonce, true
}

// SetNonce sets field value
func (o *KeySet) SetNonce(v string) {
	o.Nonce = v
}

// GetKeySet returns the KeySet field value
func (o *KeySet) GetKeySet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeySet
}

// GetKeySetOk returns a tuple with the KeySet field value
// and a boolean to check if the value has been set.
func (o *KeySet) GetKeySetOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.KeySet, true
}

// SetKeySet sets field value
func (o *KeySet) SetKeySet(v string) {
	o.KeySet = v
}

func (o KeySet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nonce"] = o.Nonce
	}
	if true {
		toSerialize["keySet"] = o.KeySet
	}
	return json.Marshal(toSerialize)
}

type NullableKeySet struct {
	value *KeySet
	isSet bool
}

func (v NullableKeySet) Get() *KeySet {
	return v.value
}

func (v *NullableKeySet) Set(val *KeySet) {
	v.value = val
	v.isSet = true
}

func (v NullableKeySet) IsSet() bool {
	return v.isSet
}

func (v *NullableKeySet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeySet(val *KeySet) *NullableKeySet {
	return &NullableKeySet{value: val, isSet: true}
}

func (v NullableKeySet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeySet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


