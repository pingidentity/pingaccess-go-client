/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RoleMappingConfiguration Configuration for mapping user attributes to roles.
type RoleMappingConfiguration struct {
	// Set to true to enable mapping of user attributes to roles.
	Enabled *bool `json:"enabled,omitempty"`
	Administrator *RequiredAttributeMapping `json:"administrator,omitempty"`
	PlatformAdmin *OptionalAttributeMapping `json:"platformAdmin,omitempty"`
	Auditor *OptionalAttributeMapping `json:"auditor,omitempty"`
}

// NewRoleMappingConfiguration instantiates a new RoleMappingConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMappingConfiguration() *RoleMappingConfiguration {
	this := RoleMappingConfiguration{}
	return &this
}

// NewRoleMappingConfigurationWithDefaults instantiates a new RoleMappingConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMappingConfigurationWithDefaults() *RoleMappingConfiguration {
	this := RoleMappingConfiguration{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RoleMappingConfiguration) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAdministrator returns the Administrator field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetAdministrator() RequiredAttributeMapping {
	if o == nil || isNil(o.Administrator) {
		var ret RequiredAttributeMapping
		return ret
	}
	return *o.Administrator
}

// GetAdministratorOk returns a tuple with the Administrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetAdministratorOk() (*RequiredAttributeMapping, bool) {
	if o == nil || isNil(o.Administrator) {
    return nil, false
	}
	return o.Administrator, true
}

// HasAdministrator returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasAdministrator() bool {
	if o != nil && !isNil(o.Administrator) {
		return true
	}

	return false
}

// SetAdministrator gets a reference to the given RequiredAttributeMapping and assigns it to the Administrator field.
func (o *RoleMappingConfiguration) SetAdministrator(v RequiredAttributeMapping) {
	o.Administrator = &v
}

// GetPlatformAdmin returns the PlatformAdmin field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetPlatformAdmin() OptionalAttributeMapping {
	if o == nil || isNil(o.PlatformAdmin) {
		var ret OptionalAttributeMapping
		return ret
	}
	return *o.PlatformAdmin
}

// GetPlatformAdminOk returns a tuple with the PlatformAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetPlatformAdminOk() (*OptionalAttributeMapping, bool) {
	if o == nil || isNil(o.PlatformAdmin) {
    return nil, false
	}
	return o.PlatformAdmin, true
}

// HasPlatformAdmin returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasPlatformAdmin() bool {
	if o != nil && !isNil(o.PlatformAdmin) {
		return true
	}

	return false
}

// SetPlatformAdmin gets a reference to the given OptionalAttributeMapping and assigns it to the PlatformAdmin field.
func (o *RoleMappingConfiguration) SetPlatformAdmin(v OptionalAttributeMapping) {
	o.PlatformAdmin = &v
}

// GetAuditor returns the Auditor field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetAuditor() OptionalAttributeMapping {
	if o == nil || isNil(o.Auditor) {
		var ret OptionalAttributeMapping
		return ret
	}
	return *o.Auditor
}

// GetAuditorOk returns a tuple with the Auditor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetAuditorOk() (*OptionalAttributeMapping, bool) {
	if o == nil || isNil(o.Auditor) {
    return nil, false
	}
	return o.Auditor, true
}

// HasAuditor returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasAuditor() bool {
	if o != nil && !isNil(o.Auditor) {
		return true
	}

	return false
}

// SetAuditor gets a reference to the given OptionalAttributeMapping and assigns it to the Auditor field.
func (o *RoleMappingConfiguration) SetAuditor(v OptionalAttributeMapping) {
	o.Auditor = &v
}

func (o RoleMappingConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Administrator) {
		toSerialize["administrator"] = o.Administrator
	}
	if !isNil(o.PlatformAdmin) {
		toSerialize["platformAdmin"] = o.PlatformAdmin
	}
	if !isNil(o.Auditor) {
		toSerialize["auditor"] = o.Auditor
	}
	return json.Marshal(toSerialize)
}

type NullableRoleMappingConfiguration struct {
	value *RoleMappingConfiguration
	isSet bool
}

func (v NullableRoleMappingConfiguration) Get() *RoleMappingConfiguration {
	return v.value
}

func (v *NullableRoleMappingConfiguration) Set(val *RoleMappingConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMappingConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMappingConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMappingConfiguration(val *RoleMappingConfiguration) *NullableRoleMappingConfiguration {
	return &NullableRoleMappingConfiguration{value: val, isSet: true}
}

func (v NullableRoleMappingConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMappingConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


