/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RoleMappingConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleMappingConfiguration{}

// RoleMappingConfiguration Configuration for mapping user attributes to roles.
type RoleMappingConfiguration struct {
	// Set to true to enable mapping of user attributes to roles.
	Enabled       *bool                     `json:"enabled,omitempty"`
	Administrator *RequiredAttributeMapping `json:"administrator,omitempty"`
	PlatformAdmin *OptionalAttributeMapping `json:"platformAdmin,omitempty"`
	Auditor       *OptionalAttributeMapping `json:"auditor,omitempty"`
}

// NewRoleMappingConfiguration instantiates a new RoleMappingConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMappingConfiguration() *RoleMappingConfiguration {
	this := RoleMappingConfiguration{}
	return &this
}

// NewRoleMappingConfigurationWithDefaults instantiates a new RoleMappingConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMappingConfigurationWithDefaults() *RoleMappingConfiguration {
	this := RoleMappingConfiguration{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RoleMappingConfiguration) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAdministrator returns the Administrator field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetAdministrator() RequiredAttributeMapping {
	if o == nil || IsNil(o.Administrator) {
		var ret RequiredAttributeMapping
		return ret
	}
	return *o.Administrator
}

// GetAdministratorOk returns a tuple with the Administrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetAdministratorOk() (*RequiredAttributeMapping, bool) {
	if o == nil || IsNil(o.Administrator) {
		return nil, false
	}
	return o.Administrator, true
}

// HasAdministrator returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasAdministrator() bool {
	if o != nil && !IsNil(o.Administrator) {
		return true
	}

	return false
}

// SetAdministrator gets a reference to the given RequiredAttributeMapping and assigns it to the Administrator field.
func (o *RoleMappingConfiguration) SetAdministrator(v RequiredAttributeMapping) {
	o.Administrator = &v
}

// GetPlatformAdmin returns the PlatformAdmin field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetPlatformAdmin() OptionalAttributeMapping {
	if o == nil || IsNil(o.PlatformAdmin) {
		var ret OptionalAttributeMapping
		return ret
	}
	return *o.PlatformAdmin
}

// GetPlatformAdminOk returns a tuple with the PlatformAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetPlatformAdminOk() (*OptionalAttributeMapping, bool) {
	if o == nil || IsNil(o.PlatformAdmin) {
		return nil, false
	}
	return o.PlatformAdmin, true
}

// HasPlatformAdmin returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasPlatformAdmin() bool {
	if o != nil && !IsNil(o.PlatformAdmin) {
		return true
	}

	return false
}

// SetPlatformAdmin gets a reference to the given OptionalAttributeMapping and assigns it to the PlatformAdmin field.
func (o *RoleMappingConfiguration) SetPlatformAdmin(v OptionalAttributeMapping) {
	o.PlatformAdmin = &v
}

// GetAuditor returns the Auditor field value if set, zero value otherwise.
func (o *RoleMappingConfiguration) GetAuditor() OptionalAttributeMapping {
	if o == nil || IsNil(o.Auditor) {
		var ret OptionalAttributeMapping
		return ret
	}
	return *o.Auditor
}

// GetAuditorOk returns a tuple with the Auditor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingConfiguration) GetAuditorOk() (*OptionalAttributeMapping, bool) {
	if o == nil || IsNil(o.Auditor) {
		return nil, false
	}
	return o.Auditor, true
}

// HasAuditor returns a boolean if a field has been set.
func (o *RoleMappingConfiguration) HasAuditor() bool {
	if o != nil && !IsNil(o.Auditor) {
		return true
	}

	return false
}

// SetAuditor gets a reference to the given OptionalAttributeMapping and assigns it to the Auditor field.
func (o *RoleMappingConfiguration) SetAuditor(v OptionalAttributeMapping) {
	o.Auditor = &v
}

func (o RoleMappingConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleMappingConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Administrator) {
		toSerialize["administrator"] = o.Administrator
	}
	if !IsNil(o.PlatformAdmin) {
		toSerialize["platformAdmin"] = o.PlatformAdmin
	}
	if !IsNil(o.Auditor) {
		toSerialize["auditor"] = o.Auditor
	}
	return toSerialize, nil
}

type NullableRoleMappingConfiguration struct {
	value *RoleMappingConfiguration
	isSet bool
}

func (v NullableRoleMappingConfiguration) Get() *RoleMappingConfiguration {
	return v.value
}

func (v *NullableRoleMappingConfiguration) Set(val *RoleMappingConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMappingConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMappingConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMappingConfiguration(val *RoleMappingConfiguration) *NullableRoleMappingConfiguration {
	return &NullableRoleMappingConfiguration{value: val, isSet: true}
}

func (v NullableRoleMappingConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMappingConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
