/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OidcLoginType the model 'OidcLoginType'
type OidcLoginType string

// List of OidcLoginType
const (
	OIDCLOGINTYPE_CODE OidcLoginType = "Code"
	OIDCLOGINTYPE_POST OidcLoginType = "POST"
	OIDCLOGINTYPE_X_POST OidcLoginType = "x_post"
)

// All allowed values of OidcLoginType enum
var AllowedOidcLoginTypeEnumValues = []OidcLoginType{
	"Code",
	"POST",
	"x_post",
}

func (v *OidcLoginType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OidcLoginType(value)
	for _, existing := range AllowedOidcLoginTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OidcLoginType", value)
}

// NewOidcLoginTypeFromValue returns a pointer to a valid OidcLoginType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOidcLoginTypeFromValue(v string) (*OidcLoginType, error) {
	ev := OidcLoginType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OidcLoginType: valid values are %v", v, AllowedOidcLoginTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OidcLoginType) IsValid() bool {
	for _, existing := range AllowedOidcLoginTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OidcLoginType value
func (v OidcLoginType) Ptr() *OidcLoginType {
	return &v
}

type NullableOidcLoginType struct {
	value *OidcLoginType
	isSet bool
}

func (v NullableOidcLoginType) Get() *OidcLoginType {
	return v.value
}

func (v *NullableOidcLoginType) Set(val *OidcLoginType) {
	v.value = val
	v.isSet = true
}

func (v NullableOidcLoginType) IsSet() bool {
	return v.isSet
}

func (v *NullableOidcLoginType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOidcLoginType(val *OidcLoginType) *NullableOidcLoginType {
	return &NullableOidcLoginType{value: val, isSet: true}
}

func (v NullableOidcLoginType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOidcLoginType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

