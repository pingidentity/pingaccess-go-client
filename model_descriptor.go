/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Descriptor A descriptor.
type Descriptor struct {
	// The list of configuration fields for the class.
	ConfigurationFields []ConfigurationField `json:"configurationFields"`
	// The type for the entity.
	Type string `json:"type"`
	// The label for the entity.
	Label string `json:"label"`
	// The name of the implementation class.
	ClassName string `json:"className"`
}

// NewDescriptor instantiates a new Descriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescriptor(configurationFields []ConfigurationField, type_ string, label string, className string) *Descriptor {
	this := Descriptor{}
	this.ConfigurationFields = configurationFields
	this.Type = type_
	this.Label = label
	this.ClassName = className
	return &this
}

// NewDescriptorWithDefaults instantiates a new Descriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptorWithDefaults() *Descriptor {
	this := Descriptor{}
	return &this
}

// GetConfigurationFields returns the ConfigurationFields field value
func (o *Descriptor) GetConfigurationFields() []ConfigurationField {
	if o == nil {
		var ret []ConfigurationField
		return ret
	}

	return o.ConfigurationFields
}

// GetConfigurationFieldsOk returns a tuple with the ConfigurationFields field value
// and a boolean to check if the value has been set.
func (o *Descriptor) GetConfigurationFieldsOk() ([]ConfigurationField, bool) {
	if o == nil {
    return nil, false
	}
	return o.ConfigurationFields, true
}

// SetConfigurationFields sets field value
func (o *Descriptor) SetConfigurationFields(v []ConfigurationField) {
	o.ConfigurationFields = v
}

// GetType returns the Type field value
func (o *Descriptor) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Descriptor) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Descriptor) SetType(v string) {
	o.Type = v
}

// GetLabel returns the Label field value
func (o *Descriptor) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Descriptor) GetLabelOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Descriptor) SetLabel(v string) {
	o.Label = v
}

// GetClassName returns the ClassName field value
func (o *Descriptor) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *Descriptor) GetClassNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *Descriptor) SetClassName(v string) {
	o.ClassName = v
}

func (o Descriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["configurationFields"] = o.ConfigurationFields
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["className"] = o.ClassName
	}
	return json.Marshal(toSerialize)
}

type NullableDescriptor struct {
	value *Descriptor
	isSet bool
}

func (v NullableDescriptor) Get() *Descriptor {
	return v.value
}

func (v *NullableDescriptor) Set(val *Descriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescriptor(val *Descriptor) *NullableDescriptor {
	return &NullableDescriptor{value: val, isSet: true}
}

func (v NullableDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


