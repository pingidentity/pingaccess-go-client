/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigurationOption The configuration option attributes.
type ConfigurationOption struct {
	// The configuration option value.
	Value string `json:"value"`
	// The configuration option label.
	Label string `json:"label"`
	// The configuration option category.
	Category string `json:"category"`
}

// NewConfigurationOption instantiates a new ConfigurationOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationOption(value string, label string, category string) *ConfigurationOption {
	this := ConfigurationOption{}
	this.Value = value
	this.Label = label
	this.Category = category
	return &this
}

// NewConfigurationOptionWithDefaults instantiates a new ConfigurationOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationOptionWithDefaults() *ConfigurationOption {
	this := ConfigurationOption{}
	return &this
}

// GetValue returns the Value field value
func (o *ConfigurationOption) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetValueOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ConfigurationOption) SetValue(v string) {
	o.Value = v
}

// GetLabel returns the Label field value
func (o *ConfigurationOption) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetLabelOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ConfigurationOption) SetLabel(v string) {
	o.Label = v
}

// GetCategory returns the Category field value
func (o *ConfigurationOption) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetCategoryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ConfigurationOption) SetCategory(v string) {
	o.Category = v
}

func (o ConfigurationOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["category"] = o.Category
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationOption struct {
	value *ConfigurationOption
	isSet bool
}

func (v NullableConfigurationOption) Get() *ConfigurationOption {
	return v.value
}

func (v *NullableConfigurationOption) Set(val *ConfigurationOption) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationOption) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationOption(val *ConfigurationOption) *NullableConfigurationOption {
	return &NullableConfigurationOption{value: val, isSet: true}
}

func (v NullableConfigurationOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


