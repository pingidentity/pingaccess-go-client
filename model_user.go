/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User A user.
type User struct {
	// The ID of the Administrative user. This value is read-only.
	Id *int32 `json:"id,omitempty"`
	// (sortable) The Administrative users's username.
	Username string `json:"username"`
	// (sortable) The Administrative account's email.
	Email *string `json:"email,omitempty"`
	// (sortable) The Administrative account's sla acceptance indicator.
	SlaAccepted *bool `json:"slaAccepted,omitempty"`
	// (sortable) The Administrative account's first login indicator.
	FirstLogin *bool `json:"firstLogin,omitempty"`
	// (sortable) The Administrative account's show tutorial indicator.
	ShowTutorial *bool `json:"showTutorial,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(username string) *User {
	this := User{}
	this.Username = username
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *User) SetId(v int32) {
	o.Id = &v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetSlaAccepted returns the SlaAccepted field value if set, zero value otherwise.
func (o *User) GetSlaAccepted() bool {
	if o == nil || IsNil(o.SlaAccepted) {
		var ret bool
		return ret
	}
	return *o.SlaAccepted
}

// GetSlaAcceptedOk returns a tuple with the SlaAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSlaAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.SlaAccepted) {
		return nil, false
	}
	return o.SlaAccepted, true
}

// HasSlaAccepted returns a boolean if a field has been set.
func (o *User) HasSlaAccepted() bool {
	if o != nil && !IsNil(o.SlaAccepted) {
		return true
	}

	return false
}

// SetSlaAccepted gets a reference to the given bool and assigns it to the SlaAccepted field.
func (o *User) SetSlaAccepted(v bool) {
	o.SlaAccepted = &v
}

// GetFirstLogin returns the FirstLogin field value if set, zero value otherwise.
func (o *User) GetFirstLogin() bool {
	if o == nil || IsNil(o.FirstLogin) {
		var ret bool
		return ret
	}
	return *o.FirstLogin
}

// GetFirstLoginOk returns a tuple with the FirstLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstLogin) {
		return nil, false
	}
	return o.FirstLogin, true
}

// HasFirstLogin returns a boolean if a field has been set.
func (o *User) HasFirstLogin() bool {
	if o != nil && !IsNil(o.FirstLogin) {
		return true
	}

	return false
}

// SetFirstLogin gets a reference to the given bool and assigns it to the FirstLogin field.
func (o *User) SetFirstLogin(v bool) {
	o.FirstLogin = &v
}

// GetShowTutorial returns the ShowTutorial field value if set, zero value otherwise.
func (o *User) GetShowTutorial() bool {
	if o == nil || IsNil(o.ShowTutorial) {
		var ret bool
		return ret
	}
	return *o.ShowTutorial
}

// GetShowTutorialOk returns a tuple with the ShowTutorial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetShowTutorialOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowTutorial) {
		return nil, false
	}
	return o.ShowTutorial, true
}

// HasShowTutorial returns a boolean if a field has been set.
func (o *User) HasShowTutorial() bool {
	if o != nil && !IsNil(o.ShowTutorial) {
		return true
	}

	return false
}

// SetShowTutorial gets a reference to the given bool and assigns it to the ShowTutorial field.
func (o *User) SetShowTutorial(v bool) {
	o.ShowTutorial = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["username"] = o.Username
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.SlaAccepted) {
		toSerialize["slaAccepted"] = o.SlaAccepted
	}
	if !IsNil(o.FirstLogin) {
		toSerialize["firstLogin"] = o.FirstLogin
	}
	if !IsNil(o.ShowTutorial) {
		toSerialize["showTutorial"] = o.ShowTutorial
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
