/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChallengeResponse An authentication challenge response.
type ChallengeResponse struct {
	Generator ChallengeResponseGenerator `json:"generator"`
	Filter *ChallengeResponseFilter `json:"filter,omitempty"`
}

// NewChallengeResponse instantiates a new ChallengeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChallengeResponse(generator ChallengeResponseGenerator) *ChallengeResponse {
	this := ChallengeResponse{}
	this.Generator = generator
	return &this
}

// NewChallengeResponseWithDefaults instantiates a new ChallengeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChallengeResponseWithDefaults() *ChallengeResponse {
	this := ChallengeResponse{}
	return &this
}

// GetGenerator returns the Generator field value
func (o *ChallengeResponse) GetGenerator() ChallengeResponseGenerator {
	if o == nil {
		var ret ChallengeResponseGenerator
		return ret
	}

	return o.Generator
}

// GetGeneratorOk returns a tuple with the Generator field value
// and a boolean to check if the value has been set.
func (o *ChallengeResponse) GetGeneratorOk() (*ChallengeResponseGenerator, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Generator, true
}

// SetGenerator sets field value
func (o *ChallengeResponse) SetGenerator(v ChallengeResponseGenerator) {
	o.Generator = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ChallengeResponse) GetFilter() ChallengeResponseFilter {
	if o == nil || isNil(o.Filter) {
		var ret ChallengeResponseFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeResponse) GetFilterOk() (*ChallengeResponseFilter, bool) {
	if o == nil || isNil(o.Filter) {
    return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ChallengeResponse) HasFilter() bool {
	if o != nil && !isNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given ChallengeResponseFilter and assigns it to the Filter field.
func (o *ChallengeResponse) SetFilter(v ChallengeResponseFilter) {
	o.Filter = &v
}

func (o ChallengeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["generator"] = o.Generator
	}
	if !isNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableChallengeResponse struct {
	value *ChallengeResponse
	isSet bool
}

func (v NullableChallengeResponse) Get() *ChallengeResponse {
	return v.value
}

func (v *NullableChallengeResponse) Set(val *ChallengeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChallengeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChallengeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChallengeResponse(val *ChallengeResponse) *NullableChallengeResponse {
	return &NullableChallengeResponse{value: val, isSet: true}
}

func (v NullableChallengeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChallengeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


