/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// TokenProviderType the model 'TokenProviderType'
type TokenProviderType string

// List of TokenProviderType
const (
	TOKENPROVIDERTYPE_PING_FEDERATE          TokenProviderType = "PingFederate"
	TOKENPROVIDERTYPE_COMMON                 TokenProviderType = "Common"
	TOKENPROVIDERTYPE_PING_ONE_FOR_CUSTOMERS TokenProviderType = "PingOneForCustomers"
)

// All allowed values of TokenProviderType enum
var AllowedTokenProviderTypeEnumValues = []TokenProviderType{
	"PingFederate",
	"Common",
	"PingOneForCustomers",
}

func (v *TokenProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenProviderType(value)
	for _, existing := range AllowedTokenProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenProviderType", value)
}

// NewTokenProviderTypeFromValue returns a pointer to a valid TokenProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenProviderTypeFromValue(v string) (*TokenProviderType, error) {
	ev := TokenProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenProviderType: valid values are %v", v, AllowedTokenProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenProviderType) IsValid() bool {
	for _, existing := range AllowedTokenProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenProviderType value
func (v TokenProviderType) Ptr() *TokenProviderType {
	return &v
}

type NullableTokenProviderType struct {
	value *TokenProviderType
	isSet bool
}

func (v NullableTokenProviderType) Get() *TokenProviderType {
	return v.value
}

func (v *NullableTokenProviderType) Set(val *TokenProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenProviderType(val *TokenProviderType) *NullableTokenProviderType {
	return &NullableTokenProviderType{value: val, isSet: true}
}

func (v NullableTokenProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
