/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WebStorageType the model 'WebStorageType'
type WebStorageType string

// List of WebStorageType
const (
	WEBSTORAGETYPE_SESSION_STORAGE WebStorageType = "SessionStorage"
	WEBSTORAGETYPE_LOCAL_STORAGE WebStorageType = "LocalStorage"
)

// All allowed values of WebStorageType enum
var AllowedWebStorageTypeEnumValues = []WebStorageType{
	"SessionStorage",
	"LocalStorage",
}

func (v *WebStorageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebStorageType(value)
	for _, existing := range AllowedWebStorageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebStorageType", value)
}

// NewWebStorageTypeFromValue returns a pointer to a valid WebStorageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebStorageTypeFromValue(v string) (*WebStorageType, error) {
	ev := WebStorageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebStorageType: valid values are %v", v, AllowedWebStorageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebStorageType) IsValid() bool {
	for _, existing := range AllowedWebStorageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebStorageType value
func (v WebStorageType) Ptr() *WebStorageType {
	return &v
}

type NullableWebStorageType struct {
	value *WebStorageType
	isSet bool
}

func (v NullableWebStorageType) Get() *WebStorageType {
	return v.value
}

func (v *NullableWebStorageType) Set(val *WebStorageType) {
	v.value = val
	v.isSet = true
}

func (v NullableWebStorageType) IsSet() bool {
	return v.isSet
}

func (v *NullableWebStorageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebStorageType(val *WebStorageType) *NullableWebStorageType {
	return &NullableWebStorageType{value: val, isSet: true}
}

func (v NullableWebStorageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebStorageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

