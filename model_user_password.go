/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPassword Settings to update a password.
type UserPassword struct {
	// The new password.
	NewPassword string `json:"newPassword"`
	// The current password.
	CurrentPassword string `json:"currentPassword"`
}

// NewUserPassword instantiates a new UserPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPassword(newPassword string, currentPassword string) *UserPassword {
	this := UserPassword{}
	this.NewPassword = newPassword
	this.CurrentPassword = currentPassword
	return &this
}

// NewUserPasswordWithDefaults instantiates a new UserPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordWithDefaults() *UserPassword {
	this := UserPassword{}
	return &this
}

// GetNewPassword returns the NewPassword field value
func (o *UserPassword) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *UserPassword) GetNewPasswordOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *UserPassword) SetNewPassword(v string) {
	o.NewPassword = v
}

// GetCurrentPassword returns the CurrentPassword field value
func (o *UserPassword) GetCurrentPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value
// and a boolean to check if the value has been set.
func (o *UserPassword) GetCurrentPasswordOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentPassword, true
}

// SetCurrentPassword sets field value
func (o *UserPassword) SetCurrentPassword(v string) {
	o.CurrentPassword = v
}

func (o UserPassword) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["newPassword"] = o.NewPassword
	}
	if true {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	return json.Marshal(toSerialize)
}

type NullableUserPassword struct {
	value *UserPassword
	isSet bool
}

func (v NullableUserPassword) Get() *UserPassword {
	return v.value
}

func (v *NullableUserPassword) Set(val *UserPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPassword(val *UserPassword) *NullableUserPassword {
	return &NullableUserPassword{value: val, isSet: true}
}

func (v NullableUserPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


