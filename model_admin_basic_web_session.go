/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AdminBasicWebSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminBasicWebSession{}

// AdminBasicWebSession An admin basic web session.
type AdminBasicWebSession struct {
	// The interval between UI polling for session validity.
	SessionPollIntervalInSeconds int32 `json:"sessionPollIntervalInSeconds"`
	// The time to have the UI display a warning before the session expires.
	ExpirationWarningInMinutes int32 `json:"expirationWarningInMinutes"`
	// The length of time you want the PA Admin Token to remain active. Once the PA Admin Token expires, an authenticated user must re-authenticate.
	SessionTimeoutInMinutes int32 `json:"sessionTimeoutInMinutes"`
	// The length of time you want the PingAccess Admin Token to remain active when no activity is detected.
	IdleTimeoutInMinutes int32 `json:"idleTimeoutInMinutes"`
	// Enter a unique identifier between 1 and 32 characters that defines who the PA Admin Token is applicable to.
	Audience            string               `json:"audience"`
	CookieType          WebSessionCookieType `json:"cookieType"`
	TimeoutGroovyScript string               `json:"timeoutGroovyScript"`
	// The domain where the cookie is stored--for example, corp.yourcompany.com.
	CookieDomain *string `json:"cookieDomain,omitempty"`
}

// NewAdminBasicWebSession instantiates a new AdminBasicWebSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminBasicWebSession(sessionPollIntervalInSeconds int32, expirationWarningInMinutes int32, sessionTimeoutInMinutes int32, idleTimeoutInMinutes int32, audience string, cookieType WebSessionCookieType, timeoutGroovyScript string) *AdminBasicWebSession {
	this := AdminBasicWebSession{}
	this.SessionPollIntervalInSeconds = sessionPollIntervalInSeconds
	this.ExpirationWarningInMinutes = expirationWarningInMinutes
	this.SessionTimeoutInMinutes = sessionTimeoutInMinutes
	this.IdleTimeoutInMinutes = idleTimeoutInMinutes
	this.Audience = audience
	this.CookieType = cookieType
	this.TimeoutGroovyScript = timeoutGroovyScript
	return &this
}

// NewAdminBasicWebSessionWithDefaults instantiates a new AdminBasicWebSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminBasicWebSessionWithDefaults() *AdminBasicWebSession {
	this := AdminBasicWebSession{}
	return &this
}

// GetSessionPollIntervalInSeconds returns the SessionPollIntervalInSeconds field value
func (o *AdminBasicWebSession) GetSessionPollIntervalInSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SessionPollIntervalInSeconds
}

// GetSessionPollIntervalInSecondsOk returns a tuple with the SessionPollIntervalInSeconds field value
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetSessionPollIntervalInSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionPollIntervalInSeconds, true
}

// SetSessionPollIntervalInSeconds sets field value
func (o *AdminBasicWebSession) SetSessionPollIntervalInSeconds(v int32) {
	o.SessionPollIntervalInSeconds = v
}

// GetExpirationWarningInMinutes returns the ExpirationWarningInMinutes field value
func (o *AdminBasicWebSession) GetExpirationWarningInMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpirationWarningInMinutes
}

// GetExpirationWarningInMinutesOk returns a tuple with the ExpirationWarningInMinutes field value
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetExpirationWarningInMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationWarningInMinutes, true
}

// SetExpirationWarningInMinutes sets field value
func (o *AdminBasicWebSession) SetExpirationWarningInMinutes(v int32) {
	o.ExpirationWarningInMinutes = v
}

// GetSessionTimeoutInMinutes returns the SessionTimeoutInMinutes field value
func (o *AdminBasicWebSession) GetSessionTimeoutInMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SessionTimeoutInMinutes
}

// GetSessionTimeoutInMinutesOk returns a tuple with the SessionTimeoutInMinutes field value
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetSessionTimeoutInMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionTimeoutInMinutes, true
}

// SetSessionTimeoutInMinutes sets field value
func (o *AdminBasicWebSession) SetSessionTimeoutInMinutes(v int32) {
	o.SessionTimeoutInMinutes = v
}

// GetIdleTimeoutInMinutes returns the IdleTimeoutInMinutes field value
func (o *AdminBasicWebSession) GetIdleTimeoutInMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IdleTimeoutInMinutes
}

// GetIdleTimeoutInMinutesOk returns a tuple with the IdleTimeoutInMinutes field value
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetIdleTimeoutInMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdleTimeoutInMinutes, true
}

// SetIdleTimeoutInMinutes sets field value
func (o *AdminBasicWebSession) SetIdleTimeoutInMinutes(v int32) {
	o.IdleTimeoutInMinutes = v
}

// GetAudience returns the Audience field value
func (o *AdminBasicWebSession) GetAudience() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetAudienceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Audience, true
}

// SetAudience sets field value
func (o *AdminBasicWebSession) SetAudience(v string) {
	o.Audience = v
}

// GetCookieType returns the CookieType field value
func (o *AdminBasicWebSession) GetCookieType() WebSessionCookieType {
	if o == nil {
		var ret WebSessionCookieType
		return ret
	}

	return o.CookieType
}

// GetCookieTypeOk returns a tuple with the CookieType field value
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetCookieTypeOk() (*WebSessionCookieType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CookieType, true
}

// SetCookieType sets field value
func (o *AdminBasicWebSession) SetCookieType(v WebSessionCookieType) {
	o.CookieType = v
}

// GetTimeoutGroovyScript returns the TimeoutGroovyScript field value
func (o *AdminBasicWebSession) GetTimeoutGroovyScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeoutGroovyScript
}

// GetTimeoutGroovyScriptOk returns a tuple with the TimeoutGroovyScript field value
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetTimeoutGroovyScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeoutGroovyScript, true
}

// SetTimeoutGroovyScript sets field value
func (o *AdminBasicWebSession) SetTimeoutGroovyScript(v string) {
	o.TimeoutGroovyScript = v
}

// GetCookieDomain returns the CookieDomain field value if set, zero value otherwise.
func (o *AdminBasicWebSession) GetCookieDomain() string {
	if o == nil || IsNil(o.CookieDomain) {
		var ret string
		return ret
	}
	return *o.CookieDomain
}

// GetCookieDomainOk returns a tuple with the CookieDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminBasicWebSession) GetCookieDomainOk() (*string, bool) {
	if o == nil || IsNil(o.CookieDomain) {
		return nil, false
	}
	return o.CookieDomain, true
}

// HasCookieDomain returns a boolean if a field has been set.
func (o *AdminBasicWebSession) HasCookieDomain() bool {
	if o != nil && !IsNil(o.CookieDomain) {
		return true
	}

	return false
}

// SetCookieDomain gets a reference to the given string and assigns it to the CookieDomain field.
func (o *AdminBasicWebSession) SetCookieDomain(v string) {
	o.CookieDomain = &v
}

func (o AdminBasicWebSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminBasicWebSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sessionPollIntervalInSeconds"] = o.SessionPollIntervalInSeconds
	toSerialize["expirationWarningInMinutes"] = o.ExpirationWarningInMinutes
	toSerialize["sessionTimeoutInMinutes"] = o.SessionTimeoutInMinutes
	toSerialize["idleTimeoutInMinutes"] = o.IdleTimeoutInMinutes
	toSerialize["audience"] = o.Audience
	toSerialize["cookieType"] = o.CookieType
	toSerialize["timeoutGroovyScript"] = o.TimeoutGroovyScript
	if !IsNil(o.CookieDomain) {
		toSerialize["cookieDomain"] = o.CookieDomain
	}
	return toSerialize, nil
}

type NullableAdminBasicWebSession struct {
	value *AdminBasicWebSession
	isSet bool
}

func (v NullableAdminBasicWebSession) Get() *AdminBasicWebSession {
	return v.value
}

func (v *NullableAdminBasicWebSession) Set(val *AdminBasicWebSession) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminBasicWebSession) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminBasicWebSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminBasicWebSession(val *AdminBasicWebSession) *NullableAdminBasicWebSession {
	return &NullableAdminBasicWebSession{value: val, isSet: true}
}

func (v NullableAdminBasicWebSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminBasicWebSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
