/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the EngineListener type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngineListener{}

// EngineListener An engine listener.
type EngineListener struct {
	// When creating a new EngineListener, this is the ID for the EngineListener. If not specified, an ID will be automatically assigned. When updating an existing EngineListener, this field is ignored and the ID is determined by the path parameter.
	Id *int32 `json:"id,omitempty"`
	// (sortable) The name of the engine listener.
	Name string `json:"name"`
	// (sortable) The port the engine listener listens on.
	Port int32 `json:"port"`
	// (sortable) Indicator if the engine listener should listen to HTTPS connections.
	Secure *bool `json:"secure,omitempty"`
	// Trusted Certificate Group assigned to engine listener for client certificate authentication.
	TrustedCertificateGroupId *int32 `json:"trustedCertificateGroupId,omitempty"`
}

// NewEngineListener instantiates a new EngineListener object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngineListener(name string, port int32) *EngineListener {
	this := EngineListener{}
	this.Name = name
	this.Port = port
	return &this
}

// NewEngineListenerWithDefaults instantiates a new EngineListener object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineListenerWithDefaults() *EngineListener {
	this := EngineListener{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EngineListener) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineListener) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EngineListener) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EngineListener) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *EngineListener) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EngineListener) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EngineListener) SetName(v string) {
	o.Name = v
}

// GetPort returns the Port field value
func (o *EngineListener) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *EngineListener) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *EngineListener) SetPort(v int32) {
	o.Port = v
}

// GetSecure returns the Secure field value if set, zero value otherwise.
func (o *EngineListener) GetSecure() bool {
	if o == nil || IsNil(o.Secure) {
		var ret bool
		return ret
	}
	return *o.Secure
}

// GetSecureOk returns a tuple with the Secure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineListener) GetSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.Secure) {
		return nil, false
	}
	return o.Secure, true
}

// HasSecure returns a boolean if a field has been set.
func (o *EngineListener) HasSecure() bool {
	if o != nil && !IsNil(o.Secure) {
		return true
	}

	return false
}

// SetSecure gets a reference to the given bool and assigns it to the Secure field.
func (o *EngineListener) SetSecure(v bool) {
	o.Secure = &v
}

// GetTrustedCertificateGroupId returns the TrustedCertificateGroupId field value if set, zero value otherwise.
func (o *EngineListener) GetTrustedCertificateGroupId() int32 {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		var ret int32
		return ret
	}
	return *o.TrustedCertificateGroupId
}

// GetTrustedCertificateGroupIdOk returns a tuple with the TrustedCertificateGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineListener) GetTrustedCertificateGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		return nil, false
	}
	return o.TrustedCertificateGroupId, true
}

// HasTrustedCertificateGroupId returns a boolean if a field has been set.
func (o *EngineListener) HasTrustedCertificateGroupId() bool {
	if o != nil && !IsNil(o.TrustedCertificateGroupId) {
		return true
	}

	return false
}

// SetTrustedCertificateGroupId gets a reference to the given int32 and assigns it to the TrustedCertificateGroupId field.
func (o *EngineListener) SetTrustedCertificateGroupId(v int32) {
	o.TrustedCertificateGroupId = &v
}

func (o EngineListener) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngineListener) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["port"] = o.Port
	if !IsNil(o.Secure) {
		toSerialize["secure"] = o.Secure
	}
	if !IsNil(o.TrustedCertificateGroupId) {
		toSerialize["trustedCertificateGroupId"] = o.TrustedCertificateGroupId
	}
	return toSerialize, nil
}

type NullableEngineListener struct {
	value *EngineListener
	isSet bool
}

func (v NullableEngineListener) Get() *EngineListener {
	return v.value
}

func (v *NullableEngineListener) Set(val *EngineListener) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineListener) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineListener) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineListener(val *EngineListener) *NullableEngineListener {
	return &NullableEngineListener{value: val, isSet: true}
}

func (v NullableEngineListener) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineListener) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
