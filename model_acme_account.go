/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AcmeAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcmeAccount{}

// AcmeAccount An ACME Account associated with a CA.
type AcmeAccount struct {
	// When creating a new AcmeAccount, this is the ID for the AcmeAccount. If not specified, an ID will be automatically assigned. When updating an existing AcmeAccount, this field is ignored and the ID is determined by the path parameter.
	Id *string `json:"id,omitempty"`
	// The URL the CA uses to reference the account.
	Url *string `json:"url,omitempty"`
	// The key algorithm used to generate a key.
	KeyAlgorithm *string      `json:"keyAlgorithm,omitempty"`
	PublicKey    *PublicKey   `json:"publicKey,omitempty"`
	PrivateKey   *HiddenField `json:"privateKey,omitempty"`
	// The associated ACME Server.
	AcmeServerId *string `json:"acmeServerId,omitempty"`
}

// NewAcmeAccount instantiates a new AcmeAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcmeAccount() *AcmeAccount {
	this := AcmeAccount{}
	return &this
}

// NewAcmeAccountWithDefaults instantiates a new AcmeAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcmeAccountWithDefaults() *AcmeAccount {
	this := AcmeAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AcmeAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AcmeAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AcmeAccount) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AcmeAccount) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeAccount) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AcmeAccount) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AcmeAccount) SetUrl(v string) {
	o.Url = &v
}

// GetKeyAlgorithm returns the KeyAlgorithm field value if set, zero value otherwise.
func (o *AcmeAccount) GetKeyAlgorithm() string {
	if o == nil || IsNil(o.KeyAlgorithm) {
		var ret string
		return ret
	}
	return *o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeAccount) GetKeyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.KeyAlgorithm) {
		return nil, false
	}
	return o.KeyAlgorithm, true
}

// HasKeyAlgorithm returns a boolean if a field has been set.
func (o *AcmeAccount) HasKeyAlgorithm() bool {
	if o != nil && !IsNil(o.KeyAlgorithm) {
		return true
	}

	return false
}

// SetKeyAlgorithm gets a reference to the given string and assigns it to the KeyAlgorithm field.
func (o *AcmeAccount) SetKeyAlgorithm(v string) {
	o.KeyAlgorithm = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *AcmeAccount) GetPublicKey() PublicKey {
	if o == nil || IsNil(o.PublicKey) {
		var ret PublicKey
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeAccount) GetPublicKeyOk() (*PublicKey, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *AcmeAccount) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given PublicKey and assigns it to the PublicKey field.
func (o *AcmeAccount) SetPublicKey(v PublicKey) {
	o.PublicKey = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *AcmeAccount) GetPrivateKey() HiddenField {
	if o == nil || IsNil(o.PrivateKey) {
		var ret HiddenField
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeAccount) GetPrivateKeyOk() (*HiddenField, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *AcmeAccount) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given HiddenField and assigns it to the PrivateKey field.
func (o *AcmeAccount) SetPrivateKey(v HiddenField) {
	o.PrivateKey = &v
}

// GetAcmeServerId returns the AcmeServerId field value if set, zero value otherwise.
func (o *AcmeAccount) GetAcmeServerId() string {
	if o == nil || IsNil(o.AcmeServerId) {
		var ret string
		return ret
	}
	return *o.AcmeServerId
}

// GetAcmeServerIdOk returns a tuple with the AcmeServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeAccount) GetAcmeServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.AcmeServerId) {
		return nil, false
	}
	return o.AcmeServerId, true
}

// HasAcmeServerId returns a boolean if a field has been set.
func (o *AcmeAccount) HasAcmeServerId() bool {
	if o != nil && !IsNil(o.AcmeServerId) {
		return true
	}

	return false
}

// SetAcmeServerId gets a reference to the given string and assigns it to the AcmeServerId field.
func (o *AcmeAccount) SetAcmeServerId(v string) {
	o.AcmeServerId = &v
}

func (o AcmeAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcmeAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.KeyAlgorithm) {
		toSerialize["keyAlgorithm"] = o.KeyAlgorithm
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if !IsNil(o.AcmeServerId) {
		toSerialize["acmeServerId"] = o.AcmeServerId
	}
	return toSerialize, nil
}

type NullableAcmeAccount struct {
	value *AcmeAccount
	isSet bool
}

func (v NullableAcmeAccount) Get() *AcmeAccount {
	return v.value
}

func (v *NullableAcmeAccount) Set(val *AcmeAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableAcmeAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAcmeAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcmeAccount(val *AcmeAccount) *NullableAcmeAccount {
	return &NullableAcmeAccount{value: val, isSet: true}
}

func (v NullableAcmeAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcmeAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
