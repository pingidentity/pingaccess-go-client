/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AdminTokenProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminTokenProvider{}

// AdminTokenProvider An Admin Token Provider.
type AdminTokenProvider struct {
	// The description of the Admin Token Provider.
	Description *string `json:"description,omitempty"`
	// The issuer url of the Admin Token Provider.
	Issuer string `json:"issuer"`
	// The group of certificates to use when authenticating to the Admin Token Provider.
	TrustedCertificateGroupId *int32 `json:"trustedCertificateGroupId,omitempty"`
	// True if a proxy should be used for HTTPS requests.
	UseProxy *bool `json:"useProxy,omitempty"`
	// Array of SSL protocolsto use for HTTPS requests. Empty to use all available protocols.
	SslProtocols []string `json:"sslProtocols"`
	// Array of SSL ciphers to use for HTTPS requests. Empty to use all available ciphers.
	SslCiphers []string `json:"sslCiphers"`
}

// NewAdminTokenProvider instantiates a new AdminTokenProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminTokenProvider(issuer string, sslProtocols []string, sslCiphers []string) *AdminTokenProvider {
	this := AdminTokenProvider{}
	this.Issuer = issuer
	this.SslProtocols = sslProtocols
	this.SslCiphers = sslCiphers
	return &this
}

// NewAdminTokenProviderWithDefaults instantiates a new AdminTokenProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminTokenProviderWithDefaults() *AdminTokenProvider {
	this := AdminTokenProvider{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdminTokenProvider) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminTokenProvider) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdminTokenProvider) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdminTokenProvider) SetDescription(v string) {
	o.Description = &v
}

// GetIssuer returns the Issuer field value
func (o *AdminTokenProvider) GetIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *AdminTokenProvider) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *AdminTokenProvider) SetIssuer(v string) {
	o.Issuer = v
}

// GetTrustedCertificateGroupId returns the TrustedCertificateGroupId field value if set, zero value otherwise.
func (o *AdminTokenProvider) GetTrustedCertificateGroupId() int32 {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		var ret int32
		return ret
	}
	return *o.TrustedCertificateGroupId
}

// GetTrustedCertificateGroupIdOk returns a tuple with the TrustedCertificateGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminTokenProvider) GetTrustedCertificateGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TrustedCertificateGroupId) {
		return nil, false
	}
	return o.TrustedCertificateGroupId, true
}

// HasTrustedCertificateGroupId returns a boolean if a field has been set.
func (o *AdminTokenProvider) HasTrustedCertificateGroupId() bool {
	if o != nil && !IsNil(o.TrustedCertificateGroupId) {
		return true
	}

	return false
}

// SetTrustedCertificateGroupId gets a reference to the given int32 and assigns it to the TrustedCertificateGroupId field.
func (o *AdminTokenProvider) SetTrustedCertificateGroupId(v int32) {
	o.TrustedCertificateGroupId = &v
}

// GetUseProxy returns the UseProxy field value if set, zero value otherwise.
func (o *AdminTokenProvider) GetUseProxy() bool {
	if o == nil || IsNil(o.UseProxy) {
		var ret bool
		return ret
	}
	return *o.UseProxy
}

// GetUseProxyOk returns a tuple with the UseProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminTokenProvider) GetUseProxyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseProxy) {
		return nil, false
	}
	return o.UseProxy, true
}

// HasUseProxy returns a boolean if a field has been set.
func (o *AdminTokenProvider) HasUseProxy() bool {
	if o != nil && !IsNil(o.UseProxy) {
		return true
	}

	return false
}

// SetUseProxy gets a reference to the given bool and assigns it to the UseProxy field.
func (o *AdminTokenProvider) SetUseProxy(v bool) {
	o.UseProxy = &v
}

// GetSslProtocols returns the SslProtocols field value
func (o *AdminTokenProvider) GetSslProtocols() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SslProtocols
}

// GetSslProtocolsOk returns a tuple with the SslProtocols field value
// and a boolean to check if the value has been set.
func (o *AdminTokenProvider) GetSslProtocolsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SslProtocols, true
}

// SetSslProtocols sets field value
func (o *AdminTokenProvider) SetSslProtocols(v []string) {
	o.SslProtocols = v
}

// GetSslCiphers returns the SslCiphers field value
func (o *AdminTokenProvider) GetSslCiphers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SslCiphers
}

// GetSslCiphersOk returns a tuple with the SslCiphers field value
// and a boolean to check if the value has been set.
func (o *AdminTokenProvider) GetSslCiphersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SslCiphers, true
}

// SetSslCiphers sets field value
func (o *AdminTokenProvider) SetSslCiphers(v []string) {
	o.SslCiphers = v
}

func (o AdminTokenProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminTokenProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["issuer"] = o.Issuer
	if !IsNil(o.TrustedCertificateGroupId) {
		toSerialize["trustedCertificateGroupId"] = o.TrustedCertificateGroupId
	}
	if !IsNil(o.UseProxy) {
		toSerialize["useProxy"] = o.UseProxy
	}
	toSerialize["sslProtocols"] = o.SslProtocols
	toSerialize["sslCiphers"] = o.SslCiphers
	return toSerialize, nil
}

type NullableAdminTokenProvider struct {
	value *AdminTokenProvider
	isSet bool
}

func (v NullableAdminTokenProvider) Get() *AdminTokenProvider {
	return v.value
}

func (v *NullableAdminTokenProvider) Set(val *AdminTokenProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminTokenProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminTokenProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminTokenProvider(val *AdminTokenProvider) *NullableAdminTokenProvider {
	return &NullableAdminTokenProvider{value: val, isSet: true}
}

func (v NullableAdminTokenProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminTokenProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
