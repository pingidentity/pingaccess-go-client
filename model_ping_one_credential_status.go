/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// PingOneCredentialStatus the model 'PingOneCredentialStatus'
type PingOneCredentialStatus string

// List of PingOneCredentialStatus
const (
	PINGONECREDENTIALSTATUS_VALID   PingOneCredentialStatus = "VALID"
	PINGONECREDENTIALSTATUS_INVALID PingOneCredentialStatus = "INVALID"
	PINGONECREDENTIALSTATUS_UNKNOWN PingOneCredentialStatus = "UNKNOWN"
)

// All allowed values of PingOneCredentialStatus enum
var AllowedPingOneCredentialStatusEnumValues = []PingOneCredentialStatus{
	"VALID",
	"INVALID",
	"UNKNOWN",
}

func (v *PingOneCredentialStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PingOneCredentialStatus(value)
	for _, existing := range AllowedPingOneCredentialStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PingOneCredentialStatus", value)
}

// NewPingOneCredentialStatusFromValue returns a pointer to a valid PingOneCredentialStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPingOneCredentialStatusFromValue(v string) (*PingOneCredentialStatus, error) {
	ev := PingOneCredentialStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PingOneCredentialStatus: valid values are %v", v, AllowedPingOneCredentialStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PingOneCredentialStatus) IsValid() bool {
	for _, existing := range AllowedPingOneCredentialStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PingOneCredentialStatus value
func (v PingOneCredentialStatus) Ptr() *PingOneCredentialStatus {
	return &v
}

type NullablePingOneCredentialStatus struct {
	value *PingOneCredentialStatus
	isSet bool
}

func (v NullablePingOneCredentialStatus) Get() *PingOneCredentialStatus {
	return v.value
}

func (v *NullablePingOneCredentialStatus) Set(val *PingOneCredentialStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOneCredentialStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOneCredentialStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOneCredentialStatus(val *PingOneCredentialStatus) *NullablePingOneCredentialStatus {
	return &NullablePingOneCredentialStatus{value: val, isSet: true}
}

func (v NullablePingOneCredentialStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOneCredentialStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
