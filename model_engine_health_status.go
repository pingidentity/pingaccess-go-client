/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the EngineHealthStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngineHealthStatus{}

// EngineHealthStatus Engine clustering health details.
type EngineHealthStatus struct {
	// The current epoch time of the server in milliseconds.
	CurrentServerTime int64 `json:"currentServerTime"`
	// Map of engines with their details. Details include name, description, last updated time, and polling delay.  Key type: String Value type: EngineInfo
	EnginesStatus map[string]EngineInfo `json:"enginesStatus"`
}

// NewEngineHealthStatus instantiates a new EngineHealthStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngineHealthStatus(currentServerTime int64, enginesStatus map[string]EngineInfo) *EngineHealthStatus {
	this := EngineHealthStatus{}
	this.CurrentServerTime = currentServerTime
	this.EnginesStatus = enginesStatus
	return &this
}

// NewEngineHealthStatusWithDefaults instantiates a new EngineHealthStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineHealthStatusWithDefaults() *EngineHealthStatus {
	this := EngineHealthStatus{}
	return &this
}

// GetCurrentServerTime returns the CurrentServerTime field value
func (o *EngineHealthStatus) GetCurrentServerTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CurrentServerTime
}

// GetCurrentServerTimeOk returns a tuple with the CurrentServerTime field value
// and a boolean to check if the value has been set.
func (o *EngineHealthStatus) GetCurrentServerTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentServerTime, true
}

// SetCurrentServerTime sets field value
func (o *EngineHealthStatus) SetCurrentServerTime(v int64) {
	o.CurrentServerTime = v
}

// GetEnginesStatus returns the EnginesStatus field value
func (o *EngineHealthStatus) GetEnginesStatus() map[string]EngineInfo {
	if o == nil {
		var ret map[string]EngineInfo
		return ret
	}

	return o.EnginesStatus
}

// GetEnginesStatusOk returns a tuple with the EnginesStatus field value
// and a boolean to check if the value has been set.
func (o *EngineHealthStatus) GetEnginesStatusOk() (*map[string]EngineInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnginesStatus, true
}

// SetEnginesStatus sets field value
func (o *EngineHealthStatus) SetEnginesStatus(v map[string]EngineInfo) {
	o.EnginesStatus = v
}

func (o EngineHealthStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngineHealthStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currentServerTime"] = o.CurrentServerTime
	toSerialize["enginesStatus"] = o.EnginesStatus
	return toSerialize, nil
}

type NullableEngineHealthStatus struct {
	value *EngineHealthStatus
	isSet bool
}

func (v NullableEngineHealthStatus) Get() *EngineHealthStatus {
	return v.value
}

func (v *NullableEngineHealthStatus) Set(val *EngineHealthStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineHealthStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineHealthStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineHealthStatus(val *EngineHealthStatus) *NullableEngineHealthStatus {
	return &NullableEngineHealthStatus{value: val, isSet: true}
}

func (v NullableEngineHealthStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineHealthStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
