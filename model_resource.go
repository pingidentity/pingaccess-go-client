/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the Resource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Resource{}

// Resource A resource.
type Resource struct {
	// When creating a new Resource, this is the ID for the Resource. If not specified, an ID will be automatically assigned. When updating an existing Resource, this field is ignored and the ID is determined by the path parameter.
	Id *int32 `json:"id,omitempty"`
	// (sortable) The name of the resource.
	Name string `json:"name"`
	// An array of HTTP methods configured for the resource.
	Methods []string `json:"methods"`
	// A list of one or more request path-matching patterns.
	PathPatterns []PathPattern `json:"pathPatterns,omitempty"`
	// An array of path prefixes for the resource (DEPRECATED - to be removed in a future release; please use 'pathPatterns' instead).
	PathPrefixes []string    `json:"pathPrefixes,omitempty"`
	AuditLevel   *AuditLevel `json:"auditLevel,omitempty"`
	// (sortable) True if the resource is the root resource for the application.
	RootResource *bool `json:"rootResource,omitempty"`
	// (sortable) True if the resource is anonymous.
	Anonymous *bool `json:"anonymous,omitempty"`
	// (sortable) True if the resource is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// (sortable) True if the resource is unprotected.
	Unprotected *bool `json:"unprotected,omitempty"`
	// A map of policy items associated with the resource.  The key is 'Web' or 'API' and the value is a list of PolicyItems.  Key type: String Value type: PolicyItem[]
	Policy                  *map[string][]PolicyItem `json:"policy,omitempty"`
	DefaultAuthTypeOverride DefaultAuthType          `json:"defaultAuthTypeOverride"`
	// The id of the associated application. This field is read-only.
	ApplicationId             *int32                     `json:"applicationId,omitempty"`
	QueryParamConfig          *QueryParamConfig          `json:"queryParamConfig,omitempty"`
	ResourceType              *ResourceType              `json:"resourceType,omitempty"`
	ResourceTypeConfiguration *ResourceTypeConfiguration `json:"resourceTypeConfiguration,omitempty"`
	// The UUID of the authentication challenge policy associated with the resource. This policy takes precedence over an application-level policy.
	AuthenticationChallengePolicyId string `json:"authenticationChallengePolicyId"`
	// The ID of the risk policy to use for this resource. This risk policy takes precedence over an application-level risk policy.
	RiskPolicyId *int32 `json:"riskPolicyId,omitempty"`
}

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource(name string, methods []string, defaultAuthTypeOverride DefaultAuthType, authenticationChallengePolicyId string) *Resource {
	this := Resource{}
	this.Name = name
	this.Methods = methods
	this.DefaultAuthTypeOverride = defaultAuthTypeOverride
	this.AuthenticationChallengePolicyId = authenticationChallengePolicyId
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Resource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Resource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Resource) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Resource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Resource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Resource) SetName(v string) {
	o.Name = v
}

// GetMethods returns the Methods field value
func (o *Resource) GetMethods() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value
// and a boolean to check if the value has been set.
func (o *Resource) GetMethodsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Methods, true
}

// SetMethods sets field value
func (o *Resource) SetMethods(v []string) {
	o.Methods = v
}

// GetPathPatterns returns the PathPatterns field value if set, zero value otherwise.
func (o *Resource) GetPathPatterns() []PathPattern {
	if o == nil || IsNil(o.PathPatterns) {
		var ret []PathPattern
		return ret
	}
	return o.PathPatterns
}

// GetPathPatternsOk returns a tuple with the PathPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetPathPatternsOk() ([]PathPattern, bool) {
	if o == nil || IsNil(o.PathPatterns) {
		return nil, false
	}
	return o.PathPatterns, true
}

// HasPathPatterns returns a boolean if a field has been set.
func (o *Resource) HasPathPatterns() bool {
	if o != nil && !IsNil(o.PathPatterns) {
		return true
	}

	return false
}

// SetPathPatterns gets a reference to the given []PathPattern and assigns it to the PathPatterns field.
func (o *Resource) SetPathPatterns(v []PathPattern) {
	o.PathPatterns = v
}

// GetPathPrefixes returns the PathPrefixes field value if set, zero value otherwise.
func (o *Resource) GetPathPrefixes() []string {
	if o == nil || IsNil(o.PathPrefixes) {
		var ret []string
		return ret
	}
	return o.PathPrefixes
}

// GetPathPrefixesOk returns a tuple with the PathPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetPathPrefixesOk() ([]string, bool) {
	if o == nil || IsNil(o.PathPrefixes) {
		return nil, false
	}
	return o.PathPrefixes, true
}

// HasPathPrefixes returns a boolean if a field has been set.
func (o *Resource) HasPathPrefixes() bool {
	if o != nil && !IsNil(o.PathPrefixes) {
		return true
	}

	return false
}

// SetPathPrefixes gets a reference to the given []string and assigns it to the PathPrefixes field.
func (o *Resource) SetPathPrefixes(v []string) {
	o.PathPrefixes = v
}

// GetAuditLevel returns the AuditLevel field value if set, zero value otherwise.
func (o *Resource) GetAuditLevel() AuditLevel {
	if o == nil || IsNil(o.AuditLevel) {
		var ret AuditLevel
		return ret
	}
	return *o.AuditLevel
}

// GetAuditLevelOk returns a tuple with the AuditLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetAuditLevelOk() (*AuditLevel, bool) {
	if o == nil || IsNil(o.AuditLevel) {
		return nil, false
	}
	return o.AuditLevel, true
}

// HasAuditLevel returns a boolean if a field has been set.
func (o *Resource) HasAuditLevel() bool {
	if o != nil && !IsNil(o.AuditLevel) {
		return true
	}

	return false
}

// SetAuditLevel gets a reference to the given AuditLevel and assigns it to the AuditLevel field.
func (o *Resource) SetAuditLevel(v AuditLevel) {
	o.AuditLevel = &v
}

// GetRootResource returns the RootResource field value if set, zero value otherwise.
func (o *Resource) GetRootResource() bool {
	if o == nil || IsNil(o.RootResource) {
		var ret bool
		return ret
	}
	return *o.RootResource
}

// GetRootResourceOk returns a tuple with the RootResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetRootResourceOk() (*bool, bool) {
	if o == nil || IsNil(o.RootResource) {
		return nil, false
	}
	return o.RootResource, true
}

// HasRootResource returns a boolean if a field has been set.
func (o *Resource) HasRootResource() bool {
	if o != nil && !IsNil(o.RootResource) {
		return true
	}

	return false
}

// SetRootResource gets a reference to the given bool and assigns it to the RootResource field.
func (o *Resource) SetRootResource(v bool) {
	o.RootResource = &v
}

// GetAnonymous returns the Anonymous field value if set, zero value otherwise.
func (o *Resource) GetAnonymous() bool {
	if o == nil || IsNil(o.Anonymous) {
		var ret bool
		return ret
	}
	return *o.Anonymous
}

// GetAnonymousOk returns a tuple with the Anonymous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetAnonymousOk() (*bool, bool) {
	if o == nil || IsNil(o.Anonymous) {
		return nil, false
	}
	return o.Anonymous, true
}

// HasAnonymous returns a boolean if a field has been set.
func (o *Resource) HasAnonymous() bool {
	if o != nil && !IsNil(o.Anonymous) {
		return true
	}

	return false
}

// SetAnonymous gets a reference to the given bool and assigns it to the Anonymous field.
func (o *Resource) SetAnonymous(v bool) {
	o.Anonymous = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Resource) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Resource) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Resource) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUnprotected returns the Unprotected field value if set, zero value otherwise.
func (o *Resource) GetUnprotected() bool {
	if o == nil || IsNil(o.Unprotected) {
		var ret bool
		return ret
	}
	return *o.Unprotected
}

// GetUnprotectedOk returns a tuple with the Unprotected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetUnprotectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unprotected) {
		return nil, false
	}
	return o.Unprotected, true
}

// HasUnprotected returns a boolean if a field has been set.
func (o *Resource) HasUnprotected() bool {
	if o != nil && !IsNil(o.Unprotected) {
		return true
	}

	return false
}

// SetUnprotected gets a reference to the given bool and assigns it to the Unprotected field.
func (o *Resource) SetUnprotected(v bool) {
	o.Unprotected = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *Resource) GetPolicy() map[string][]PolicyItem {
	if o == nil || IsNil(o.Policy) {
		var ret map[string][]PolicyItem
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetPolicyOk() (*map[string][]PolicyItem, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *Resource) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given map[string][]PolicyItem and assigns it to the Policy field.
func (o *Resource) SetPolicy(v map[string][]PolicyItem) {
	o.Policy = &v
}

// GetDefaultAuthTypeOverride returns the DefaultAuthTypeOverride field value
func (o *Resource) GetDefaultAuthTypeOverride() DefaultAuthType {
	if o == nil {
		var ret DefaultAuthType
		return ret
	}

	return o.DefaultAuthTypeOverride
}

// GetDefaultAuthTypeOverrideOk returns a tuple with the DefaultAuthTypeOverride field value
// and a boolean to check if the value has been set.
func (o *Resource) GetDefaultAuthTypeOverrideOk() (*DefaultAuthType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultAuthTypeOverride, true
}

// SetDefaultAuthTypeOverride sets field value
func (o *Resource) SetDefaultAuthTypeOverride(v DefaultAuthType) {
	o.DefaultAuthTypeOverride = v
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *Resource) GetApplicationId() int32 {
	if o == nil || IsNil(o.ApplicationId) {
		var ret int32
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetApplicationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *Resource) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given int32 and assigns it to the ApplicationId field.
func (o *Resource) SetApplicationId(v int32) {
	o.ApplicationId = &v
}

// GetQueryParamConfig returns the QueryParamConfig field value if set, zero value otherwise.
func (o *Resource) GetQueryParamConfig() QueryParamConfig {
	if o == nil || IsNil(o.QueryParamConfig) {
		var ret QueryParamConfig
		return ret
	}
	return *o.QueryParamConfig
}

// GetQueryParamConfigOk returns a tuple with the QueryParamConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetQueryParamConfigOk() (*QueryParamConfig, bool) {
	if o == nil || IsNil(o.QueryParamConfig) {
		return nil, false
	}
	return o.QueryParamConfig, true
}

// HasQueryParamConfig returns a boolean if a field has been set.
func (o *Resource) HasQueryParamConfig() bool {
	if o != nil && !IsNil(o.QueryParamConfig) {
		return true
	}

	return false
}

// SetQueryParamConfig gets a reference to the given QueryParamConfig and assigns it to the QueryParamConfig field.
func (o *Resource) SetQueryParamConfig(v QueryParamConfig) {
	o.QueryParamConfig = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Resource) GetResourceType() ResourceType {
	if o == nil || IsNil(o.ResourceType) {
		var ret ResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetResourceTypeOk() (*ResourceType, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Resource) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResourceType and assigns it to the ResourceType field.
func (o *Resource) SetResourceType(v ResourceType) {
	o.ResourceType = &v
}

// GetResourceTypeConfiguration returns the ResourceTypeConfiguration field value if set, zero value otherwise.
func (o *Resource) GetResourceTypeConfiguration() ResourceTypeConfiguration {
	if o == nil || IsNil(o.ResourceTypeConfiguration) {
		var ret ResourceTypeConfiguration
		return ret
	}
	return *o.ResourceTypeConfiguration
}

// GetResourceTypeConfigurationOk returns a tuple with the ResourceTypeConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetResourceTypeConfigurationOk() (*ResourceTypeConfiguration, bool) {
	if o == nil || IsNil(o.ResourceTypeConfiguration) {
		return nil, false
	}
	return o.ResourceTypeConfiguration, true
}

// HasResourceTypeConfiguration returns a boolean if a field has been set.
func (o *Resource) HasResourceTypeConfiguration() bool {
	if o != nil && !IsNil(o.ResourceTypeConfiguration) {
		return true
	}

	return false
}

// SetResourceTypeConfiguration gets a reference to the given ResourceTypeConfiguration and assigns it to the ResourceTypeConfiguration field.
func (o *Resource) SetResourceTypeConfiguration(v ResourceTypeConfiguration) {
	o.ResourceTypeConfiguration = &v
}

// GetAuthenticationChallengePolicyId returns the AuthenticationChallengePolicyId field value
func (o *Resource) GetAuthenticationChallengePolicyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationChallengePolicyId
}

// GetAuthenticationChallengePolicyIdOk returns a tuple with the AuthenticationChallengePolicyId field value
// and a boolean to check if the value has been set.
func (o *Resource) GetAuthenticationChallengePolicyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationChallengePolicyId, true
}

// SetAuthenticationChallengePolicyId sets field value
func (o *Resource) SetAuthenticationChallengePolicyId(v string) {
	o.AuthenticationChallengePolicyId = v
}

// GetRiskPolicyId returns the RiskPolicyId field value if set, zero value otherwise.
func (o *Resource) GetRiskPolicyId() int32 {
	if o == nil || IsNil(o.RiskPolicyId) {
		var ret int32
		return ret
	}
	return *o.RiskPolicyId
}

// GetRiskPolicyIdOk returns a tuple with the RiskPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetRiskPolicyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RiskPolicyId) {
		return nil, false
	}
	return o.RiskPolicyId, true
}

// HasRiskPolicyId returns a boolean if a field has been set.
func (o *Resource) HasRiskPolicyId() bool {
	if o != nil && !IsNil(o.RiskPolicyId) {
		return true
	}

	return false
}

// SetRiskPolicyId gets a reference to the given int32 and assigns it to the RiskPolicyId field.
func (o *Resource) SetRiskPolicyId(v int32) {
	o.RiskPolicyId = &v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Resource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["methods"] = o.Methods
	if !IsNil(o.PathPatterns) {
		toSerialize["pathPatterns"] = o.PathPatterns
	}
	if !IsNil(o.PathPrefixes) {
		toSerialize["pathPrefixes"] = o.PathPrefixes
	}
	if !IsNil(o.AuditLevel) {
		toSerialize["auditLevel"] = o.AuditLevel
	}
	if !IsNil(o.RootResource) {
		toSerialize["rootResource"] = o.RootResource
	}
	if !IsNil(o.Anonymous) {
		toSerialize["anonymous"] = o.Anonymous
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Unprotected) {
		toSerialize["unprotected"] = o.Unprotected
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	toSerialize["defaultAuthTypeOverride"] = o.DefaultAuthTypeOverride
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.QueryParamConfig) {
		toSerialize["queryParamConfig"] = o.QueryParamConfig
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.ResourceTypeConfiguration) {
		toSerialize["resourceTypeConfiguration"] = o.ResourceTypeConfiguration
	}
	toSerialize["authenticationChallengePolicyId"] = o.AuthenticationChallengePolicyId
	if !IsNil(o.RiskPolicyId) {
		toSerialize["riskPolicyId"] = o.RiskPolicyId
	}
	return toSerialize, nil
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
