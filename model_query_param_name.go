/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QueryParamName struct for QueryParamName
type QueryParamName struct {
	// The string value of the query parameter name.
	Pattern *string `json:"pattern,omitempty"`
	Type *QueryParamPatternType `json:"type,omitempty"`
}

// NewQueryParamName instantiates a new QueryParamName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryParamName() *QueryParamName {
	this := QueryParamName{}
	return &this
}

// NewQueryParamNameWithDefaults instantiates a new QueryParamName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryParamNameWithDefaults() *QueryParamName {
	this := QueryParamName{}
	return &this
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *QueryParamName) GetPattern() string {
	if o == nil || isNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryParamName) GetPatternOk() (*string, bool) {
	if o == nil || isNil(o.Pattern) {
    return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *QueryParamName) HasPattern() bool {
	if o != nil && !isNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *QueryParamName) SetPattern(v string) {
	o.Pattern = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QueryParamName) GetType() QueryParamPatternType {
	if o == nil || isNil(o.Type) {
		var ret QueryParamPatternType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryParamName) GetTypeOk() (*QueryParamPatternType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QueryParamName) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given QueryParamPatternType and assigns it to the Type field.
func (o *QueryParamName) SetType(v QueryParamPatternType) {
	o.Type = &v
}

func (o QueryParamName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableQueryParamName struct {
	value *QueryParamName
	isSet bool
}

func (v NullableQueryParamName) Get() *QueryParamName {
	return v.value
}

func (v *NullableQueryParamName) Set(val *QueryParamName) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryParamName) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryParamName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryParamName(val *QueryParamName) *NullableQueryParamName {
	return &NullableQueryParamName{value: val, isSet: true}
}

func (v NullableQueryParamName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryParamName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


