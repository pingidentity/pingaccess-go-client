/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RuleSets A collection of rule sets.
type RuleSets struct {
	// The actual list of rule sets.
	Items []RuleSet `json:"items"`
}

// NewRuleSets instantiates a new RuleSets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleSets(items []RuleSet) *RuleSets {
	this := RuleSets{}
	this.Items = items
	return &this
}

// NewRuleSetsWithDefaults instantiates a new RuleSets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleSetsWithDefaults() *RuleSets {
	this := RuleSets{}
	return &this
}

// GetItems returns the Items field value
func (o *RuleSets) GetItems() []RuleSet {
	if o == nil {
		var ret []RuleSet
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *RuleSets) GetItemsOk() ([]RuleSet, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *RuleSets) SetItems(v []RuleSet) {
	o.Items = v
}

func (o RuleSets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableRuleSets struct {
	value *RuleSets
	isSet bool
}

func (v NullableRuleSets) Get() *RuleSets {
	return v.value
}

func (v *NullableRuleSets) Set(val *RuleSets) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleSets) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleSets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleSets(val *RuleSets) *NullableRuleSets {
	return &NullableRuleSets{value: val, isSet: true}
}

func (v NullableRuleSets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleSets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


