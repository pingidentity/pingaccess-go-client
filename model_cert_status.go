/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// CertStatus the model 'CertStatus'
type CertStatus string

// List of CertStatus
const (
	CERTSTATUS_VALID                          CertStatus = "Valid"
	CERTSTATUS_EXPIRED                        CertStatus = "Expired"
	CERTSTATUS_NOT_YET_VALID                  CertStatus = "NotYetValid"
	CERTSTATUS_REVOKED                        CertStatus = "Revoked"
	CERTSTATUS_UNDETERMINED_REVOCATION_STATUS CertStatus = "UndeterminedRevocationStatus"
	CERTSTATUS_NO_PATH_TO_TRUST_ANCHOR        CertStatus = "NoPathToTrustAnchor"
	CERTSTATUS_INVALID                        CertStatus = "Invalid"
)

// All allowed values of CertStatus enum
var AllowedCertStatusEnumValues = []CertStatus{
	"Valid",
	"Expired",
	"NotYetValid",
	"Revoked",
	"UndeterminedRevocationStatus",
	"NoPathToTrustAnchor",
	"Invalid",
}

func (v *CertStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertStatus(value)
	for _, existing := range AllowedCertStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertStatus", value)
}

// NewCertStatusFromValue returns a pointer to a valid CertStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertStatusFromValue(v string) (*CertStatus, error) {
	ev := CertStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CertStatus: valid values are %v", v, AllowedCertStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertStatus) IsValid() bool {
	for _, existing := range AllowedCertStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CertStatus value
func (v CertStatus) Ptr() *CertStatus {
	return &v
}

type NullableCertStatus struct {
	value *CertStatus
	isSet bool
}

func (v NullableCertStatus) Get() *CertStatus {
	return v.value
}

func (v *NullableCertStatus) Set(val *CertStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCertStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCertStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertStatus(val *CertStatus) *NullableCertStatus {
	return &NullableCertStatus{value: val, isSet: true}
}

func (v NullableCertStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
