/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SidebandSharedSecretConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SidebandSharedSecretConfig{}

// SidebandSharedSecretConfig A configuration for sideband client shared secret.
type SidebandSharedSecretConfig struct {
	// The name of the HTTP header presented in the request by the sideband client. The default value is \"CLIENT-TOKEN\".
	SharedSecretHeaderName *string      `json:"sharedSecretHeaderName,omitempty"`
	Secret                 *HiddenField `json:"secret,omitempty"`
}

// NewSidebandSharedSecretConfig instantiates a new SidebandSharedSecretConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSidebandSharedSecretConfig() *SidebandSharedSecretConfig {
	this := SidebandSharedSecretConfig{}
	return &this
}

// NewSidebandSharedSecretConfigWithDefaults instantiates a new SidebandSharedSecretConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSidebandSharedSecretConfigWithDefaults() *SidebandSharedSecretConfig {
	this := SidebandSharedSecretConfig{}
	return &this
}

// GetSharedSecretHeaderName returns the SharedSecretHeaderName field value if set, zero value otherwise.
func (o *SidebandSharedSecretConfig) GetSharedSecretHeaderName() string {
	if o == nil || IsNil(o.SharedSecretHeaderName) {
		var ret string
		return ret
	}
	return *o.SharedSecretHeaderName
}

// GetSharedSecretHeaderNameOk returns a tuple with the SharedSecretHeaderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SidebandSharedSecretConfig) GetSharedSecretHeaderNameOk() (*string, bool) {
	if o == nil || IsNil(o.SharedSecretHeaderName) {
		return nil, false
	}
	return o.SharedSecretHeaderName, true
}

// HasSharedSecretHeaderName returns a boolean if a field has been set.
func (o *SidebandSharedSecretConfig) HasSharedSecretHeaderName() bool {
	if o != nil && !IsNil(o.SharedSecretHeaderName) {
		return true
	}

	return false
}

// SetSharedSecretHeaderName gets a reference to the given string and assigns it to the SharedSecretHeaderName field.
func (o *SidebandSharedSecretConfig) SetSharedSecretHeaderName(v string) {
	o.SharedSecretHeaderName = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *SidebandSharedSecretConfig) GetSecret() HiddenField {
	if o == nil || IsNil(o.Secret) {
		var ret HiddenField
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SidebandSharedSecretConfig) GetSecretOk() (*HiddenField, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *SidebandSharedSecretConfig) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given HiddenField and assigns it to the Secret field.
func (o *SidebandSharedSecretConfig) SetSecret(v HiddenField) {
	o.Secret = &v
}

func (o SidebandSharedSecretConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SidebandSharedSecretConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SharedSecretHeaderName) {
		toSerialize["sharedSecretHeaderName"] = o.SharedSecretHeaderName
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableSidebandSharedSecretConfig struct {
	value *SidebandSharedSecretConfig
	isSet bool
}

func (v NullableSidebandSharedSecretConfig) Get() *SidebandSharedSecretConfig {
	return v.value
}

func (v *NullableSidebandSharedSecretConfig) Set(val *SidebandSharedSecretConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSidebandSharedSecretConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSidebandSharedSecretConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSidebandSharedSecretConfig(val *SidebandSharedSecretConfig) *NullableSidebandSharedSecretConfig {
	return &NullableSidebandSharedSecretConfig{value: val, isSet: true}
}

func (v NullableSidebandSharedSecretConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSidebandSharedSecretConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
