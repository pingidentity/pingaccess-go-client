/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// HashAlgorithm the model 'HashAlgorithm'
type HashAlgorithm string

// List of HashAlgorithm
const (
	HASHALGORITHM_MD5    HashAlgorithm = "MD5"
	HASHALGORITHM_SHA1   HashAlgorithm = "SHA1"
	HASHALGORITHM_SHA256 HashAlgorithm = "SHA256"
	HASHALGORITHM_SHA384 HashAlgorithm = "SHA384"
	HASHALGORITHM_SHA512 HashAlgorithm = "SHA512"
)

// All allowed values of HashAlgorithm enum
var AllowedHashAlgorithmEnumValues = []HashAlgorithm{
	"MD5",
	"SHA1",
	"SHA256",
	"SHA384",
	"SHA512",
}

func (v *HashAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HashAlgorithm(value)
	for _, existing := range AllowedHashAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HashAlgorithm", value)
}

// NewHashAlgorithmFromValue returns a pointer to a valid HashAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHashAlgorithmFromValue(v string) (*HashAlgorithm, error) {
	ev := HashAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HashAlgorithm: valid values are %v", v, AllowedHashAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HashAlgorithm) IsValid() bool {
	for _, existing := range AllowedHashAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HashAlgorithm value
func (v HashAlgorithm) Ptr() *HashAlgorithm {
	return &v
}

type NullableHashAlgorithm struct {
	value *HashAlgorithm
	isSet bool
}

func (v NullableHashAlgorithm) Get() *HashAlgorithm {
	return v.value
}

func (v *NullableHashAlgorithm) Set(val *HashAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableHashAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableHashAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashAlgorithm(val *HashAlgorithm) *NullableHashAlgorithm {
	return &NullableHashAlgorithm{value: val, isSet: true}
}

func (v NullableHashAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
