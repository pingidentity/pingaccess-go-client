/*
PingAccess Administrative API

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess.

API version: 7.1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// QueryParamPatternType the model 'QueryParamPatternType'
type QueryParamPatternType string

// List of QueryParamPatternType
const (
	QUERYPARAMPATTERNTYPE_EXACT QueryParamPatternType = "EXACT"
)

// All allowed values of QueryParamPatternType enum
var AllowedQueryParamPatternTypeEnumValues = []QueryParamPatternType{
	"EXACT",
}

func (v *QueryParamPatternType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryParamPatternType(value)
	for _, existing := range AllowedQueryParamPatternTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryParamPatternType", value)
}

// NewQueryParamPatternTypeFromValue returns a pointer to a valid QueryParamPatternType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryParamPatternTypeFromValue(v string) (*QueryParamPatternType, error) {
	ev := QueryParamPatternType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryParamPatternType: valid values are %v", v, AllowedQueryParamPatternTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryParamPatternType) IsValid() bool {
	for _, existing := range AllowedQueryParamPatternTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryParamPatternType value
func (v QueryParamPatternType) Ptr() *QueryParamPatternType {
	return &v
}

type NullableQueryParamPatternType struct {
	value *QueryParamPatternType
	isSet bool
}

func (v NullableQueryParamPatternType) Get() *QueryParamPatternType {
	return v.value
}

func (v *NullableQueryParamPatternType) Set(val *QueryParamPatternType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryParamPatternType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryParamPatternType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryParamPatternType(val *QueryParamPatternType) *NullableQueryParamPatternType {
	return &NullableQueryParamPatternType{value: val, isSet: true}
}

func (v NullableQueryParamPatternType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryParamPatternType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

