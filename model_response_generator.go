/*
Administrative API Documentation

The PingAccess Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingAccess as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API.

API version: 7.3.0.2-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ResponseGenerator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseGenerator{}

// ResponseGenerator struct for ResponseGenerator
type ResponseGenerator struct {
	// The response generator's class name.
	ClassName string `json:"className"`
	// The response generator's configuration data. - This value is a PingAccess plugin configuration (JSON).
	Configuration map[string]interface{} `json:"configuration,omitempty"`
}

// NewResponseGenerator instantiates a new ResponseGenerator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseGenerator(className string) *ResponseGenerator {
	this := ResponseGenerator{}
	this.ClassName = className
	return &this
}

// NewResponseGeneratorWithDefaults instantiates a new ResponseGenerator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseGeneratorWithDefaults() *ResponseGenerator {
	this := ResponseGenerator{}
	return &this
}

// GetClassName returns the ClassName field value
func (o *ResponseGenerator) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *ResponseGenerator) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *ResponseGenerator) SetClassName(v string) {
	o.ClassName = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *ResponseGenerator) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseGenerator) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ResponseGenerator) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *ResponseGenerator) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

func (o ResponseGenerator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseGenerator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["className"] = o.ClassName
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableResponseGenerator struct {
	value *ResponseGenerator
	isSet bool
}

func (v NullableResponseGenerator) Get() *ResponseGenerator {
	return v.value
}

func (v *NullableResponseGenerator) Set(val *ResponseGenerator) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseGenerator) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseGenerator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseGenerator(val *ResponseGenerator) *NullableResponseGenerator {
	return &NullableResponseGenerator{value: val, isSet: true}
}

func (v NullableResponseGenerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseGenerator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
